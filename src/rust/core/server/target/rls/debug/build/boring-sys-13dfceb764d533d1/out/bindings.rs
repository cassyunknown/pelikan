/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: i32 = 1;
pub const _FEATURES_H: i32 = 1;
pub const _DEFAULT_SOURCE: i32 = 1;
pub const __GLIBC_USE_ISOC2X: i32 = 0;
pub const __USE_ISOC11: i32 = 1;
pub const __USE_ISOC99: i32 = 1;
pub const __USE_ISOC95: i32 = 1;
pub const __USE_POSIX_IMPLICITLY: i32 = 1;
pub const _POSIX_SOURCE: i32 = 1;
pub const _POSIX_C_SOURCE: i32 = 200809;
pub const __USE_POSIX: i32 = 1;
pub const __USE_POSIX2: i32 = 1;
pub const __USE_POSIX199309: i32 = 1;
pub const __USE_POSIX199506: i32 = 1;
pub const __USE_XOPEN2K: i32 = 1;
pub const __USE_XOPEN2K8: i32 = 1;
pub const _ATFILE_SOURCE: i32 = 1;
pub const __USE_MISC: i32 = 1;
pub const __USE_ATFILE: i32 = 1;
pub const __USE_FORTIFY_LEVEL: i32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: i32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: i32 = 0;
pub const _STDC_PREDEF_H: i32 = 1;
pub const __STDC_IEC_559__: i32 = 1;
pub const __STDC_IEC_559_COMPLEX__: i32 = 1;
pub const __STDC_ISO_10646__: i32 = 201706;
pub const __GNU_LIBRARY__: i32 = 6;
pub const __GLIBC__: i32 = 2;
pub const __GLIBC_MINOR__: i32 = 31;
pub const _SYS_CDEFS_H: i32 = 1;
pub const __glibc_c99_flexarr_available: i32 = 1;
pub const __WORDSIZE: i32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: i32 = 1;
pub const __SYSCALL_WORDSIZE: i32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: i32 = 0;
pub const __HAVE_GENERIC_SELECTION: i32 = 1;
pub const __GLIBC_USE_LIB_EXT2: i32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: i32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: i32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: i32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: i32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: i32 = 0;
pub const _BITS_TYPES_H: i32 = 1;
pub const __TIMESIZE: i32 = 64;
pub const _BITS_TYPESIZES_H: i32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: i32 = 1;
pub const __INO_T_MATCHES_INO64_T: i32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: i32 = 1;
pub const __STATFS_MATCHES_STATFS64: i32 = 1;
pub const __FD_SETSIZE: i32 = 1024;
pub const _BITS_TIME64_H: i32 = 1;
pub const _BITS_WCHAR_H: i32 = 1;
pub const _BITS_STDINT_INTN_H: i32 = 1;
pub const _BITS_STDINT_UINTN_H: i32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: i32 = 127;
pub const INT16_MAX: i32 = 32767;
pub const INT32_MAX: i32 = 2147483647;
pub const UINT8_MAX: i32 = 255;
pub const UINT16_MAX: i32 = 65535;
pub const UINT32_MAX: i64 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: i32 = 127;
pub const INT_LEAST16_MAX: i32 = 32767;
pub const INT_LEAST32_MAX: i32 = 2147483647;
pub const UINT_LEAST8_MAX: i32 = 255;
pub const UINT_LEAST16_MAX: i32 = 65535;
pub const UINT_LEAST32_MAX: i64 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: i32 = 127;
pub const INT_FAST16_MAX: i64 = 9223372036854775807;
pub const INT_FAST32_MAX: i64 = 9223372036854775807;
pub const UINT_FAST8_MAX: i32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: i64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: i64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: i32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = 0;
pub const WINT_MAX: i64 = 4294967295;
pub const _SYS_TYPES_H: i32 = 1;
pub const __clock_t_defined: i32 = 1;
pub const __clockid_t_defined: i32 = 1;
pub const __time_t_defined: i32 = 1;
pub const __timer_t_defined: i32 = 1;
pub const __BIT_TYPES_DEFINED__: i32 = 1;
pub const _ENDIAN_H: i32 = 1;
pub const _BITS_ENDIAN_H: i32 = 1;
pub const __LITTLE_ENDIAN: i32 = 1234;
pub const __BIG_ENDIAN: i32 = 4321;
pub const __PDP_ENDIAN: i32 = 3412;
pub const _BITS_ENDIANNESS_H: i32 = 1;
pub const __BYTE_ORDER: i32 = 1234;
pub const __FLOAT_WORD_ORDER: i32 = 1234;
pub const LITTLE_ENDIAN: i32 = 1234;
pub const BIG_ENDIAN: i32 = 4321;
pub const PDP_ENDIAN: i32 = 3412;
pub const BYTE_ORDER: i32 = 1234;
pub const _BITS_BYTESWAP_H: i32 = 1;
pub const _BITS_UINTN_IDENTITY_H: i32 = 1;
pub const _SYS_SELECT_H: i32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: i32 = 1;
pub const __timeval_defined: i32 = 1;
pub const _STRUCT_TIMESPEC: i32 = 1;
pub const FD_SETSIZE: i32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: i32 = 1;
pub const _THREAD_SHARED_TYPES_H: i32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: i32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: i32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: i32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: i32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: i32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: i32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: i32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: i32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: i32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: i32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: i32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: i32 = 1;
pub const __have_pthread_attr_t: i32 = 1;
pub const OPENSSL_VERSION_NUMBER: i32 = 269488255;
pub const SSLEAY_VERSION_NUMBER: i32 = 269488255;
pub const BORINGSSL_API_VERSION: i32 = 14;
pub const AES_ENCRYPT: i32 = 1;
pub const AES_DECRYPT: i32 = 0;
pub const AES_MAXNR: i32 = 14;
pub const AES_BLOCK_SIZE: i32 = 16;
pub const _TIME_H: i32 = 1;
pub const _BITS_TIME_H: i32 = 1;
pub const CLOCK_REALTIME: i32 = 0;
pub const CLOCK_MONOTONIC: i32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: i32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: i32 = 3;
pub const CLOCK_MONOTONIC_RAW: i32 = 4;
pub const CLOCK_REALTIME_COARSE: i32 = 5;
pub const CLOCK_MONOTONIC_COARSE: i32 = 6;
pub const CLOCK_BOOTTIME: i32 = 7;
pub const CLOCK_REALTIME_ALARM: i32 = 8;
pub const CLOCK_BOOTTIME_ALARM: i32 = 9;
pub const CLOCK_TAI: i32 = 11;
pub const TIMER_ABSTIME: i32 = 1;
pub const __struct_tm_defined: i32 = 1;
pub const __itimerspec_defined: i32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: i32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: i32 = 1;
pub const TIME_UTC: i32 = 1;
pub const _STDIO_H: i32 = 1;
pub const __GNUC_VA_LIST: i32 = 1;
pub const _____fpos_t_defined: i32 = 1;
pub const ____mbstate_t_defined: i32 = 1;
pub const _____fpos64_t_defined: i32 = 1;
pub const ____FILE_defined: i32 = 1;
pub const __FILE_defined: i32 = 1;
pub const __struct_FILE_defined: i32 = 1;
pub const _IO_EOF_SEEN: i32 = 16;
pub const _IO_ERR_SEEN: i32 = 32;
pub const _IO_USER_LOCK: i32 = 32768;
pub const _IOFBF: i32 = 0;
pub const _IOLBF: i32 = 1;
pub const _IONBF: i32 = 2;
pub const BUFSIZ: i32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: i32 = 0;
pub const SEEK_CUR: i32 = 1;
pub const SEEK_END: i32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: i32 = 1;
pub const L_tmpnam: i32 = 20;
pub const TMP_MAX: i32 = 238328;
pub const FILENAME_MAX: i32 = 4096;
pub const L_ctermid: i32 = 9;
pub const FOPEN_MAX: i32 = 16;
pub const ERR_FLAG_STRING: i32 = 1;
pub const ERR_R_FATAL: i32 = 64;
pub const ERR_R_MALLOC_FAILURE: i32 = 65;
pub const ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED: i32 = 66;
pub const ERR_R_PASSED_NULL_PARAMETER: i32 = 67;
pub const ERR_R_INTERNAL_ERROR: i32 = 68;
pub const ERR_R_OVERFLOW: i32 = 69;
pub const ERR_ERROR_STRING_BUF_LEN: i32 = 120;
pub const ERR_TXT_STRING: i32 = 1;
pub const ERR_NUM_ERRORS: i32 = 16;
pub const CRYPTO_LOCK: i32 = 1;
pub const CRYPTO_UNLOCK: i32 = 2;
pub const CRYPTO_READ: i32 = 4;
pub const CRYPTO_WRITE: i32 = 8;
pub const BIO_RR_CONNECT: i32 = 2;
pub const BIO_RR_ACCEPT: i32 = 3;
pub const BIO_CB_FREE: i32 = 1;
pub const BIO_CB_READ: i32 = 2;
pub const BIO_CB_WRITE: i32 = 3;
pub const BIO_CB_PUTS: i32 = 4;
pub const BIO_CB_GETS: i32 = 5;
pub const BIO_CB_CTRL: i32 = 6;
pub const BIO_CB_RETURN: i32 = 128;
pub const BIO_NOCLOSE: i32 = 0;
pub const BIO_CLOSE: i32 = 1;
pub const BIO_CTRL_DGRAM_QUERY_MTU: i32 = 40;
pub const BIO_CTRL_DGRAM_SET_MTU: i32 = 42;
pub const BIO_CTRL_DGRAM_MTU_EXCEEDED: i32 = 43;
pub const BIO_CTRL_DGRAM_GET_PEER: i32 = 46;
pub const BIO_CTRL_DGRAM_GET_FALLBACK_MTU: i32 = 47;
pub const BIO_CTRL_RESET: i32 = 1;
pub const BIO_CTRL_EOF: i32 = 2;
pub const BIO_CTRL_INFO: i32 = 3;
pub const BIO_CTRL_GET_CLOSE: i32 = 8;
pub const BIO_CTRL_SET_CLOSE: i32 = 9;
pub const BIO_CTRL_PENDING: i32 = 10;
pub const BIO_CTRL_FLUSH: i32 = 11;
pub const BIO_CTRL_WPENDING: i32 = 13;
pub const BIO_CTRL_SET_CALLBACK: i32 = 14;
pub const BIO_CTRL_GET_CALLBACK: i32 = 15;
pub const BIO_CTRL_SET: i32 = 4;
pub const BIO_CTRL_GET: i32 = 5;
pub const BIO_CTRL_PUSH: i32 = 6;
pub const BIO_CTRL_POP: i32 = 7;
pub const BIO_CTRL_DUP: i32 = 12;
pub const BIO_CTRL_SET_FILENAME: i32 = 30;
pub const BIO_FLAGS_READ: i32 = 1;
pub const BIO_FLAGS_WRITE: i32 = 2;
pub const BIO_FLAGS_IO_SPECIAL: i32 = 4;
pub const BIO_FLAGS_RWS: i32 = 7;
pub const BIO_FLAGS_SHOULD_RETRY: i32 = 8;
pub const BIO_FLAGS_BASE64_NO_NL: i32 = 256;
pub const BIO_FLAGS_MEM_RDONLY: i32 = 512;
pub const BIO_TYPE_NONE: i32 = 0;
pub const BIO_TYPE_MEM: i32 = 1025;
pub const BIO_TYPE_FILE: i32 = 1026;
pub const BIO_TYPE_FD: i32 = 1284;
pub const BIO_TYPE_SOCKET: i32 = 1285;
pub const BIO_TYPE_NULL: i32 = 1030;
pub const BIO_TYPE_SSL: i32 = 519;
pub const BIO_TYPE_MD: i32 = 520;
pub const BIO_TYPE_BUFFER: i32 = 521;
pub const BIO_TYPE_CIPHER: i32 = 522;
pub const BIO_TYPE_BASE64: i32 = 523;
pub const BIO_TYPE_CONNECT: i32 = 1292;
pub const BIO_TYPE_ACCEPT: i32 = 1293;
pub const BIO_TYPE_PROXY_CLIENT: i32 = 526;
pub const BIO_TYPE_PROXY_SERVER: i32 = 527;
pub const BIO_TYPE_NBIO_TEST: i32 = 528;
pub const BIO_TYPE_NULL_FILTER: i32 = 529;
pub const BIO_TYPE_BER: i32 = 530;
pub const BIO_TYPE_BIO: i32 = 1043;
pub const BIO_TYPE_LINEBUFFER: i32 = 532;
pub const BIO_TYPE_DGRAM: i32 = 1301;
pub const BIO_TYPE_ASN1: i32 = 534;
pub const BIO_TYPE_COMP: i32 = 535;
pub const BIO_TYPE_DESCRIPTOR: i32 = 256;
pub const BIO_TYPE_FILTER: i32 = 512;
pub const BIO_TYPE_SOURCE_SINK: i32 = 1024;
pub const BIO_TYPE_START: i32 = 128;
pub const BIO_C_SET_CONNECT: i32 = 100;
pub const BIO_C_DO_STATE_MACHINE: i32 = 101;
pub const BIO_C_SET_NBIO: i32 = 102;
pub const BIO_C_SET_PROXY_PARAM: i32 = 103;
pub const BIO_C_SET_FD: i32 = 104;
pub const BIO_C_GET_FD: i32 = 105;
pub const BIO_C_SET_FILE_PTR: i32 = 106;
pub const BIO_C_GET_FILE_PTR: i32 = 107;
pub const BIO_C_SET_FILENAME: i32 = 108;
pub const BIO_C_SET_SSL: i32 = 109;
pub const BIO_C_GET_SSL: i32 = 110;
pub const BIO_C_SET_MD: i32 = 111;
pub const BIO_C_GET_MD: i32 = 112;
pub const BIO_C_GET_CIPHER_STATUS: i32 = 113;
pub const BIO_C_SET_BUF_MEM: i32 = 114;
pub const BIO_C_GET_BUF_MEM_PTR: i32 = 115;
pub const BIO_C_GET_BUFF_NUM_LINES: i32 = 116;
pub const BIO_C_SET_BUFF_SIZE: i32 = 117;
pub const BIO_C_SET_ACCEPT: i32 = 118;
pub const BIO_C_SSL_MODE: i32 = 119;
pub const BIO_C_GET_MD_CTX: i32 = 120;
pub const BIO_C_GET_PROXY_PARAM: i32 = 121;
pub const BIO_C_SET_BUFF_READ_DATA: i32 = 122;
pub const BIO_C_GET_ACCEPT: i32 = 124;
pub const BIO_C_SET_SSL_RENEGOTIATE_BYTES: i32 = 125;
pub const BIO_C_GET_SSL_NUM_RENEGOTIATES: i32 = 126;
pub const BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT: i32 = 127;
pub const BIO_C_FILE_SEEK: i32 = 128;
pub const BIO_C_GET_CIPHER_CTX: i32 = 129;
pub const BIO_C_SET_BUF_MEM_EOF_RETURN: i32 = 130;
pub const BIO_C_SET_BIND_MODE: i32 = 131;
pub const BIO_C_GET_BIND_MODE: i32 = 132;
pub const BIO_C_FILE_TELL: i32 = 133;
pub const BIO_C_GET_SOCKS: i32 = 134;
pub const BIO_C_SET_SOCKS: i32 = 135;
pub const BIO_C_SET_WRITE_BUF_SIZE: i32 = 136;
pub const BIO_C_GET_WRITE_BUF_SIZE: i32 = 137;
pub const BIO_C_GET_WRITE_GUARANTEE: i32 = 140;
pub const BIO_C_GET_READ_REQUEST: i32 = 141;
pub const BIO_C_SHUTDOWN_WR: i32 = 142;
pub const BIO_C_NREAD0: i32 = 143;
pub const BIO_C_NREAD: i32 = 144;
pub const BIO_C_NWRITE0: i32 = 145;
pub const BIO_C_NWRITE: i32 = 146;
pub const BIO_C_RESET_READ_REQUEST: i32 = 147;
pub const BIO_C_SET_MD_CTX: i32 = 148;
pub const BIO_C_SET_PREFIX: i32 = 149;
pub const BIO_C_GET_PREFIX: i32 = 150;
pub const BIO_C_SET_SUFFIX: i32 = 151;
pub const BIO_C_GET_SUFFIX: i32 = 152;
pub const BIO_C_SET_EX_ARG: i32 = 153;
pub const BIO_C_GET_EX_ARG: i32 = 154;
pub const BIO_R_BAD_FOPEN_MODE: i32 = 100;
pub const BIO_R_BROKEN_PIPE: i32 = 101;
pub const BIO_R_CONNECT_ERROR: i32 = 102;
pub const BIO_R_ERROR_SETTING_NBIO: i32 = 103;
pub const BIO_R_INVALID_ARGUMENT: i32 = 104;
pub const BIO_R_IN_USE: i32 = 105;
pub const BIO_R_KEEPALIVE: i32 = 106;
pub const BIO_R_NBIO_CONNECT_ERROR: i32 = 107;
pub const BIO_R_NO_HOSTNAME_SPECIFIED: i32 = 108;
pub const BIO_R_NO_PORT_SPECIFIED: i32 = 109;
pub const BIO_R_NO_SUCH_FILE: i32 = 110;
pub const BIO_R_NULL_PARAMETER: i32 = 111;
pub const BIO_R_SYS_LIB: i32 = 112;
pub const BIO_R_UNABLE_TO_CREATE_SOCKET: i32 = 113;
pub const BIO_R_UNINITIALIZED: i32 = 114;
pub const BIO_R_UNSUPPORTED_METHOD: i32 = 115;
pub const BIO_R_WRITE_TO_READ_ONLY_BIO: i32 = 116;
pub const _INTTYPES_H: i32 = 1;
pub const ____gwchar_t_defined: i32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const BN_BITS2: i32 = 64;
pub const BN_DEC_FMT1: &'static [u8; 4usize] = b"%lu\0";
pub const BN_DEC_FMT2: &'static [u8; 7usize] = b"%019lu\0";
pub const BN_HEX_FMT1: &'static [u8; 4usize] = b"%lx\0";
pub const BN_HEX_FMT2: &'static [u8; 7usize] = b"%016lx\0";
pub const BN_RAND_TOP_ANY: i32 = -1;
pub const BN_RAND_TOP_ONE: i32 = 0;
pub const BN_RAND_TOP_TWO: i32 = 1;
pub const BN_RAND_BOTTOM_ANY: i32 = 0;
pub const BN_RAND_BOTTOM_ODD: i32 = 1;
pub const BN_GENCB_GENERATED: i32 = 0;
pub const BN_GENCB_PRIME_TEST: i32 = 1;
pub const BN_prime_checks_for_validation: i32 = 32;
pub const BN_prime_checks_for_generation: i32 = 0;
pub const BN_prime_checks: i32 = 32;
pub const BN_FLG_MALLOCED: i32 = 1;
pub const BN_FLG_STATIC_DATA: i32 = 2;
pub const BN_R_ARG2_LT_ARG3: i32 = 100;
pub const BN_R_BAD_RECIPROCAL: i32 = 101;
pub const BN_R_BIGNUM_TOO_LONG: i32 = 102;
pub const BN_R_BITS_TOO_SMALL: i32 = 103;
pub const BN_R_CALLED_WITH_EVEN_MODULUS: i32 = 104;
pub const BN_R_DIV_BY_ZERO: i32 = 105;
pub const BN_R_EXPAND_ON_STATIC_BIGNUM_DATA: i32 = 106;
pub const BN_R_INPUT_NOT_REDUCED: i32 = 107;
pub const BN_R_INVALID_RANGE: i32 = 108;
pub const BN_R_NEGATIVE_NUMBER: i32 = 109;
pub const BN_R_NOT_A_SQUARE: i32 = 110;
pub const BN_R_NOT_INITIALIZED: i32 = 111;
pub const BN_R_NO_INVERSE: i32 = 112;
pub const BN_R_PRIVATE_KEY_TOO_LARGE: i32 = 113;
pub const BN_R_P_IS_NOT_PRIME: i32 = 114;
pub const BN_R_TOO_MANY_ITERATIONS: i32 = 115;
pub const BN_R_TOO_MANY_TEMPORARY_VARIABLES: i32 = 116;
pub const BN_R_BAD_ENCODING: i32 = 117;
pub const BN_R_ENCODE_ERROR: i32 = 118;
pub const BN_R_INVALID_INPUT: i32 = 119;
pub const V_ASN1_UNIVERSAL: i32 = 0;
pub const V_ASN1_APPLICATION: i32 = 64;
pub const V_ASN1_CONTEXT_SPECIFIC: i32 = 128;
pub const V_ASN1_PRIVATE: i32 = 192;
pub const V_ASN1_CONSTRUCTED: i32 = 32;
pub const V_ASN1_PRIMITIVE_TAG: i32 = 31;
pub const V_ASN1_MAX_UNIVERSAL: i32 = 255;
pub const V_ASN1_UNDEF: i32 = -1;
pub const V_ASN1_APP_CHOOSE: i32 = -2;
pub const V_ASN1_OTHER: i32 = -3;
pub const V_ASN1_ANY: i32 = -4;
pub const V_ASN1_EOC: i32 = 0;
pub const V_ASN1_BOOLEAN: i32 = 1;
pub const V_ASN1_INTEGER: i32 = 2;
pub const V_ASN1_BIT_STRING: i32 = 3;
pub const V_ASN1_OCTET_STRING: i32 = 4;
pub const V_ASN1_NULL: i32 = 5;
pub const V_ASN1_OBJECT: i32 = 6;
pub const V_ASN1_OBJECT_DESCRIPTOR: i32 = 7;
pub const V_ASN1_EXTERNAL: i32 = 8;
pub const V_ASN1_REAL: i32 = 9;
pub const V_ASN1_ENUMERATED: i32 = 10;
pub const V_ASN1_UTF8STRING: i32 = 12;
pub const V_ASN1_SEQUENCE: i32 = 16;
pub const V_ASN1_SET: i32 = 17;
pub const V_ASN1_NUMERICSTRING: i32 = 18;
pub const V_ASN1_PRINTABLESTRING: i32 = 19;
pub const V_ASN1_T61STRING: i32 = 20;
pub const V_ASN1_TELETEXSTRING: i32 = 20;
pub const V_ASN1_VIDEOTEXSTRING: i32 = 21;
pub const V_ASN1_IA5STRING: i32 = 22;
pub const V_ASN1_UTCTIME: i32 = 23;
pub const V_ASN1_GENERALIZEDTIME: i32 = 24;
pub const V_ASN1_GRAPHICSTRING: i32 = 25;
pub const V_ASN1_ISO64STRING: i32 = 26;
pub const V_ASN1_VISIBLESTRING: i32 = 26;
pub const V_ASN1_GENERALSTRING: i32 = 27;
pub const V_ASN1_UNIVERSALSTRING: i32 = 28;
pub const V_ASN1_BMPSTRING: i32 = 30;
pub const V_ASN1_NEG: i32 = 256;
pub const V_ASN1_NEG_INTEGER: i32 = 258;
pub const V_ASN1_NEG_ENUMERATED: i32 = 266;
pub const ASN1_STRING_FLAG_BITS_LEFT: i32 = 8;
pub const ASN1_STRING_FLAG_MSTRING: i32 = 64;
pub const B_ASN1_NUMERICSTRING: i32 = 1;
pub const B_ASN1_PRINTABLESTRING: i32 = 2;
pub const B_ASN1_T61STRING: i32 = 4;
pub const B_ASN1_TELETEXSTRING: i32 = 4;
pub const B_ASN1_VIDEOTEXSTRING: i32 = 8;
pub const B_ASN1_IA5STRING: i32 = 16;
pub const B_ASN1_GRAPHICSTRING: i32 = 32;
pub const B_ASN1_ISO64STRING: i32 = 64;
pub const B_ASN1_VISIBLESTRING: i32 = 64;
pub const B_ASN1_GENERALSTRING: i32 = 128;
pub const B_ASN1_UNIVERSALSTRING: i32 = 256;
pub const B_ASN1_OCTET_STRING: i32 = 512;
pub const B_ASN1_BIT_STRING: i32 = 1024;
pub const B_ASN1_BMPSTRING: i32 = 2048;
pub const B_ASN1_UNKNOWN: i32 = 4096;
pub const B_ASN1_UTF8STRING: i32 = 8192;
pub const B_ASN1_UTCTIME: i32 = 16384;
pub const B_ASN1_GENERALIZEDTIME: i32 = 32768;
pub const B_ASN1_SEQUENCE: i32 = 65536;
pub const MBSTRING_FLAG: i32 = 4096;
pub const MBSTRING_UTF8: i32 = 4096;
pub const MBSTRING_ASC: i32 = 4097;
pub const MBSTRING_BMP: i32 = 4098;
pub const MBSTRING_UNIV: i32 = 4100;
pub const ASN1_OBJECT_FLAG_DYNAMIC: i32 = 1;
pub const ASN1_OBJECT_FLAG_DYNAMIC_STRINGS: i32 = 4;
pub const ASN1_OBJECT_FLAG_DYNAMIC_DATA: i32 = 8;
pub const STABLE_FLAGS_MALLOC: i32 = 1;
pub const STABLE_NO_MASK: i32 = 2;
pub const DIRSTRING_TYPE: i32 = 10246;
pub const PKCS9STRING_TYPE: i32 = 10262;
pub const ub_name: i32 = 32768;
pub const ub_common_name: i32 = 64;
pub const ub_locality_name: i32 = 128;
pub const ub_state_name: i32 = 128;
pub const ub_organization_name: i32 = 64;
pub const ub_organization_unit_name: i32 = 64;
pub const ub_title: i32 = 64;
pub const ub_email_address: i32 = 128;
pub const ASN1_STRFLGS_ESC_2253: i32 = 1;
pub const ASN1_STRFLGS_ESC_CTRL: i32 = 2;
pub const ASN1_STRFLGS_ESC_MSB: i32 = 4;
pub const ASN1_STRFLGS_ESC_QUOTE: i32 = 8;
pub const CHARTYPE_PRINTABLESTRING: i32 = 16;
pub const CHARTYPE_FIRST_ESC_2253: i32 = 32;
pub const CHARTYPE_LAST_ESC_2253: i32 = 64;
pub const ASN1_STRFLGS_UTF8_CONVERT: i32 = 16;
pub const ASN1_STRFLGS_IGNORE_TYPE: i32 = 32;
pub const ASN1_STRFLGS_SHOW_TYPE: i32 = 64;
pub const ASN1_STRFLGS_DUMP_ALL: i32 = 128;
pub const ASN1_STRFLGS_DUMP_UNKNOWN: i32 = 256;
pub const ASN1_STRFLGS_DUMP_DER: i32 = 512;
pub const ASN1_STRFLGS_RFC2253: i32 = 791;
pub const B_ASN1_TIME: i32 = 49152;
pub const B_ASN1_PRINTABLE: i32 = 81175;
pub const B_ASN1_DIRECTORYSTRING: i32 = 10502;
pub const B_ASN1_DISPLAYTEXT: i32 = 10320;
pub const ASN1_R_ASN1_LENGTH_MISMATCH: i32 = 100;
pub const ASN1_R_AUX_ERROR: i32 = 101;
pub const ASN1_R_BAD_GET_ASN1_OBJECT_CALL: i32 = 102;
pub const ASN1_R_BAD_OBJECT_HEADER: i32 = 103;
pub const ASN1_R_BMPSTRING_IS_WRONG_LENGTH: i32 = 104;
pub const ASN1_R_BN_LIB: i32 = 105;
pub const ASN1_R_BOOLEAN_IS_WRONG_LENGTH: i32 = 106;
pub const ASN1_R_BUFFER_TOO_SMALL: i32 = 107;
pub const ASN1_R_CONTEXT_NOT_INITIALISED: i32 = 108;
pub const ASN1_R_DECODE_ERROR: i32 = 109;
pub const ASN1_R_DEPTH_EXCEEDED: i32 = 110;
pub const ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED: i32 = 111;
pub const ASN1_R_ENCODE_ERROR: i32 = 112;
pub const ASN1_R_ERROR_GETTING_TIME: i32 = 113;
pub const ASN1_R_EXPECTING_AN_ASN1_SEQUENCE: i32 = 114;
pub const ASN1_R_EXPECTING_AN_INTEGER: i32 = 115;
pub const ASN1_R_EXPECTING_AN_OBJECT: i32 = 116;
pub const ASN1_R_EXPECTING_A_BOOLEAN: i32 = 117;
pub const ASN1_R_EXPECTING_A_TIME: i32 = 118;
pub const ASN1_R_EXPLICIT_LENGTH_MISMATCH: i32 = 119;
pub const ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED: i32 = 120;
pub const ASN1_R_FIELD_MISSING: i32 = 121;
pub const ASN1_R_FIRST_NUM_TOO_LARGE: i32 = 122;
pub const ASN1_R_HEADER_TOO_LONG: i32 = 123;
pub const ASN1_R_ILLEGAL_BITSTRING_FORMAT: i32 = 124;
pub const ASN1_R_ILLEGAL_BOOLEAN: i32 = 125;
pub const ASN1_R_ILLEGAL_CHARACTERS: i32 = 126;
pub const ASN1_R_ILLEGAL_FORMAT: i32 = 127;
pub const ASN1_R_ILLEGAL_HEX: i32 = 128;
pub const ASN1_R_ILLEGAL_IMPLICIT_TAG: i32 = 129;
pub const ASN1_R_ILLEGAL_INTEGER: i32 = 130;
pub const ASN1_R_ILLEGAL_NESTED_TAGGING: i32 = 131;
pub const ASN1_R_ILLEGAL_NULL: i32 = 132;
pub const ASN1_R_ILLEGAL_NULL_VALUE: i32 = 133;
pub const ASN1_R_ILLEGAL_OBJECT: i32 = 134;
pub const ASN1_R_ILLEGAL_OPTIONAL_ANY: i32 = 135;
pub const ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE: i32 = 136;
pub const ASN1_R_ILLEGAL_TAGGED_ANY: i32 = 137;
pub const ASN1_R_ILLEGAL_TIME_VALUE: i32 = 138;
pub const ASN1_R_INTEGER_NOT_ASCII_FORMAT: i32 = 139;
pub const ASN1_R_INTEGER_TOO_LARGE_FOR_LONG: i32 = 140;
pub const ASN1_R_INVALID_BIT_STRING_BITS_LEFT: i32 = 141;
pub const ASN1_R_INVALID_BMPSTRING: i32 = 142;
pub const ASN1_R_INVALID_DIGIT: i32 = 143;
pub const ASN1_R_INVALID_MODIFIER: i32 = 144;
pub const ASN1_R_INVALID_NUMBER: i32 = 145;
pub const ASN1_R_INVALID_OBJECT_ENCODING: i32 = 146;
pub const ASN1_R_INVALID_SEPARATOR: i32 = 147;
pub const ASN1_R_INVALID_TIME_FORMAT: i32 = 148;
pub const ASN1_R_INVALID_UNIVERSALSTRING: i32 = 149;
pub const ASN1_R_INVALID_UTF8STRING: i32 = 150;
pub const ASN1_R_LIST_ERROR: i32 = 151;
pub const ASN1_R_MISSING_ASN1_EOS: i32 = 152;
pub const ASN1_R_MISSING_EOC: i32 = 153;
pub const ASN1_R_MISSING_SECOND_NUMBER: i32 = 154;
pub const ASN1_R_MISSING_VALUE: i32 = 155;
pub const ASN1_R_MSTRING_NOT_UNIVERSAL: i32 = 156;
pub const ASN1_R_MSTRING_WRONG_TAG: i32 = 157;
pub const ASN1_R_NESTED_ASN1_ERROR: i32 = 158;
pub const ASN1_R_NESTED_ASN1_STRING: i32 = 159;
pub const ASN1_R_NON_HEX_CHARACTERS: i32 = 160;
pub const ASN1_R_NOT_ASCII_FORMAT: i32 = 161;
pub const ASN1_R_NOT_ENOUGH_DATA: i32 = 162;
pub const ASN1_R_NO_MATCHING_CHOICE_TYPE: i32 = 163;
pub const ASN1_R_NULL_IS_WRONG_LENGTH: i32 = 164;
pub const ASN1_R_OBJECT_NOT_ASCII_FORMAT: i32 = 165;
pub const ASN1_R_ODD_NUMBER_OF_CHARS: i32 = 166;
pub const ASN1_R_SECOND_NUMBER_TOO_LARGE: i32 = 167;
pub const ASN1_R_SEQUENCE_LENGTH_MISMATCH: i32 = 168;
pub const ASN1_R_SEQUENCE_NOT_CONSTRUCTED: i32 = 169;
pub const ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG: i32 = 170;
pub const ASN1_R_SHORT_LINE: i32 = 171;
pub const ASN1_R_STREAMING_NOT_SUPPORTED: i32 = 172;
pub const ASN1_R_STRING_TOO_LONG: i32 = 173;
pub const ASN1_R_STRING_TOO_SHORT: i32 = 174;
pub const ASN1_R_TAG_VALUE_TOO_HIGH: i32 = 175;
pub const ASN1_R_TIME_NOT_ASCII_FORMAT: i32 = 176;
pub const ASN1_R_TOO_LONG: i32 = 177;
pub const ASN1_R_TYPE_NOT_CONSTRUCTED: i32 = 178;
pub const ASN1_R_TYPE_NOT_PRIMITIVE: i32 = 179;
pub const ASN1_R_UNEXPECTED_EOC: i32 = 180;
pub const ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH: i32 = 181;
pub const ASN1_R_UNKNOWN_FORMAT: i32 = 182;
pub const ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM: i32 = 183;
pub const ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM: i32 = 184;
pub const ASN1_R_UNKNOWN_TAG: i32 = 185;
pub const ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE: i32 = 186;
pub const ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE: i32 = 187;
pub const ASN1_R_UNSUPPORTED_TYPE: i32 = 188;
pub const ASN1_R_WRONG_PUBLIC_KEY_TYPE: i32 = 189;
pub const ASN1_R_WRONG_TAG: i32 = 190;
pub const ASN1_R_WRONG_TYPE: i32 = 191;
pub const ASN1_R_NESTED_TOO_DEEP: i32 = 192;
pub const ASN1_R_BAD_TEMPLATE: i32 = 193;
pub const ASN1_TFLG_OPTIONAL: i32 = 1;
pub const ASN1_TFLG_SET_OF: i32 = 2;
pub const ASN1_TFLG_SEQUENCE_OF: i32 = 4;
pub const ASN1_TFLG_SET_ORDER: i32 = 6;
pub const ASN1_TFLG_SK_MASK: i32 = 6;
pub const ASN1_TFLG_IMPTAG: i32 = 8;
pub const ASN1_TFLG_EXPTAG: i32 = 16;
pub const ASN1_TFLG_TAG_MASK: i32 = 24;
pub const ASN1_TFLG_UNIVERSAL: i32 = 0;
pub const ASN1_TFLG_APPLICATION: i32 = 64;
pub const ASN1_TFLG_CONTEXT: i32 = 128;
pub const ASN1_TFLG_PRIVATE: i32 = 192;
pub const ASN1_TFLG_TAG_CLASS: i32 = 192;
pub const ASN1_TFLG_ADB_MASK: i32 = 768;
pub const ASN1_TFLG_ADB_OID: i32 = 256;
pub const ASN1_TFLG_ADB_INT: i32 = 512;
pub const ASN1_TFLG_COMBINE: i32 = 1024;
pub const ASN1_ITYPE_PRIMITIVE: i32 = 0;
pub const ASN1_ITYPE_SEQUENCE: i32 = 1;
pub const ASN1_ITYPE_CHOICE: i32 = 2;
pub const ASN1_ITYPE_EXTERN: i32 = 4;
pub const ASN1_ITYPE_MSTRING: i32 = 5;
pub const ASN1_AFLG_REFCOUNT: i32 = 1;
pub const ASN1_AFLG_ENCODING: i32 = 2;
pub const ASN1_OP_NEW_PRE: i32 = 0;
pub const ASN1_OP_NEW_POST: i32 = 1;
pub const ASN1_OP_FREE_PRE: i32 = 2;
pub const ASN1_OP_FREE_POST: i32 = 3;
pub const ASN1_OP_D2I_PRE: i32 = 4;
pub const ASN1_OP_D2I_POST: i32 = 5;
pub const ASN1_OP_I2D_PRE: i32 = 6;
pub const ASN1_OP_I2D_POST: i32 = 7;
pub const ASN1_OP_PRINT_PRE: i32 = 8;
pub const ASN1_OP_PRINT_POST: i32 = 9;
pub const ASN1_OP_STREAM_PRE: i32 = 10;
pub const ASN1_OP_STREAM_POST: i32 = 11;
pub const ASN1_OP_DETACHED_PRE: i32 = 12;
pub const ASN1_OP_DETACHED_POST: i32 = 13;
pub const BLAKE2B256_DIGEST_LENGTH: i32 = 32;
pub const BLAKE2B_CBLOCK: i32 = 128;
pub const BF_ENCRYPT: i32 = 1;
pub const BF_DECRYPT: i32 = 0;
pub const BF_ROUNDS: i32 = 16;
pub const BF_BLOCK: i32 = 8;
pub const CAST_ENCRYPT: i32 = 1;
pub const CAST_DECRYPT: i32 = 0;
pub const CAST_BLOCK: i32 = 8;
pub const CAST_KEY_LENGTH: i32 = 16;
pub const X25519_PRIVATE_KEY_LEN: i32 = 32;
pub const X25519_PUBLIC_VALUE_LEN: i32 = 32;
pub const X25519_SHARED_KEY_LEN: i32 = 32;
pub const ED25519_PRIVATE_KEY_LEN: i32 = 64;
pub const ED25519_PUBLIC_KEY_LEN: i32 = 32;
pub const ED25519_SIGNATURE_LEN: i32 = 64;
pub const SPAKE2_MAX_MSG_SIZE: i32 = 32;
pub const SPAKE2_MAX_KEY_SIZE: i32 = 64;
pub const DES_ENCRYPT: i32 = 1;
pub const DES_DECRYPT: i32 = 0;
pub const DES_CBC_MODE: i32 = 0;
pub const DES_PCBC_MODE: i32 = 1;
pub const HKDF_R_OUTPUT_TOO_LARGE: i32 = 100;
pub const HRSS_SAMPLE_BYTES: i32 = 700;
pub const HRSS_GENERATE_KEY_BYTES: i32 = 1432;
pub const HRSS_ENCAP_BYTES: i32 = 1400;
pub const HRSS_PUBLIC_KEY_BYTES: i32 = 1138;
pub const HRSS_CIPHERTEXT_BYTES: i32 = 1138;
pub const HRSS_KEY_BYTES: i32 = 32;
pub const HRSS_POLY3_BYTES: i32 = 140;
pub const HRSS_PRIVATE_KEY_BYTES: i32 = 1452;
pub const MD4_CBLOCK: i32 = 64;
pub const MD4_DIGEST_LENGTH: i32 = 16;
pub const MD5_CBLOCK: i32 = 64;
pub const MD5_DIGEST_LENGTH: i32 = 16;
pub const SN_undef: &'static [u8; 6usize] = b"UNDEF\0";
pub const LN_undef: &'static [u8; 10usize] = b"undefined\0";
pub const NID_undef: i32 = 0;
pub const OBJ_undef: i32 = 0;
pub const SN_rsadsi: &'static [u8; 7usize] = b"rsadsi\0";
pub const LN_rsadsi: &'static [u8; 24usize] = b"RSA Data Security, Inc.\0";
pub const NID_rsadsi: i32 = 1;
pub const SN_pkcs: &'static [u8; 5usize] = b"pkcs\0";
pub const LN_pkcs: &'static [u8; 29usize] = b"RSA Data Security, Inc. PKCS\0";
pub const NID_pkcs: i32 = 2;
pub const SN_md2: &'static [u8; 4usize] = b"MD2\0";
pub const LN_md2: &'static [u8; 4usize] = b"md2\0";
pub const NID_md2: i32 = 3;
pub const SN_md5: &'static [u8; 4usize] = b"MD5\0";
pub const LN_md5: &'static [u8; 4usize] = b"md5\0";
pub const NID_md5: i32 = 4;
pub const SN_rc4: &'static [u8; 4usize] = b"RC4\0";
pub const LN_rc4: &'static [u8; 4usize] = b"rc4\0";
pub const NID_rc4: i32 = 5;
pub const LN_rsaEncryption: &'static [u8; 14usize] = b"rsaEncryption\0";
pub const NID_rsaEncryption: i32 = 6;
pub const SN_md2WithRSAEncryption: &'static [u8; 8usize] = b"RSA-MD2\0";
pub const LN_md2WithRSAEncryption: &'static [u8; 21usize] = b"md2WithRSAEncryption\0";
pub const NID_md2WithRSAEncryption: i32 = 7;
pub const SN_md5WithRSAEncryption: &'static [u8; 8usize] = b"RSA-MD5\0";
pub const LN_md5WithRSAEncryption: &'static [u8; 21usize] = b"md5WithRSAEncryption\0";
pub const NID_md5WithRSAEncryption: i32 = 8;
pub const SN_pbeWithMD2AndDES_CBC: &'static [u8; 12usize] = b"PBE-MD2-DES\0";
pub const LN_pbeWithMD2AndDES_CBC: &'static [u8; 21usize] = b"pbeWithMD2AndDES-CBC\0";
pub const NID_pbeWithMD2AndDES_CBC: i32 = 9;
pub const SN_pbeWithMD5AndDES_CBC: &'static [u8; 12usize] = b"PBE-MD5-DES\0";
pub const LN_pbeWithMD5AndDES_CBC: &'static [u8; 21usize] = b"pbeWithMD5AndDES-CBC\0";
pub const NID_pbeWithMD5AndDES_CBC: i32 = 10;
pub const SN_X500: &'static [u8; 5usize] = b"X500\0";
pub const LN_X500: &'static [u8; 27usize] = b"directory services (X.500)\0";
pub const NID_X500: i32 = 11;
pub const SN_X509: &'static [u8; 5usize] = b"X509\0";
pub const NID_X509: i32 = 12;
pub const SN_commonName: &'static [u8; 3usize] = b"CN\0";
pub const LN_commonName: &'static [u8; 11usize] = b"commonName\0";
pub const NID_commonName: i32 = 13;
pub const SN_countryName: &'static [u8; 2usize] = b"C\0";
pub const LN_countryName: &'static [u8; 12usize] = b"countryName\0";
pub const NID_countryName: i32 = 14;
pub const SN_localityName: &'static [u8; 2usize] = b"L\0";
pub const LN_localityName: &'static [u8; 13usize] = b"localityName\0";
pub const NID_localityName: i32 = 15;
pub const SN_stateOrProvinceName: &'static [u8; 3usize] = b"ST\0";
pub const LN_stateOrProvinceName: &'static [u8; 20usize] = b"stateOrProvinceName\0";
pub const NID_stateOrProvinceName: i32 = 16;
pub const SN_organizationName: &'static [u8; 2usize] = b"O\0";
pub const LN_organizationName: &'static [u8; 17usize] = b"organizationName\0";
pub const NID_organizationName: i32 = 17;
pub const SN_organizationalUnitName: &'static [u8; 3usize] = b"OU\0";
pub const LN_organizationalUnitName: &'static [u8; 23usize] = b"organizationalUnitName\0";
pub const NID_organizationalUnitName: i32 = 18;
pub const SN_rsa: &'static [u8; 4usize] = b"RSA\0";
pub const LN_rsa: &'static [u8; 4usize] = b"rsa\0";
pub const NID_rsa: i32 = 19;
pub const SN_pkcs7: &'static [u8; 6usize] = b"pkcs7\0";
pub const NID_pkcs7: i32 = 20;
pub const LN_pkcs7_data: &'static [u8; 11usize] = b"pkcs7-data\0";
pub const NID_pkcs7_data: i32 = 21;
pub const LN_pkcs7_signed: &'static [u8; 17usize] = b"pkcs7-signedData\0";
pub const NID_pkcs7_signed: i32 = 22;
pub const LN_pkcs7_enveloped: &'static [u8; 20usize] = b"pkcs7-envelopedData\0";
pub const NID_pkcs7_enveloped: i32 = 23;
pub const LN_pkcs7_signedAndEnveloped: &'static [u8; 29usize] = b"pkcs7-signedAndEnvelopedData\0";
pub const NID_pkcs7_signedAndEnveloped: i32 = 24;
pub const LN_pkcs7_digest: &'static [u8; 17usize] = b"pkcs7-digestData\0";
pub const NID_pkcs7_digest: i32 = 25;
pub const LN_pkcs7_encrypted: &'static [u8; 20usize] = b"pkcs7-encryptedData\0";
pub const NID_pkcs7_encrypted: i32 = 26;
pub const SN_pkcs3: &'static [u8; 6usize] = b"pkcs3\0";
pub const NID_pkcs3: i32 = 27;
pub const LN_dhKeyAgreement: &'static [u8; 15usize] = b"dhKeyAgreement\0";
pub const NID_dhKeyAgreement: i32 = 28;
pub const SN_des_ecb: &'static [u8; 8usize] = b"DES-ECB\0";
pub const LN_des_ecb: &'static [u8; 8usize] = b"des-ecb\0";
pub const NID_des_ecb: i32 = 29;
pub const SN_des_cfb64: &'static [u8; 8usize] = b"DES-CFB\0";
pub const LN_des_cfb64: &'static [u8; 8usize] = b"des-cfb\0";
pub const NID_des_cfb64: i32 = 30;
pub const SN_des_cbc: &'static [u8; 8usize] = b"DES-CBC\0";
pub const LN_des_cbc: &'static [u8; 8usize] = b"des-cbc\0";
pub const NID_des_cbc: i32 = 31;
pub const SN_des_ede_ecb: &'static [u8; 8usize] = b"DES-EDE\0";
pub const LN_des_ede_ecb: &'static [u8; 8usize] = b"des-ede\0";
pub const NID_des_ede_ecb: i32 = 32;
pub const SN_des_ede3_ecb: &'static [u8; 9usize] = b"DES-EDE3\0";
pub const LN_des_ede3_ecb: &'static [u8; 9usize] = b"des-ede3\0";
pub const NID_des_ede3_ecb: i32 = 33;
pub const SN_idea_cbc: &'static [u8; 9usize] = b"IDEA-CBC\0";
pub const LN_idea_cbc: &'static [u8; 9usize] = b"idea-cbc\0";
pub const NID_idea_cbc: i32 = 34;
pub const SN_idea_cfb64: &'static [u8; 9usize] = b"IDEA-CFB\0";
pub const LN_idea_cfb64: &'static [u8; 9usize] = b"idea-cfb\0";
pub const NID_idea_cfb64: i32 = 35;
pub const SN_idea_ecb: &'static [u8; 9usize] = b"IDEA-ECB\0";
pub const LN_idea_ecb: &'static [u8; 9usize] = b"idea-ecb\0";
pub const NID_idea_ecb: i32 = 36;
pub const SN_rc2_cbc: &'static [u8; 8usize] = b"RC2-CBC\0";
pub const LN_rc2_cbc: &'static [u8; 8usize] = b"rc2-cbc\0";
pub const NID_rc2_cbc: i32 = 37;
pub const SN_rc2_ecb: &'static [u8; 8usize] = b"RC2-ECB\0";
pub const LN_rc2_ecb: &'static [u8; 8usize] = b"rc2-ecb\0";
pub const NID_rc2_ecb: i32 = 38;
pub const SN_rc2_cfb64: &'static [u8; 8usize] = b"RC2-CFB\0";
pub const LN_rc2_cfb64: &'static [u8; 8usize] = b"rc2-cfb\0";
pub const NID_rc2_cfb64: i32 = 39;
pub const SN_rc2_ofb64: &'static [u8; 8usize] = b"RC2-OFB\0";
pub const LN_rc2_ofb64: &'static [u8; 8usize] = b"rc2-ofb\0";
pub const NID_rc2_ofb64: i32 = 40;
pub const SN_sha: &'static [u8; 4usize] = b"SHA\0";
pub const LN_sha: &'static [u8; 4usize] = b"sha\0";
pub const NID_sha: i32 = 41;
pub const SN_shaWithRSAEncryption: &'static [u8; 8usize] = b"RSA-SHA\0";
pub const LN_shaWithRSAEncryption: &'static [u8; 21usize] = b"shaWithRSAEncryption\0";
pub const NID_shaWithRSAEncryption: i32 = 42;
pub const SN_des_ede_cbc: &'static [u8; 12usize] = b"DES-EDE-CBC\0";
pub const LN_des_ede_cbc: &'static [u8; 12usize] = b"des-ede-cbc\0";
pub const NID_des_ede_cbc: i32 = 43;
pub const SN_des_ede3_cbc: &'static [u8; 13usize] = b"DES-EDE3-CBC\0";
pub const LN_des_ede3_cbc: &'static [u8; 13usize] = b"des-ede3-cbc\0";
pub const NID_des_ede3_cbc: i32 = 44;
pub const SN_des_ofb64: &'static [u8; 8usize] = b"DES-OFB\0";
pub const LN_des_ofb64: &'static [u8; 8usize] = b"des-ofb\0";
pub const NID_des_ofb64: i32 = 45;
pub const SN_idea_ofb64: &'static [u8; 9usize] = b"IDEA-OFB\0";
pub const LN_idea_ofb64: &'static [u8; 9usize] = b"idea-ofb\0";
pub const NID_idea_ofb64: i32 = 46;
pub const SN_pkcs9: &'static [u8; 6usize] = b"pkcs9\0";
pub const NID_pkcs9: i32 = 47;
pub const LN_pkcs9_emailAddress: &'static [u8; 13usize] = b"emailAddress\0";
pub const NID_pkcs9_emailAddress: i32 = 48;
pub const LN_pkcs9_unstructuredName: &'static [u8; 17usize] = b"unstructuredName\0";
pub const NID_pkcs9_unstructuredName: i32 = 49;
pub const LN_pkcs9_contentType: &'static [u8; 12usize] = b"contentType\0";
pub const NID_pkcs9_contentType: i32 = 50;
pub const LN_pkcs9_messageDigest: &'static [u8; 14usize] = b"messageDigest\0";
pub const NID_pkcs9_messageDigest: i32 = 51;
pub const LN_pkcs9_signingTime: &'static [u8; 12usize] = b"signingTime\0";
pub const NID_pkcs9_signingTime: i32 = 52;
pub const LN_pkcs9_countersignature: &'static [u8; 17usize] = b"countersignature\0";
pub const NID_pkcs9_countersignature: i32 = 53;
pub const LN_pkcs9_challengePassword: &'static [u8; 18usize] = b"challengePassword\0";
pub const NID_pkcs9_challengePassword: i32 = 54;
pub const LN_pkcs9_unstructuredAddress: &'static [u8; 20usize] = b"unstructuredAddress\0";
pub const NID_pkcs9_unstructuredAddress: i32 = 55;
pub const LN_pkcs9_extCertAttributes: &'static [u8; 30usize] = b"extendedCertificateAttributes\0";
pub const NID_pkcs9_extCertAttributes: i32 = 56;
pub const SN_netscape: &'static [u8; 9usize] = b"Netscape\0";
pub const LN_netscape: &'static [u8; 30usize] = b"Netscape Communications Corp.\0";
pub const NID_netscape: i32 = 57;
pub const SN_netscape_cert_extension: &'static [u8; 10usize] = b"nsCertExt\0";
pub const LN_netscape_cert_extension: &'static [u8; 31usize] = b"Netscape Certificate Extension\0";
pub const NID_netscape_cert_extension: i32 = 58;
pub const SN_netscape_data_type: &'static [u8; 11usize] = b"nsDataType\0";
pub const LN_netscape_data_type: &'static [u8; 19usize] = b"Netscape Data Type\0";
pub const NID_netscape_data_type: i32 = 59;
pub const SN_des_ede_cfb64: &'static [u8; 12usize] = b"DES-EDE-CFB\0";
pub const LN_des_ede_cfb64: &'static [u8; 12usize] = b"des-ede-cfb\0";
pub const NID_des_ede_cfb64: i32 = 60;
pub const SN_des_ede3_cfb64: &'static [u8; 13usize] = b"DES-EDE3-CFB\0";
pub const LN_des_ede3_cfb64: &'static [u8; 13usize] = b"des-ede3-cfb\0";
pub const NID_des_ede3_cfb64: i32 = 61;
pub const SN_des_ede_ofb64: &'static [u8; 12usize] = b"DES-EDE-OFB\0";
pub const LN_des_ede_ofb64: &'static [u8; 12usize] = b"des-ede-ofb\0";
pub const NID_des_ede_ofb64: i32 = 62;
pub const SN_des_ede3_ofb64: &'static [u8; 13usize] = b"DES-EDE3-OFB\0";
pub const LN_des_ede3_ofb64: &'static [u8; 13usize] = b"des-ede3-ofb\0";
pub const NID_des_ede3_ofb64: i32 = 63;
pub const SN_sha1: &'static [u8; 5usize] = b"SHA1\0";
pub const LN_sha1: &'static [u8; 5usize] = b"sha1\0";
pub const NID_sha1: i32 = 64;
pub const SN_sha1WithRSAEncryption: &'static [u8; 9usize] = b"RSA-SHA1\0";
pub const LN_sha1WithRSAEncryption: &'static [u8; 22usize] = b"sha1WithRSAEncryption\0";
pub const NID_sha1WithRSAEncryption: i32 = 65;
pub const SN_dsaWithSHA: &'static [u8; 8usize] = b"DSA-SHA\0";
pub const LN_dsaWithSHA: &'static [u8; 11usize] = b"dsaWithSHA\0";
pub const NID_dsaWithSHA: i32 = 66;
pub const SN_dsa_2: &'static [u8; 8usize] = b"DSA-old\0";
pub const LN_dsa_2: &'static [u8; 18usize] = b"dsaEncryption-old\0";
pub const NID_dsa_2: i32 = 67;
pub const SN_pbeWithSHA1AndRC2_CBC: &'static [u8; 16usize] = b"PBE-SHA1-RC2-64\0";
pub const LN_pbeWithSHA1AndRC2_CBC: &'static [u8; 22usize] = b"pbeWithSHA1AndRC2-CBC\0";
pub const NID_pbeWithSHA1AndRC2_CBC: i32 = 68;
pub const LN_id_pbkdf2: &'static [u8; 7usize] = b"PBKDF2\0";
pub const NID_id_pbkdf2: i32 = 69;
pub const SN_dsaWithSHA1_2: &'static [u8; 13usize] = b"DSA-SHA1-old\0";
pub const LN_dsaWithSHA1_2: &'static [u8; 16usize] = b"dsaWithSHA1-old\0";
pub const NID_dsaWithSHA1_2: i32 = 70;
pub const SN_netscape_cert_type: &'static [u8; 11usize] = b"nsCertType\0";
pub const LN_netscape_cert_type: &'static [u8; 19usize] = b"Netscape Cert Type\0";
pub const NID_netscape_cert_type: i32 = 71;
pub const SN_netscape_base_url: &'static [u8; 10usize] = b"nsBaseUrl\0";
pub const LN_netscape_base_url: &'static [u8; 18usize] = b"Netscape Base Url\0";
pub const NID_netscape_base_url: i32 = 72;
pub const SN_netscape_revocation_url: &'static [u8; 16usize] = b"nsRevocationUrl\0";
pub const LN_netscape_revocation_url: &'static [u8; 24usize] = b"Netscape Revocation Url\0";
pub const NID_netscape_revocation_url: i32 = 73;
pub const SN_netscape_ca_revocation_url: &'static [u8; 18usize] = b"nsCaRevocationUrl\0";
pub const LN_netscape_ca_revocation_url: &'static [u8; 27usize] = b"Netscape CA Revocation Url\0";
pub const NID_netscape_ca_revocation_url: i32 = 74;
pub const SN_netscape_renewal_url: &'static [u8; 13usize] = b"nsRenewalUrl\0";
pub const LN_netscape_renewal_url: &'static [u8; 21usize] = b"Netscape Renewal Url\0";
pub const NID_netscape_renewal_url: i32 = 75;
pub const SN_netscape_ca_policy_url: &'static [u8; 14usize] = b"nsCaPolicyUrl\0";
pub const LN_netscape_ca_policy_url: &'static [u8; 23usize] = b"Netscape CA Policy Url\0";
pub const NID_netscape_ca_policy_url: i32 = 76;
pub const SN_netscape_ssl_server_name: &'static [u8; 16usize] = b"nsSslServerName\0";
pub const LN_netscape_ssl_server_name: &'static [u8; 25usize] = b"Netscape SSL Server Name\0";
pub const NID_netscape_ssl_server_name: i32 = 77;
pub const SN_netscape_comment: &'static [u8; 10usize] = b"nsComment\0";
pub const LN_netscape_comment: &'static [u8; 17usize] = b"Netscape Comment\0";
pub const NID_netscape_comment: i32 = 78;
pub const SN_netscape_cert_sequence: &'static [u8; 15usize] = b"nsCertSequence\0";
pub const LN_netscape_cert_sequence: &'static [u8; 30usize] = b"Netscape Certificate Sequence\0";
pub const NID_netscape_cert_sequence: i32 = 79;
pub const SN_desx_cbc: &'static [u8; 9usize] = b"DESX-CBC\0";
pub const LN_desx_cbc: &'static [u8; 9usize] = b"desx-cbc\0";
pub const NID_desx_cbc: i32 = 80;
pub const SN_id_ce: &'static [u8; 6usize] = b"id-ce\0";
pub const NID_id_ce: i32 = 81;
pub const SN_subject_key_identifier: &'static [u8; 21usize] = b"subjectKeyIdentifier\0";
pub const LN_subject_key_identifier: &'static [u8; 30usize] = b"X509v3 Subject Key Identifier\0";
pub const NID_subject_key_identifier: i32 = 82;
pub const SN_key_usage: &'static [u8; 9usize] = b"keyUsage\0";
pub const LN_key_usage: &'static [u8; 17usize] = b"X509v3 Key Usage\0";
pub const NID_key_usage: i32 = 83;
pub const SN_private_key_usage_period: &'static [u8; 22usize] = b"privateKeyUsagePeriod\0";
pub const LN_private_key_usage_period: &'static [u8; 32usize] =
    b"X509v3 Private Key Usage Period\0";
pub const NID_private_key_usage_period: i32 = 84;
pub const SN_subject_alt_name: &'static [u8; 15usize] = b"subjectAltName\0";
pub const LN_subject_alt_name: &'static [u8; 32usize] = b"X509v3 Subject Alternative Name\0";
pub const NID_subject_alt_name: i32 = 85;
pub const SN_issuer_alt_name: &'static [u8; 14usize] = b"issuerAltName\0";
pub const LN_issuer_alt_name: &'static [u8; 31usize] = b"X509v3 Issuer Alternative Name\0";
pub const NID_issuer_alt_name: i32 = 86;
pub const SN_basic_constraints: &'static [u8; 17usize] = b"basicConstraints\0";
pub const LN_basic_constraints: &'static [u8; 25usize] = b"X509v3 Basic Constraints\0";
pub const NID_basic_constraints: i32 = 87;
pub const SN_crl_number: &'static [u8; 10usize] = b"crlNumber\0";
pub const LN_crl_number: &'static [u8; 18usize] = b"X509v3 CRL Number\0";
pub const NID_crl_number: i32 = 88;
pub const SN_certificate_policies: &'static [u8; 20usize] = b"certificatePolicies\0";
pub const LN_certificate_policies: &'static [u8; 28usize] = b"X509v3 Certificate Policies\0";
pub const NID_certificate_policies: i32 = 89;
pub const SN_authority_key_identifier: &'static [u8; 23usize] = b"authorityKeyIdentifier\0";
pub const LN_authority_key_identifier: &'static [u8; 32usize] =
    b"X509v3 Authority Key Identifier\0";
pub const NID_authority_key_identifier: i32 = 90;
pub const SN_bf_cbc: &'static [u8; 7usize] = b"BF-CBC\0";
pub const LN_bf_cbc: &'static [u8; 7usize] = b"bf-cbc\0";
pub const NID_bf_cbc: i32 = 91;
pub const SN_bf_ecb: &'static [u8; 7usize] = b"BF-ECB\0";
pub const LN_bf_ecb: &'static [u8; 7usize] = b"bf-ecb\0";
pub const NID_bf_ecb: i32 = 92;
pub const SN_bf_cfb64: &'static [u8; 7usize] = b"BF-CFB\0";
pub const LN_bf_cfb64: &'static [u8; 7usize] = b"bf-cfb\0";
pub const NID_bf_cfb64: i32 = 93;
pub const SN_bf_ofb64: &'static [u8; 7usize] = b"BF-OFB\0";
pub const LN_bf_ofb64: &'static [u8; 7usize] = b"bf-ofb\0";
pub const NID_bf_ofb64: i32 = 94;
pub const SN_mdc2: &'static [u8; 5usize] = b"MDC2\0";
pub const LN_mdc2: &'static [u8; 5usize] = b"mdc2\0";
pub const NID_mdc2: i32 = 95;
pub const SN_mdc2WithRSA: &'static [u8; 9usize] = b"RSA-MDC2\0";
pub const LN_mdc2WithRSA: &'static [u8; 12usize] = b"mdc2WithRSA\0";
pub const NID_mdc2WithRSA: i32 = 96;
pub const SN_rc4_40: &'static [u8; 7usize] = b"RC4-40\0";
pub const LN_rc4_40: &'static [u8; 7usize] = b"rc4-40\0";
pub const NID_rc4_40: i32 = 97;
pub const SN_rc2_40_cbc: &'static [u8; 11usize] = b"RC2-40-CBC\0";
pub const LN_rc2_40_cbc: &'static [u8; 11usize] = b"rc2-40-cbc\0";
pub const NID_rc2_40_cbc: i32 = 98;
pub const SN_givenName: &'static [u8; 3usize] = b"GN\0";
pub const LN_givenName: &'static [u8; 10usize] = b"givenName\0";
pub const NID_givenName: i32 = 99;
pub const SN_surname: &'static [u8; 3usize] = b"SN\0";
pub const LN_surname: &'static [u8; 8usize] = b"surname\0";
pub const NID_surname: i32 = 100;
pub const SN_initials: &'static [u8; 9usize] = b"initials\0";
pub const LN_initials: &'static [u8; 9usize] = b"initials\0";
pub const NID_initials: i32 = 101;
pub const SN_crl_distribution_points: &'static [u8; 22usize] = b"crlDistributionPoints\0";
pub const LN_crl_distribution_points: &'static [u8; 31usize] = b"X509v3 CRL Distribution Points\0";
pub const NID_crl_distribution_points: i32 = 103;
pub const SN_md5WithRSA: &'static [u8; 11usize] = b"RSA-NP-MD5\0";
pub const LN_md5WithRSA: &'static [u8; 11usize] = b"md5WithRSA\0";
pub const NID_md5WithRSA: i32 = 104;
pub const LN_serialNumber: &'static [u8; 13usize] = b"serialNumber\0";
pub const NID_serialNumber: i32 = 105;
pub const SN_title: &'static [u8; 6usize] = b"title\0";
pub const LN_title: &'static [u8; 6usize] = b"title\0";
pub const NID_title: i32 = 106;
pub const LN_description: &'static [u8; 12usize] = b"description\0";
pub const NID_description: i32 = 107;
pub const SN_cast5_cbc: &'static [u8; 10usize] = b"CAST5-CBC\0";
pub const LN_cast5_cbc: &'static [u8; 10usize] = b"cast5-cbc\0";
pub const NID_cast5_cbc: i32 = 108;
pub const SN_cast5_ecb: &'static [u8; 10usize] = b"CAST5-ECB\0";
pub const LN_cast5_ecb: &'static [u8; 10usize] = b"cast5-ecb\0";
pub const NID_cast5_ecb: i32 = 109;
pub const SN_cast5_cfb64: &'static [u8; 10usize] = b"CAST5-CFB\0";
pub const LN_cast5_cfb64: &'static [u8; 10usize] = b"cast5-cfb\0";
pub const NID_cast5_cfb64: i32 = 110;
pub const SN_cast5_ofb64: &'static [u8; 10usize] = b"CAST5-OFB\0";
pub const LN_cast5_ofb64: &'static [u8; 10usize] = b"cast5-ofb\0";
pub const NID_cast5_ofb64: i32 = 111;
pub const LN_pbeWithMD5AndCast5_CBC: &'static [u8; 22usize] = b"pbeWithMD5AndCast5CBC\0";
pub const NID_pbeWithMD5AndCast5_CBC: i32 = 112;
pub const SN_dsaWithSHA1: &'static [u8; 9usize] = b"DSA-SHA1\0";
pub const LN_dsaWithSHA1: &'static [u8; 12usize] = b"dsaWithSHA1\0";
pub const NID_dsaWithSHA1: i32 = 113;
pub const SN_md5_sha1: &'static [u8; 9usize] = b"MD5-SHA1\0";
pub const LN_md5_sha1: &'static [u8; 9usize] = b"md5-sha1\0";
pub const NID_md5_sha1: i32 = 114;
pub const SN_sha1WithRSA: &'static [u8; 11usize] = b"RSA-SHA1-2\0";
pub const LN_sha1WithRSA: &'static [u8; 12usize] = b"sha1WithRSA\0";
pub const NID_sha1WithRSA: i32 = 115;
pub const SN_dsa: &'static [u8; 4usize] = b"DSA\0";
pub const LN_dsa: &'static [u8; 14usize] = b"dsaEncryption\0";
pub const NID_dsa: i32 = 116;
pub const SN_ripemd160: &'static [u8; 10usize] = b"RIPEMD160\0";
pub const LN_ripemd160: &'static [u8; 10usize] = b"ripemd160\0";
pub const NID_ripemd160: i32 = 117;
pub const SN_ripemd160WithRSA: &'static [u8; 14usize] = b"RSA-RIPEMD160\0";
pub const LN_ripemd160WithRSA: &'static [u8; 17usize] = b"ripemd160WithRSA\0";
pub const NID_ripemd160WithRSA: i32 = 119;
pub const SN_rc5_cbc: &'static [u8; 8usize] = b"RC5-CBC\0";
pub const LN_rc5_cbc: &'static [u8; 8usize] = b"rc5-cbc\0";
pub const NID_rc5_cbc: i32 = 120;
pub const SN_rc5_ecb: &'static [u8; 8usize] = b"RC5-ECB\0";
pub const LN_rc5_ecb: &'static [u8; 8usize] = b"rc5-ecb\0";
pub const NID_rc5_ecb: i32 = 121;
pub const SN_rc5_cfb64: &'static [u8; 8usize] = b"RC5-CFB\0";
pub const LN_rc5_cfb64: &'static [u8; 8usize] = b"rc5-cfb\0";
pub const NID_rc5_cfb64: i32 = 122;
pub const SN_rc5_ofb64: &'static [u8; 8usize] = b"RC5-OFB\0";
pub const LN_rc5_ofb64: &'static [u8; 8usize] = b"rc5-ofb\0";
pub const NID_rc5_ofb64: i32 = 123;
pub const SN_zlib_compression: &'static [u8; 5usize] = b"ZLIB\0";
pub const LN_zlib_compression: &'static [u8; 17usize] = b"zlib compression\0";
pub const NID_zlib_compression: i32 = 125;
pub const SN_ext_key_usage: &'static [u8; 17usize] = b"extendedKeyUsage\0";
pub const LN_ext_key_usage: &'static [u8; 26usize] = b"X509v3 Extended Key Usage\0";
pub const NID_ext_key_usage: i32 = 126;
pub const SN_id_pkix: &'static [u8; 5usize] = b"PKIX\0";
pub const NID_id_pkix: i32 = 127;
pub const SN_id_kp: &'static [u8; 6usize] = b"id-kp\0";
pub const NID_id_kp: i32 = 128;
pub const SN_server_auth: &'static [u8; 11usize] = b"serverAuth\0";
pub const LN_server_auth: &'static [u8; 30usize] = b"TLS Web Server Authentication\0";
pub const NID_server_auth: i32 = 129;
pub const SN_client_auth: &'static [u8; 11usize] = b"clientAuth\0";
pub const LN_client_auth: &'static [u8; 30usize] = b"TLS Web Client Authentication\0";
pub const NID_client_auth: i32 = 130;
pub const SN_code_sign: &'static [u8; 12usize] = b"codeSigning\0";
pub const LN_code_sign: &'static [u8; 13usize] = b"Code Signing\0";
pub const NID_code_sign: i32 = 131;
pub const SN_email_protect: &'static [u8; 16usize] = b"emailProtection\0";
pub const LN_email_protect: &'static [u8; 18usize] = b"E-mail Protection\0";
pub const NID_email_protect: i32 = 132;
pub const SN_time_stamp: &'static [u8; 13usize] = b"timeStamping\0";
pub const LN_time_stamp: &'static [u8; 14usize] = b"Time Stamping\0";
pub const NID_time_stamp: i32 = 133;
pub const SN_ms_code_ind: &'static [u8; 10usize] = b"msCodeInd\0";
pub const LN_ms_code_ind: &'static [u8; 34usize] = b"Microsoft Individual Code Signing\0";
pub const NID_ms_code_ind: i32 = 134;
pub const SN_ms_code_com: &'static [u8; 10usize] = b"msCodeCom\0";
pub const LN_ms_code_com: &'static [u8; 34usize] = b"Microsoft Commercial Code Signing\0";
pub const NID_ms_code_com: i32 = 135;
pub const SN_ms_ctl_sign: &'static [u8; 10usize] = b"msCTLSign\0";
pub const LN_ms_ctl_sign: &'static [u8; 29usize] = b"Microsoft Trust List Signing\0";
pub const NID_ms_ctl_sign: i32 = 136;
pub const SN_ms_sgc: &'static [u8; 6usize] = b"msSGC\0";
pub const LN_ms_sgc: &'static [u8; 30usize] = b"Microsoft Server Gated Crypto\0";
pub const NID_ms_sgc: i32 = 137;
pub const SN_ms_efs: &'static [u8; 6usize] = b"msEFS\0";
pub const LN_ms_efs: &'static [u8; 32usize] = b"Microsoft Encrypted File System\0";
pub const NID_ms_efs: i32 = 138;
pub const SN_ns_sgc: &'static [u8; 6usize] = b"nsSGC\0";
pub const LN_ns_sgc: &'static [u8; 29usize] = b"Netscape Server Gated Crypto\0";
pub const NID_ns_sgc: i32 = 139;
pub const SN_delta_crl: &'static [u8; 9usize] = b"deltaCRL\0";
pub const LN_delta_crl: &'static [u8; 27usize] = b"X509v3 Delta CRL Indicator\0";
pub const NID_delta_crl: i32 = 140;
pub const SN_crl_reason: &'static [u8; 10usize] = b"CRLReason\0";
pub const LN_crl_reason: &'static [u8; 23usize] = b"X509v3 CRL Reason Code\0";
pub const NID_crl_reason: i32 = 141;
pub const SN_invalidity_date: &'static [u8; 15usize] = b"invalidityDate\0";
pub const LN_invalidity_date: &'static [u8; 16usize] = b"Invalidity Date\0";
pub const NID_invalidity_date: i32 = 142;
pub const SN_sxnet: &'static [u8; 8usize] = b"SXNetID\0";
pub const LN_sxnet: &'static [u8; 19usize] = b"Strong Extranet ID\0";
pub const NID_sxnet: i32 = 143;
pub const SN_pbe_WithSHA1And128BitRC4: &'static [u8; 17usize] = b"PBE-SHA1-RC4-128\0";
pub const LN_pbe_WithSHA1And128BitRC4: &'static [u8; 24usize] = b"pbeWithSHA1And128BitRC4\0";
pub const NID_pbe_WithSHA1And128BitRC4: i32 = 144;
pub const SN_pbe_WithSHA1And40BitRC4: &'static [u8; 16usize] = b"PBE-SHA1-RC4-40\0";
pub const LN_pbe_WithSHA1And40BitRC4: &'static [u8; 23usize] = b"pbeWithSHA1And40BitRC4\0";
pub const NID_pbe_WithSHA1And40BitRC4: i32 = 145;
pub const SN_pbe_WithSHA1And3_Key_TripleDES_CBC: &'static [u8; 14usize] = b"PBE-SHA1-3DES\0";
pub const LN_pbe_WithSHA1And3_Key_TripleDES_CBC: &'static [u8; 33usize] =
    b"pbeWithSHA1And3-KeyTripleDES-CBC\0";
pub const NID_pbe_WithSHA1And3_Key_TripleDES_CBC: i32 = 146;
pub const SN_pbe_WithSHA1And2_Key_TripleDES_CBC: &'static [u8; 14usize] = b"PBE-SHA1-2DES\0";
pub const LN_pbe_WithSHA1And2_Key_TripleDES_CBC: &'static [u8; 33usize] =
    b"pbeWithSHA1And2-KeyTripleDES-CBC\0";
pub const NID_pbe_WithSHA1And2_Key_TripleDES_CBC: i32 = 147;
pub const SN_pbe_WithSHA1And128BitRC2_CBC: &'static [u8; 17usize] = b"PBE-SHA1-RC2-128\0";
pub const LN_pbe_WithSHA1And128BitRC2_CBC: &'static [u8; 28usize] =
    b"pbeWithSHA1And128BitRC2-CBC\0";
pub const NID_pbe_WithSHA1And128BitRC2_CBC: i32 = 148;
pub const SN_pbe_WithSHA1And40BitRC2_CBC: &'static [u8; 16usize] = b"PBE-SHA1-RC2-40\0";
pub const LN_pbe_WithSHA1And40BitRC2_CBC: &'static [u8; 27usize] = b"pbeWithSHA1And40BitRC2-CBC\0";
pub const NID_pbe_WithSHA1And40BitRC2_CBC: i32 = 149;
pub const LN_keyBag: &'static [u8; 7usize] = b"keyBag\0";
pub const NID_keyBag: i32 = 150;
pub const LN_pkcs8ShroudedKeyBag: &'static [u8; 20usize] = b"pkcs8ShroudedKeyBag\0";
pub const NID_pkcs8ShroudedKeyBag: i32 = 151;
pub const LN_certBag: &'static [u8; 8usize] = b"certBag\0";
pub const NID_certBag: i32 = 152;
pub const LN_crlBag: &'static [u8; 7usize] = b"crlBag\0";
pub const NID_crlBag: i32 = 153;
pub const LN_secretBag: &'static [u8; 10usize] = b"secretBag\0";
pub const NID_secretBag: i32 = 154;
pub const LN_safeContentsBag: &'static [u8; 16usize] = b"safeContentsBag\0";
pub const NID_safeContentsBag: i32 = 155;
pub const LN_friendlyName: &'static [u8; 13usize] = b"friendlyName\0";
pub const NID_friendlyName: i32 = 156;
pub const LN_localKeyID: &'static [u8; 11usize] = b"localKeyID\0";
pub const NID_localKeyID: i32 = 157;
pub const LN_x509Certificate: &'static [u8; 16usize] = b"x509Certificate\0";
pub const NID_x509Certificate: i32 = 158;
pub const LN_sdsiCertificate: &'static [u8; 16usize] = b"sdsiCertificate\0";
pub const NID_sdsiCertificate: i32 = 159;
pub const LN_x509Crl: &'static [u8; 8usize] = b"x509Crl\0";
pub const NID_x509Crl: i32 = 160;
pub const LN_pbes2: &'static [u8; 6usize] = b"PBES2\0";
pub const NID_pbes2: i32 = 161;
pub const LN_pbmac1: &'static [u8; 7usize] = b"PBMAC1\0";
pub const NID_pbmac1: i32 = 162;
pub const LN_hmacWithSHA1: &'static [u8; 13usize] = b"hmacWithSHA1\0";
pub const NID_hmacWithSHA1: i32 = 163;
pub const SN_id_qt_cps: &'static [u8; 10usize] = b"id-qt-cps\0";
pub const LN_id_qt_cps: &'static [u8; 21usize] = b"Policy Qualifier CPS\0";
pub const NID_id_qt_cps: i32 = 164;
pub const SN_id_qt_unotice: &'static [u8; 14usize] = b"id-qt-unotice\0";
pub const LN_id_qt_unotice: &'static [u8; 29usize] = b"Policy Qualifier User Notice\0";
pub const NID_id_qt_unotice: i32 = 165;
pub const SN_rc2_64_cbc: &'static [u8; 11usize] = b"RC2-64-CBC\0";
pub const LN_rc2_64_cbc: &'static [u8; 11usize] = b"rc2-64-cbc\0";
pub const NID_rc2_64_cbc: i32 = 166;
pub const SN_SMIMECapabilities: &'static [u8; 11usize] = b"SMIME-CAPS\0";
pub const LN_SMIMECapabilities: &'static [u8; 20usize] = b"S/MIME Capabilities\0";
pub const NID_SMIMECapabilities: i32 = 167;
pub const SN_pbeWithMD2AndRC2_CBC: &'static [u8; 15usize] = b"PBE-MD2-RC2-64\0";
pub const LN_pbeWithMD2AndRC2_CBC: &'static [u8; 21usize] = b"pbeWithMD2AndRC2-CBC\0";
pub const NID_pbeWithMD2AndRC2_CBC: i32 = 168;
pub const SN_pbeWithMD5AndRC2_CBC: &'static [u8; 15usize] = b"PBE-MD5-RC2-64\0";
pub const LN_pbeWithMD5AndRC2_CBC: &'static [u8; 21usize] = b"pbeWithMD5AndRC2-CBC\0";
pub const NID_pbeWithMD5AndRC2_CBC: i32 = 169;
pub const SN_pbeWithSHA1AndDES_CBC: &'static [u8; 13usize] = b"PBE-SHA1-DES\0";
pub const LN_pbeWithSHA1AndDES_CBC: &'static [u8; 22usize] = b"pbeWithSHA1AndDES-CBC\0";
pub const NID_pbeWithSHA1AndDES_CBC: i32 = 170;
pub const SN_ms_ext_req: &'static [u8; 9usize] = b"msExtReq\0";
pub const LN_ms_ext_req: &'static [u8; 28usize] = b"Microsoft Extension Request\0";
pub const NID_ms_ext_req: i32 = 171;
pub const SN_ext_req: &'static [u8; 7usize] = b"extReq\0";
pub const LN_ext_req: &'static [u8; 18usize] = b"Extension Request\0";
pub const NID_ext_req: i32 = 172;
pub const SN_name: &'static [u8; 5usize] = b"name\0";
pub const LN_name: &'static [u8; 5usize] = b"name\0";
pub const NID_name: i32 = 173;
pub const SN_dnQualifier: &'static [u8; 12usize] = b"dnQualifier\0";
pub const LN_dnQualifier: &'static [u8; 12usize] = b"dnQualifier\0";
pub const NID_dnQualifier: i32 = 174;
pub const SN_id_pe: &'static [u8; 6usize] = b"id-pe\0";
pub const NID_id_pe: i32 = 175;
pub const SN_id_ad: &'static [u8; 6usize] = b"id-ad\0";
pub const NID_id_ad: i32 = 176;
pub const SN_info_access: &'static [u8; 20usize] = b"authorityInfoAccess\0";
pub const LN_info_access: &'static [u8; 29usize] = b"Authority Information Access\0";
pub const NID_info_access: i32 = 177;
pub const SN_ad_OCSP: &'static [u8; 5usize] = b"OCSP\0";
pub const LN_ad_OCSP: &'static [u8; 5usize] = b"OCSP\0";
pub const NID_ad_OCSP: i32 = 178;
pub const SN_ad_ca_issuers: &'static [u8; 10usize] = b"caIssuers\0";
pub const LN_ad_ca_issuers: &'static [u8; 11usize] = b"CA Issuers\0";
pub const NID_ad_ca_issuers: i32 = 179;
pub const SN_OCSP_sign: &'static [u8; 12usize] = b"OCSPSigning\0";
pub const LN_OCSP_sign: &'static [u8; 13usize] = b"OCSP Signing\0";
pub const NID_OCSP_sign: i32 = 180;
pub const SN_iso: &'static [u8; 4usize] = b"ISO\0";
pub const LN_iso: &'static [u8; 4usize] = b"iso\0";
pub const NID_iso: i32 = 181;
pub const OBJ_iso: i32 = 1;
pub const SN_member_body: &'static [u8; 12usize] = b"member-body\0";
pub const LN_member_body: &'static [u8; 16usize] = b"ISO Member Body\0";
pub const NID_member_body: i32 = 182;
pub const SN_ISO_US: &'static [u8; 7usize] = b"ISO-US\0";
pub const LN_ISO_US: &'static [u8; 19usize] = b"ISO US Member Body\0";
pub const NID_ISO_US: i32 = 183;
pub const SN_X9_57: &'static [u8; 6usize] = b"X9-57\0";
pub const LN_X9_57: &'static [u8; 6usize] = b"X9.57\0";
pub const NID_X9_57: i32 = 184;
pub const SN_X9cm: &'static [u8; 5usize] = b"X9cm\0";
pub const LN_X9cm: &'static [u8; 11usize] = b"X9.57 CM ?\0";
pub const NID_X9cm: i32 = 185;
pub const SN_pkcs1: &'static [u8; 6usize] = b"pkcs1\0";
pub const NID_pkcs1: i32 = 186;
pub const SN_pkcs5: &'static [u8; 6usize] = b"pkcs5\0";
pub const NID_pkcs5: i32 = 187;
pub const SN_SMIME: &'static [u8; 6usize] = b"SMIME\0";
pub const LN_SMIME: &'static [u8; 7usize] = b"S/MIME\0";
pub const NID_SMIME: i32 = 188;
pub const SN_id_smime_mod: &'static [u8; 13usize] = b"id-smime-mod\0";
pub const NID_id_smime_mod: i32 = 189;
pub const SN_id_smime_ct: &'static [u8; 12usize] = b"id-smime-ct\0";
pub const NID_id_smime_ct: i32 = 190;
pub const SN_id_smime_aa: &'static [u8; 12usize] = b"id-smime-aa\0";
pub const NID_id_smime_aa: i32 = 191;
pub const SN_id_smime_alg: &'static [u8; 13usize] = b"id-smime-alg\0";
pub const NID_id_smime_alg: i32 = 192;
pub const SN_id_smime_cd: &'static [u8; 12usize] = b"id-smime-cd\0";
pub const NID_id_smime_cd: i32 = 193;
pub const SN_id_smime_spq: &'static [u8; 13usize] = b"id-smime-spq\0";
pub const NID_id_smime_spq: i32 = 194;
pub const SN_id_smime_cti: &'static [u8; 13usize] = b"id-smime-cti\0";
pub const NID_id_smime_cti: i32 = 195;
pub const SN_id_smime_mod_cms: &'static [u8; 17usize] = b"id-smime-mod-cms\0";
pub const NID_id_smime_mod_cms: i32 = 196;
pub const SN_id_smime_mod_ess: &'static [u8; 17usize] = b"id-smime-mod-ess\0";
pub const NID_id_smime_mod_ess: i32 = 197;
pub const SN_id_smime_mod_oid: &'static [u8; 17usize] = b"id-smime-mod-oid\0";
pub const NID_id_smime_mod_oid: i32 = 198;
pub const SN_id_smime_mod_msg_v3: &'static [u8; 20usize] = b"id-smime-mod-msg-v3\0";
pub const NID_id_smime_mod_msg_v3: i32 = 199;
pub const SN_id_smime_mod_ets_eSignature_88: &'static [u8; 31usize] =
    b"id-smime-mod-ets-eSignature-88\0";
pub const NID_id_smime_mod_ets_eSignature_88: i32 = 200;
pub const SN_id_smime_mod_ets_eSignature_97: &'static [u8; 31usize] =
    b"id-smime-mod-ets-eSignature-97\0";
pub const NID_id_smime_mod_ets_eSignature_97: i32 = 201;
pub const SN_id_smime_mod_ets_eSigPolicy_88: &'static [u8; 31usize] =
    b"id-smime-mod-ets-eSigPolicy-88\0";
pub const NID_id_smime_mod_ets_eSigPolicy_88: i32 = 202;
pub const SN_id_smime_mod_ets_eSigPolicy_97: &'static [u8; 31usize] =
    b"id-smime-mod-ets-eSigPolicy-97\0";
pub const NID_id_smime_mod_ets_eSigPolicy_97: i32 = 203;
pub const SN_id_smime_ct_receipt: &'static [u8; 20usize] = b"id-smime-ct-receipt\0";
pub const NID_id_smime_ct_receipt: i32 = 204;
pub const SN_id_smime_ct_authData: &'static [u8; 21usize] = b"id-smime-ct-authData\0";
pub const NID_id_smime_ct_authData: i32 = 205;
pub const SN_id_smime_ct_publishCert: &'static [u8; 24usize] = b"id-smime-ct-publishCert\0";
pub const NID_id_smime_ct_publishCert: i32 = 206;
pub const SN_id_smime_ct_TSTInfo: &'static [u8; 20usize] = b"id-smime-ct-TSTInfo\0";
pub const NID_id_smime_ct_TSTInfo: i32 = 207;
pub const SN_id_smime_ct_TDTInfo: &'static [u8; 20usize] = b"id-smime-ct-TDTInfo\0";
pub const NID_id_smime_ct_TDTInfo: i32 = 208;
pub const SN_id_smime_ct_contentInfo: &'static [u8; 24usize] = b"id-smime-ct-contentInfo\0";
pub const NID_id_smime_ct_contentInfo: i32 = 209;
pub const SN_id_smime_ct_DVCSRequestData: &'static [u8; 28usize] = b"id-smime-ct-DVCSRequestData\0";
pub const NID_id_smime_ct_DVCSRequestData: i32 = 210;
pub const SN_id_smime_ct_DVCSResponseData: &'static [u8; 29usize] =
    b"id-smime-ct-DVCSResponseData\0";
pub const NID_id_smime_ct_DVCSResponseData: i32 = 211;
pub const SN_id_smime_aa_receiptRequest: &'static [u8; 27usize] = b"id-smime-aa-receiptRequest\0";
pub const NID_id_smime_aa_receiptRequest: i32 = 212;
pub const SN_id_smime_aa_securityLabel: &'static [u8; 26usize] = b"id-smime-aa-securityLabel\0";
pub const NID_id_smime_aa_securityLabel: i32 = 213;
pub const SN_id_smime_aa_mlExpandHistory: &'static [u8; 28usize] = b"id-smime-aa-mlExpandHistory\0";
pub const NID_id_smime_aa_mlExpandHistory: i32 = 214;
pub const SN_id_smime_aa_contentHint: &'static [u8; 24usize] = b"id-smime-aa-contentHint\0";
pub const NID_id_smime_aa_contentHint: i32 = 215;
pub const SN_id_smime_aa_msgSigDigest: &'static [u8; 25usize] = b"id-smime-aa-msgSigDigest\0";
pub const NID_id_smime_aa_msgSigDigest: i32 = 216;
pub const SN_id_smime_aa_encapContentType: &'static [u8; 29usize] =
    b"id-smime-aa-encapContentType\0";
pub const NID_id_smime_aa_encapContentType: i32 = 217;
pub const SN_id_smime_aa_contentIdentifier: &'static [u8; 30usize] =
    b"id-smime-aa-contentIdentifier\0";
pub const NID_id_smime_aa_contentIdentifier: i32 = 218;
pub const SN_id_smime_aa_macValue: &'static [u8; 21usize] = b"id-smime-aa-macValue\0";
pub const NID_id_smime_aa_macValue: i32 = 219;
pub const SN_id_smime_aa_equivalentLabels: &'static [u8; 29usize] =
    b"id-smime-aa-equivalentLabels\0";
pub const NID_id_smime_aa_equivalentLabels: i32 = 220;
pub const SN_id_smime_aa_contentReference: &'static [u8; 29usize] =
    b"id-smime-aa-contentReference\0";
pub const NID_id_smime_aa_contentReference: i32 = 221;
pub const SN_id_smime_aa_encrypKeyPref: &'static [u8; 26usize] = b"id-smime-aa-encrypKeyPref\0";
pub const NID_id_smime_aa_encrypKeyPref: i32 = 222;
pub const SN_id_smime_aa_signingCertificate: &'static [u8; 31usize] =
    b"id-smime-aa-signingCertificate\0";
pub const NID_id_smime_aa_signingCertificate: i32 = 223;
pub const SN_id_smime_aa_smimeEncryptCerts: &'static [u8; 30usize] =
    b"id-smime-aa-smimeEncryptCerts\0";
pub const NID_id_smime_aa_smimeEncryptCerts: i32 = 224;
pub const SN_id_smime_aa_timeStampToken: &'static [u8; 27usize] = b"id-smime-aa-timeStampToken\0";
pub const NID_id_smime_aa_timeStampToken: i32 = 225;
pub const SN_id_smime_aa_ets_sigPolicyId: &'static [u8; 28usize] = b"id-smime-aa-ets-sigPolicyId\0";
pub const NID_id_smime_aa_ets_sigPolicyId: i32 = 226;
pub const SN_id_smime_aa_ets_commitmentType: &'static [u8; 31usize] =
    b"id-smime-aa-ets-commitmentType\0";
pub const NID_id_smime_aa_ets_commitmentType: i32 = 227;
pub const SN_id_smime_aa_ets_signerLocation: &'static [u8; 31usize] =
    b"id-smime-aa-ets-signerLocation\0";
pub const NID_id_smime_aa_ets_signerLocation: i32 = 228;
pub const SN_id_smime_aa_ets_signerAttr: &'static [u8; 27usize] = b"id-smime-aa-ets-signerAttr\0";
pub const NID_id_smime_aa_ets_signerAttr: i32 = 229;
pub const SN_id_smime_aa_ets_otherSigCert: &'static [u8; 29usize] =
    b"id-smime-aa-ets-otherSigCert\0";
pub const NID_id_smime_aa_ets_otherSigCert: i32 = 230;
pub const SN_id_smime_aa_ets_contentTimestamp: &'static [u8; 33usize] =
    b"id-smime-aa-ets-contentTimestamp\0";
pub const NID_id_smime_aa_ets_contentTimestamp: i32 = 231;
pub const SN_id_smime_aa_ets_CertificateRefs: &'static [u8; 32usize] =
    b"id-smime-aa-ets-CertificateRefs\0";
pub const NID_id_smime_aa_ets_CertificateRefs: i32 = 232;
pub const SN_id_smime_aa_ets_RevocationRefs: &'static [u8; 31usize] =
    b"id-smime-aa-ets-RevocationRefs\0";
pub const NID_id_smime_aa_ets_RevocationRefs: i32 = 233;
pub const SN_id_smime_aa_ets_certValues: &'static [u8; 27usize] = b"id-smime-aa-ets-certValues\0";
pub const NID_id_smime_aa_ets_certValues: i32 = 234;
pub const SN_id_smime_aa_ets_revocationValues: &'static [u8; 33usize] =
    b"id-smime-aa-ets-revocationValues\0";
pub const NID_id_smime_aa_ets_revocationValues: i32 = 235;
pub const SN_id_smime_aa_ets_escTimeStamp: &'static [u8; 29usize] =
    b"id-smime-aa-ets-escTimeStamp\0";
pub const NID_id_smime_aa_ets_escTimeStamp: i32 = 236;
pub const SN_id_smime_aa_ets_certCRLTimestamp: &'static [u8; 33usize] =
    b"id-smime-aa-ets-certCRLTimestamp\0";
pub const NID_id_smime_aa_ets_certCRLTimestamp: i32 = 237;
pub const SN_id_smime_aa_ets_archiveTimeStamp: &'static [u8; 33usize] =
    b"id-smime-aa-ets-archiveTimeStamp\0";
pub const NID_id_smime_aa_ets_archiveTimeStamp: i32 = 238;
pub const SN_id_smime_aa_signatureType: &'static [u8; 26usize] = b"id-smime-aa-signatureType\0";
pub const NID_id_smime_aa_signatureType: i32 = 239;
pub const SN_id_smime_aa_dvcs_dvc: &'static [u8; 21usize] = b"id-smime-aa-dvcs-dvc\0";
pub const NID_id_smime_aa_dvcs_dvc: i32 = 240;
pub const SN_id_smime_alg_ESDHwith3DES: &'static [u8; 26usize] = b"id-smime-alg-ESDHwith3DES\0";
pub const NID_id_smime_alg_ESDHwith3DES: i32 = 241;
pub const SN_id_smime_alg_ESDHwithRC2: &'static [u8; 25usize] = b"id-smime-alg-ESDHwithRC2\0";
pub const NID_id_smime_alg_ESDHwithRC2: i32 = 242;
pub const SN_id_smime_alg_3DESwrap: &'static [u8; 22usize] = b"id-smime-alg-3DESwrap\0";
pub const NID_id_smime_alg_3DESwrap: i32 = 243;
pub const SN_id_smime_alg_RC2wrap: &'static [u8; 21usize] = b"id-smime-alg-RC2wrap\0";
pub const NID_id_smime_alg_RC2wrap: i32 = 244;
pub const SN_id_smime_alg_ESDH: &'static [u8; 18usize] = b"id-smime-alg-ESDH\0";
pub const NID_id_smime_alg_ESDH: i32 = 245;
pub const SN_id_smime_alg_CMS3DESwrap: &'static [u8; 25usize] = b"id-smime-alg-CMS3DESwrap\0";
pub const NID_id_smime_alg_CMS3DESwrap: i32 = 246;
pub const SN_id_smime_alg_CMSRC2wrap: &'static [u8; 24usize] = b"id-smime-alg-CMSRC2wrap\0";
pub const NID_id_smime_alg_CMSRC2wrap: i32 = 247;
pub const SN_id_smime_cd_ldap: &'static [u8; 17usize] = b"id-smime-cd-ldap\0";
pub const NID_id_smime_cd_ldap: i32 = 248;
pub const SN_id_smime_spq_ets_sqt_uri: &'static [u8; 25usize] = b"id-smime-spq-ets-sqt-uri\0";
pub const NID_id_smime_spq_ets_sqt_uri: i32 = 249;
pub const SN_id_smime_spq_ets_sqt_unotice: &'static [u8; 29usize] =
    b"id-smime-spq-ets-sqt-unotice\0";
pub const NID_id_smime_spq_ets_sqt_unotice: i32 = 250;
pub const SN_id_smime_cti_ets_proofOfOrigin: &'static [u8; 31usize] =
    b"id-smime-cti-ets-proofOfOrigin\0";
pub const NID_id_smime_cti_ets_proofOfOrigin: i32 = 251;
pub const SN_id_smime_cti_ets_proofOfReceipt: &'static [u8; 32usize] =
    b"id-smime-cti-ets-proofOfReceipt\0";
pub const NID_id_smime_cti_ets_proofOfReceipt: i32 = 252;
pub const SN_id_smime_cti_ets_proofOfDelivery: &'static [u8; 33usize] =
    b"id-smime-cti-ets-proofOfDelivery\0";
pub const NID_id_smime_cti_ets_proofOfDelivery: i32 = 253;
pub const SN_id_smime_cti_ets_proofOfSender: &'static [u8; 31usize] =
    b"id-smime-cti-ets-proofOfSender\0";
pub const NID_id_smime_cti_ets_proofOfSender: i32 = 254;
pub const SN_id_smime_cti_ets_proofOfApproval: &'static [u8; 33usize] =
    b"id-smime-cti-ets-proofOfApproval\0";
pub const NID_id_smime_cti_ets_proofOfApproval: i32 = 255;
pub const SN_id_smime_cti_ets_proofOfCreation: &'static [u8; 33usize] =
    b"id-smime-cti-ets-proofOfCreation\0";
pub const NID_id_smime_cti_ets_proofOfCreation: i32 = 256;
pub const SN_md4: &'static [u8; 4usize] = b"MD4\0";
pub const LN_md4: &'static [u8; 4usize] = b"md4\0";
pub const NID_md4: i32 = 257;
pub const SN_id_pkix_mod: &'static [u8; 12usize] = b"id-pkix-mod\0";
pub const NID_id_pkix_mod: i32 = 258;
pub const SN_id_qt: &'static [u8; 6usize] = b"id-qt\0";
pub const NID_id_qt: i32 = 259;
pub const SN_id_it: &'static [u8; 6usize] = b"id-it\0";
pub const NID_id_it: i32 = 260;
pub const SN_id_pkip: &'static [u8; 8usize] = b"id-pkip\0";
pub const NID_id_pkip: i32 = 261;
pub const SN_id_alg: &'static [u8; 7usize] = b"id-alg\0";
pub const NID_id_alg: i32 = 262;
pub const SN_id_cmc: &'static [u8; 7usize] = b"id-cmc\0";
pub const NID_id_cmc: i32 = 263;
pub const SN_id_on: &'static [u8; 6usize] = b"id-on\0";
pub const NID_id_on: i32 = 264;
pub const SN_id_pda: &'static [u8; 7usize] = b"id-pda\0";
pub const NID_id_pda: i32 = 265;
pub const SN_id_aca: &'static [u8; 7usize] = b"id-aca\0";
pub const NID_id_aca: i32 = 266;
pub const SN_id_qcs: &'static [u8; 7usize] = b"id-qcs\0";
pub const NID_id_qcs: i32 = 267;
pub const SN_id_cct: &'static [u8; 7usize] = b"id-cct\0";
pub const NID_id_cct: i32 = 268;
pub const SN_id_pkix1_explicit_88: &'static [u8; 21usize] = b"id-pkix1-explicit-88\0";
pub const NID_id_pkix1_explicit_88: i32 = 269;
pub const SN_id_pkix1_implicit_88: &'static [u8; 21usize] = b"id-pkix1-implicit-88\0";
pub const NID_id_pkix1_implicit_88: i32 = 270;
pub const SN_id_pkix1_explicit_93: &'static [u8; 21usize] = b"id-pkix1-explicit-93\0";
pub const NID_id_pkix1_explicit_93: i32 = 271;
pub const SN_id_pkix1_implicit_93: &'static [u8; 21usize] = b"id-pkix1-implicit-93\0";
pub const NID_id_pkix1_implicit_93: i32 = 272;
pub const SN_id_mod_crmf: &'static [u8; 12usize] = b"id-mod-crmf\0";
pub const NID_id_mod_crmf: i32 = 273;
pub const SN_id_mod_cmc: &'static [u8; 11usize] = b"id-mod-cmc\0";
pub const NID_id_mod_cmc: i32 = 274;
pub const SN_id_mod_kea_profile_88: &'static [u8; 22usize] = b"id-mod-kea-profile-88\0";
pub const NID_id_mod_kea_profile_88: i32 = 275;
pub const SN_id_mod_kea_profile_93: &'static [u8; 22usize] = b"id-mod-kea-profile-93\0";
pub const NID_id_mod_kea_profile_93: i32 = 276;
pub const SN_id_mod_cmp: &'static [u8; 11usize] = b"id-mod-cmp\0";
pub const NID_id_mod_cmp: i32 = 277;
pub const SN_id_mod_qualified_cert_88: &'static [u8; 25usize] = b"id-mod-qualified-cert-88\0";
pub const NID_id_mod_qualified_cert_88: i32 = 278;
pub const SN_id_mod_qualified_cert_93: &'static [u8; 25usize] = b"id-mod-qualified-cert-93\0";
pub const NID_id_mod_qualified_cert_93: i32 = 279;
pub const SN_id_mod_attribute_cert: &'static [u8; 22usize] = b"id-mod-attribute-cert\0";
pub const NID_id_mod_attribute_cert: i32 = 280;
pub const SN_id_mod_timestamp_protocol: &'static [u8; 26usize] = b"id-mod-timestamp-protocol\0";
pub const NID_id_mod_timestamp_protocol: i32 = 281;
pub const SN_id_mod_ocsp: &'static [u8; 12usize] = b"id-mod-ocsp\0";
pub const NID_id_mod_ocsp: i32 = 282;
pub const SN_id_mod_dvcs: &'static [u8; 12usize] = b"id-mod-dvcs\0";
pub const NID_id_mod_dvcs: i32 = 283;
pub const SN_id_mod_cmp2000: &'static [u8; 15usize] = b"id-mod-cmp2000\0";
pub const NID_id_mod_cmp2000: i32 = 284;
pub const SN_biometricInfo: &'static [u8; 14usize] = b"biometricInfo\0";
pub const LN_biometricInfo: &'static [u8; 15usize] = b"Biometric Info\0";
pub const NID_biometricInfo: i32 = 285;
pub const SN_qcStatements: &'static [u8; 13usize] = b"qcStatements\0";
pub const NID_qcStatements: i32 = 286;
pub const SN_ac_auditEntity: &'static [u8; 15usize] = b"ac-auditEntity\0";
pub const NID_ac_auditEntity: i32 = 287;
pub const SN_ac_targeting: &'static [u8; 13usize] = b"ac-targeting\0";
pub const NID_ac_targeting: i32 = 288;
pub const SN_aaControls: &'static [u8; 11usize] = b"aaControls\0";
pub const NID_aaControls: i32 = 289;
pub const SN_sbgp_ipAddrBlock: &'static [u8; 17usize] = b"sbgp-ipAddrBlock\0";
pub const NID_sbgp_ipAddrBlock: i32 = 290;
pub const SN_sbgp_autonomousSysNum: &'static [u8; 22usize] = b"sbgp-autonomousSysNum\0";
pub const NID_sbgp_autonomousSysNum: i32 = 291;
pub const SN_sbgp_routerIdentifier: &'static [u8; 22usize] = b"sbgp-routerIdentifier\0";
pub const NID_sbgp_routerIdentifier: i32 = 292;
pub const SN_textNotice: &'static [u8; 11usize] = b"textNotice\0";
pub const NID_textNotice: i32 = 293;
pub const SN_ipsecEndSystem: &'static [u8; 15usize] = b"ipsecEndSystem\0";
pub const LN_ipsecEndSystem: &'static [u8; 17usize] = b"IPSec End System\0";
pub const NID_ipsecEndSystem: i32 = 294;
pub const SN_ipsecTunnel: &'static [u8; 12usize] = b"ipsecTunnel\0";
pub const LN_ipsecTunnel: &'static [u8; 13usize] = b"IPSec Tunnel\0";
pub const NID_ipsecTunnel: i32 = 295;
pub const SN_ipsecUser: &'static [u8; 10usize] = b"ipsecUser\0";
pub const LN_ipsecUser: &'static [u8; 11usize] = b"IPSec User\0";
pub const NID_ipsecUser: i32 = 296;
pub const SN_dvcs: &'static [u8; 5usize] = b"DVCS\0";
pub const LN_dvcs: &'static [u8; 5usize] = b"dvcs\0";
pub const NID_dvcs: i32 = 297;
pub const SN_id_it_caProtEncCert: &'static [u8; 20usize] = b"id-it-caProtEncCert\0";
pub const NID_id_it_caProtEncCert: i32 = 298;
pub const SN_id_it_signKeyPairTypes: &'static [u8; 23usize] = b"id-it-signKeyPairTypes\0";
pub const NID_id_it_signKeyPairTypes: i32 = 299;
pub const SN_id_it_encKeyPairTypes: &'static [u8; 22usize] = b"id-it-encKeyPairTypes\0";
pub const NID_id_it_encKeyPairTypes: i32 = 300;
pub const SN_id_it_preferredSymmAlg: &'static [u8; 23usize] = b"id-it-preferredSymmAlg\0";
pub const NID_id_it_preferredSymmAlg: i32 = 301;
pub const SN_id_it_caKeyUpdateInfo: &'static [u8; 22usize] = b"id-it-caKeyUpdateInfo\0";
pub const NID_id_it_caKeyUpdateInfo: i32 = 302;
pub const SN_id_it_currentCRL: &'static [u8; 17usize] = b"id-it-currentCRL\0";
pub const NID_id_it_currentCRL: i32 = 303;
pub const SN_id_it_unsupportedOIDs: &'static [u8; 22usize] = b"id-it-unsupportedOIDs\0";
pub const NID_id_it_unsupportedOIDs: i32 = 304;
pub const SN_id_it_subscriptionRequest: &'static [u8; 26usize] = b"id-it-subscriptionRequest\0";
pub const NID_id_it_subscriptionRequest: i32 = 305;
pub const SN_id_it_subscriptionResponse: &'static [u8; 27usize] = b"id-it-subscriptionResponse\0";
pub const NID_id_it_subscriptionResponse: i32 = 306;
pub const SN_id_it_keyPairParamReq: &'static [u8; 22usize] = b"id-it-keyPairParamReq\0";
pub const NID_id_it_keyPairParamReq: i32 = 307;
pub const SN_id_it_keyPairParamRep: &'static [u8; 22usize] = b"id-it-keyPairParamRep\0";
pub const NID_id_it_keyPairParamRep: i32 = 308;
pub const SN_id_it_revPassphrase: &'static [u8; 20usize] = b"id-it-revPassphrase\0";
pub const NID_id_it_revPassphrase: i32 = 309;
pub const SN_id_it_implicitConfirm: &'static [u8; 22usize] = b"id-it-implicitConfirm\0";
pub const NID_id_it_implicitConfirm: i32 = 310;
pub const SN_id_it_confirmWaitTime: &'static [u8; 22usize] = b"id-it-confirmWaitTime\0";
pub const NID_id_it_confirmWaitTime: i32 = 311;
pub const SN_id_it_origPKIMessage: &'static [u8; 21usize] = b"id-it-origPKIMessage\0";
pub const NID_id_it_origPKIMessage: i32 = 312;
pub const SN_id_regCtrl: &'static [u8; 11usize] = b"id-regCtrl\0";
pub const NID_id_regCtrl: i32 = 313;
pub const SN_id_regInfo: &'static [u8; 11usize] = b"id-regInfo\0";
pub const NID_id_regInfo: i32 = 314;
pub const SN_id_regCtrl_regToken: &'static [u8; 20usize] = b"id-regCtrl-regToken\0";
pub const NID_id_regCtrl_regToken: i32 = 315;
pub const SN_id_regCtrl_authenticator: &'static [u8; 25usize] = b"id-regCtrl-authenticator\0";
pub const NID_id_regCtrl_authenticator: i32 = 316;
pub const SN_id_regCtrl_pkiPublicationInfo: &'static [u8; 30usize] =
    b"id-regCtrl-pkiPublicationInfo\0";
pub const NID_id_regCtrl_pkiPublicationInfo: i32 = 317;
pub const SN_id_regCtrl_pkiArchiveOptions: &'static [u8; 29usize] =
    b"id-regCtrl-pkiArchiveOptions\0";
pub const NID_id_regCtrl_pkiArchiveOptions: i32 = 318;
pub const SN_id_regCtrl_oldCertID: &'static [u8; 21usize] = b"id-regCtrl-oldCertID\0";
pub const NID_id_regCtrl_oldCertID: i32 = 319;
pub const SN_id_regCtrl_protocolEncrKey: &'static [u8; 27usize] = b"id-regCtrl-protocolEncrKey\0";
pub const NID_id_regCtrl_protocolEncrKey: i32 = 320;
pub const SN_id_regInfo_utf8Pairs: &'static [u8; 21usize] = b"id-regInfo-utf8Pairs\0";
pub const NID_id_regInfo_utf8Pairs: i32 = 321;
pub const SN_id_regInfo_certReq: &'static [u8; 19usize] = b"id-regInfo-certReq\0";
pub const NID_id_regInfo_certReq: i32 = 322;
pub const SN_id_alg_des40: &'static [u8; 13usize] = b"id-alg-des40\0";
pub const NID_id_alg_des40: i32 = 323;
pub const SN_id_alg_noSignature: &'static [u8; 19usize] = b"id-alg-noSignature\0";
pub const NID_id_alg_noSignature: i32 = 324;
pub const SN_id_alg_dh_sig_hmac_sha1: &'static [u8; 24usize] = b"id-alg-dh-sig-hmac-sha1\0";
pub const NID_id_alg_dh_sig_hmac_sha1: i32 = 325;
pub const SN_id_alg_dh_pop: &'static [u8; 14usize] = b"id-alg-dh-pop\0";
pub const NID_id_alg_dh_pop: i32 = 326;
pub const SN_id_cmc_statusInfo: &'static [u8; 18usize] = b"id-cmc-statusInfo\0";
pub const NID_id_cmc_statusInfo: i32 = 327;
pub const SN_id_cmc_identification: &'static [u8; 22usize] = b"id-cmc-identification\0";
pub const NID_id_cmc_identification: i32 = 328;
pub const SN_id_cmc_identityProof: &'static [u8; 21usize] = b"id-cmc-identityProof\0";
pub const NID_id_cmc_identityProof: i32 = 329;
pub const SN_id_cmc_dataReturn: &'static [u8; 18usize] = b"id-cmc-dataReturn\0";
pub const NID_id_cmc_dataReturn: i32 = 330;
pub const SN_id_cmc_transactionId: &'static [u8; 21usize] = b"id-cmc-transactionId\0";
pub const NID_id_cmc_transactionId: i32 = 331;
pub const SN_id_cmc_senderNonce: &'static [u8; 19usize] = b"id-cmc-senderNonce\0";
pub const NID_id_cmc_senderNonce: i32 = 332;
pub const SN_id_cmc_recipientNonce: &'static [u8; 22usize] = b"id-cmc-recipientNonce\0";
pub const NID_id_cmc_recipientNonce: i32 = 333;
pub const SN_id_cmc_addExtensions: &'static [u8; 21usize] = b"id-cmc-addExtensions\0";
pub const NID_id_cmc_addExtensions: i32 = 334;
pub const SN_id_cmc_encryptedPOP: &'static [u8; 20usize] = b"id-cmc-encryptedPOP\0";
pub const NID_id_cmc_encryptedPOP: i32 = 335;
pub const SN_id_cmc_decryptedPOP: &'static [u8; 20usize] = b"id-cmc-decryptedPOP\0";
pub const NID_id_cmc_decryptedPOP: i32 = 336;
pub const SN_id_cmc_lraPOPWitness: &'static [u8; 21usize] = b"id-cmc-lraPOPWitness\0";
pub const NID_id_cmc_lraPOPWitness: i32 = 337;
pub const SN_id_cmc_getCert: &'static [u8; 15usize] = b"id-cmc-getCert\0";
pub const NID_id_cmc_getCert: i32 = 338;
pub const SN_id_cmc_getCRL: &'static [u8; 14usize] = b"id-cmc-getCRL\0";
pub const NID_id_cmc_getCRL: i32 = 339;
pub const SN_id_cmc_revokeRequest: &'static [u8; 21usize] = b"id-cmc-revokeRequest\0";
pub const NID_id_cmc_revokeRequest: i32 = 340;
pub const SN_id_cmc_regInfo: &'static [u8; 15usize] = b"id-cmc-regInfo\0";
pub const NID_id_cmc_regInfo: i32 = 341;
pub const SN_id_cmc_responseInfo: &'static [u8; 20usize] = b"id-cmc-responseInfo\0";
pub const NID_id_cmc_responseInfo: i32 = 342;
pub const SN_id_cmc_queryPending: &'static [u8; 20usize] = b"id-cmc-queryPending\0";
pub const NID_id_cmc_queryPending: i32 = 343;
pub const SN_id_cmc_popLinkRandom: &'static [u8; 21usize] = b"id-cmc-popLinkRandom\0";
pub const NID_id_cmc_popLinkRandom: i32 = 344;
pub const SN_id_cmc_popLinkWitness: &'static [u8; 22usize] = b"id-cmc-popLinkWitness\0";
pub const NID_id_cmc_popLinkWitness: i32 = 345;
pub const SN_id_cmc_confirmCertAcceptance: &'static [u8; 29usize] =
    b"id-cmc-confirmCertAcceptance\0";
pub const NID_id_cmc_confirmCertAcceptance: i32 = 346;
pub const SN_id_on_personalData: &'static [u8; 19usize] = b"id-on-personalData\0";
pub const NID_id_on_personalData: i32 = 347;
pub const SN_id_pda_dateOfBirth: &'static [u8; 19usize] = b"id-pda-dateOfBirth\0";
pub const NID_id_pda_dateOfBirth: i32 = 348;
pub const SN_id_pda_placeOfBirth: &'static [u8; 20usize] = b"id-pda-placeOfBirth\0";
pub const NID_id_pda_placeOfBirth: i32 = 349;
pub const SN_id_pda_gender: &'static [u8; 14usize] = b"id-pda-gender\0";
pub const NID_id_pda_gender: i32 = 351;
pub const SN_id_pda_countryOfCitizenship: &'static [u8; 28usize] = b"id-pda-countryOfCitizenship\0";
pub const NID_id_pda_countryOfCitizenship: i32 = 352;
pub const SN_id_pda_countryOfResidence: &'static [u8; 26usize] = b"id-pda-countryOfResidence\0";
pub const NID_id_pda_countryOfResidence: i32 = 353;
pub const SN_id_aca_authenticationInfo: &'static [u8; 26usize] = b"id-aca-authenticationInfo\0";
pub const NID_id_aca_authenticationInfo: i32 = 354;
pub const SN_id_aca_accessIdentity: &'static [u8; 22usize] = b"id-aca-accessIdentity\0";
pub const NID_id_aca_accessIdentity: i32 = 355;
pub const SN_id_aca_chargingIdentity: &'static [u8; 24usize] = b"id-aca-chargingIdentity\0";
pub const NID_id_aca_chargingIdentity: i32 = 356;
pub const SN_id_aca_group: &'static [u8; 13usize] = b"id-aca-group\0";
pub const NID_id_aca_group: i32 = 357;
pub const SN_id_aca_role: &'static [u8; 12usize] = b"id-aca-role\0";
pub const NID_id_aca_role: i32 = 358;
pub const SN_id_qcs_pkixQCSyntax_v1: &'static [u8; 23usize] = b"id-qcs-pkixQCSyntax-v1\0";
pub const NID_id_qcs_pkixQCSyntax_v1: i32 = 359;
pub const SN_id_cct_crs: &'static [u8; 11usize] = b"id-cct-crs\0";
pub const NID_id_cct_crs: i32 = 360;
pub const SN_id_cct_PKIData: &'static [u8; 15usize] = b"id-cct-PKIData\0";
pub const NID_id_cct_PKIData: i32 = 361;
pub const SN_id_cct_PKIResponse: &'static [u8; 19usize] = b"id-cct-PKIResponse\0";
pub const NID_id_cct_PKIResponse: i32 = 362;
pub const SN_ad_timeStamping: &'static [u8; 16usize] = b"ad_timestamping\0";
pub const LN_ad_timeStamping: &'static [u8; 17usize] = b"AD Time Stamping\0";
pub const NID_ad_timeStamping: i32 = 363;
pub const SN_ad_dvcs: &'static [u8; 8usize] = b"AD_DVCS\0";
pub const LN_ad_dvcs: &'static [u8; 8usize] = b"ad dvcs\0";
pub const NID_ad_dvcs: i32 = 364;
pub const SN_id_pkix_OCSP_basic: &'static [u8; 18usize] = b"basicOCSPResponse\0";
pub const LN_id_pkix_OCSP_basic: &'static [u8; 20usize] = b"Basic OCSP Response\0";
pub const NID_id_pkix_OCSP_basic: i32 = 365;
pub const SN_id_pkix_OCSP_Nonce: &'static [u8; 6usize] = b"Nonce\0";
pub const LN_id_pkix_OCSP_Nonce: &'static [u8; 11usize] = b"OCSP Nonce\0";
pub const NID_id_pkix_OCSP_Nonce: i32 = 366;
pub const SN_id_pkix_OCSP_CrlID: &'static [u8; 6usize] = b"CrlID\0";
pub const LN_id_pkix_OCSP_CrlID: &'static [u8; 12usize] = b"OCSP CRL ID\0";
pub const NID_id_pkix_OCSP_CrlID: i32 = 367;
pub const SN_id_pkix_OCSP_acceptableResponses: &'static [u8; 20usize] = b"acceptableResponses\0";
pub const LN_id_pkix_OCSP_acceptableResponses: &'static [u8; 26usize] =
    b"Acceptable OCSP Responses\0";
pub const NID_id_pkix_OCSP_acceptableResponses: i32 = 368;
pub const SN_id_pkix_OCSP_noCheck: &'static [u8; 8usize] = b"noCheck\0";
pub const LN_id_pkix_OCSP_noCheck: &'static [u8; 14usize] = b"OCSP No Check\0";
pub const NID_id_pkix_OCSP_noCheck: i32 = 369;
pub const SN_id_pkix_OCSP_archiveCutoff: &'static [u8; 14usize] = b"archiveCutoff\0";
pub const LN_id_pkix_OCSP_archiveCutoff: &'static [u8; 20usize] = b"OCSP Archive Cutoff\0";
pub const NID_id_pkix_OCSP_archiveCutoff: i32 = 370;
pub const SN_id_pkix_OCSP_serviceLocator: &'static [u8; 15usize] = b"serviceLocator\0";
pub const LN_id_pkix_OCSP_serviceLocator: &'static [u8; 21usize] = b"OCSP Service Locator\0";
pub const NID_id_pkix_OCSP_serviceLocator: i32 = 371;
pub const SN_id_pkix_OCSP_extendedStatus: &'static [u8; 15usize] = b"extendedStatus\0";
pub const LN_id_pkix_OCSP_extendedStatus: &'static [u8; 21usize] = b"Extended OCSP Status\0";
pub const NID_id_pkix_OCSP_extendedStatus: i32 = 372;
pub const SN_id_pkix_OCSP_valid: &'static [u8; 6usize] = b"valid\0";
pub const NID_id_pkix_OCSP_valid: i32 = 373;
pub const SN_id_pkix_OCSP_path: &'static [u8; 5usize] = b"path\0";
pub const NID_id_pkix_OCSP_path: i32 = 374;
pub const SN_id_pkix_OCSP_trustRoot: &'static [u8; 10usize] = b"trustRoot\0";
pub const LN_id_pkix_OCSP_trustRoot: &'static [u8; 11usize] = b"Trust Root\0";
pub const NID_id_pkix_OCSP_trustRoot: i32 = 375;
pub const SN_algorithm: &'static [u8; 10usize] = b"algorithm\0";
pub const LN_algorithm: &'static [u8; 10usize] = b"algorithm\0";
pub const NID_algorithm: i32 = 376;
pub const SN_rsaSignature: &'static [u8; 13usize] = b"rsaSignature\0";
pub const NID_rsaSignature: i32 = 377;
pub const SN_X500algorithms: &'static [u8; 15usize] = b"X500algorithms\0";
pub const LN_X500algorithms: &'static [u8; 32usize] = b"directory services - algorithms\0";
pub const NID_X500algorithms: i32 = 378;
pub const SN_org: &'static [u8; 4usize] = b"ORG\0";
pub const LN_org: &'static [u8; 4usize] = b"org\0";
pub const NID_org: i32 = 379;
pub const SN_dod: &'static [u8; 4usize] = b"DOD\0";
pub const LN_dod: &'static [u8; 4usize] = b"dod\0";
pub const NID_dod: i32 = 380;
pub const SN_iana: &'static [u8; 5usize] = b"IANA\0";
pub const LN_iana: &'static [u8; 5usize] = b"iana\0";
pub const NID_iana: i32 = 381;
pub const SN_Directory: &'static [u8; 10usize] = b"directory\0";
pub const LN_Directory: &'static [u8; 10usize] = b"Directory\0";
pub const NID_Directory: i32 = 382;
pub const SN_Management: &'static [u8; 5usize] = b"mgmt\0";
pub const LN_Management: &'static [u8; 11usize] = b"Management\0";
pub const NID_Management: i32 = 383;
pub const SN_Experimental: &'static [u8; 13usize] = b"experimental\0";
pub const LN_Experimental: &'static [u8; 13usize] = b"Experimental\0";
pub const NID_Experimental: i32 = 384;
pub const SN_Private: &'static [u8; 8usize] = b"private\0";
pub const LN_Private: &'static [u8; 8usize] = b"Private\0";
pub const NID_Private: i32 = 385;
pub const SN_Security: &'static [u8; 9usize] = b"security\0";
pub const LN_Security: &'static [u8; 9usize] = b"Security\0";
pub const NID_Security: i32 = 386;
pub const SN_SNMPv2: &'static [u8; 7usize] = b"snmpv2\0";
pub const LN_SNMPv2: &'static [u8; 7usize] = b"SNMPv2\0";
pub const NID_SNMPv2: i32 = 387;
pub const LN_Mail: &'static [u8; 5usize] = b"Mail\0";
pub const NID_Mail: i32 = 388;
pub const SN_Enterprises: &'static [u8; 12usize] = b"enterprises\0";
pub const LN_Enterprises: &'static [u8; 12usize] = b"Enterprises\0";
pub const NID_Enterprises: i32 = 389;
pub const SN_dcObject: &'static [u8; 9usize] = b"dcobject\0";
pub const LN_dcObject: &'static [u8; 9usize] = b"dcObject\0";
pub const NID_dcObject: i32 = 390;
pub const SN_domainComponent: &'static [u8; 3usize] = b"DC\0";
pub const LN_domainComponent: &'static [u8; 16usize] = b"domainComponent\0";
pub const NID_domainComponent: i32 = 391;
pub const SN_Domain: &'static [u8; 7usize] = b"domain\0";
pub const LN_Domain: &'static [u8; 7usize] = b"Domain\0";
pub const NID_Domain: i32 = 392;
pub const SN_selected_attribute_types: &'static [u8; 25usize] = b"selected-attribute-types\0";
pub const LN_selected_attribute_types: &'static [u8; 25usize] = b"Selected Attribute Types\0";
pub const NID_selected_attribute_types: i32 = 394;
pub const SN_clearance: &'static [u8; 10usize] = b"clearance\0";
pub const NID_clearance: i32 = 395;
pub const SN_md4WithRSAEncryption: &'static [u8; 8usize] = b"RSA-MD4\0";
pub const LN_md4WithRSAEncryption: &'static [u8; 21usize] = b"md4WithRSAEncryption\0";
pub const NID_md4WithRSAEncryption: i32 = 396;
pub const SN_ac_proxying: &'static [u8; 12usize] = b"ac-proxying\0";
pub const NID_ac_proxying: i32 = 397;
pub const SN_sinfo_access: &'static [u8; 18usize] = b"subjectInfoAccess\0";
pub const LN_sinfo_access: &'static [u8; 27usize] = b"Subject Information Access\0";
pub const NID_sinfo_access: i32 = 398;
pub const SN_id_aca_encAttrs: &'static [u8; 16usize] = b"id-aca-encAttrs\0";
pub const NID_id_aca_encAttrs: i32 = 399;
pub const SN_role: &'static [u8; 5usize] = b"role\0";
pub const LN_role: &'static [u8; 5usize] = b"role\0";
pub const NID_role: i32 = 400;
pub const SN_policy_constraints: &'static [u8; 18usize] = b"policyConstraints\0";
pub const LN_policy_constraints: &'static [u8; 26usize] = b"X509v3 Policy Constraints\0";
pub const NID_policy_constraints: i32 = 401;
pub const SN_target_information: &'static [u8; 18usize] = b"targetInformation\0";
pub const LN_target_information: &'static [u8; 20usize] = b"X509v3 AC Targeting\0";
pub const NID_target_information: i32 = 402;
pub const SN_no_rev_avail: &'static [u8; 11usize] = b"noRevAvail\0";
pub const LN_no_rev_avail: &'static [u8; 31usize] = b"X509v3 No Revocation Available\0";
pub const NID_no_rev_avail: i32 = 403;
pub const SN_ansi_X9_62: &'static [u8; 11usize] = b"ansi-X9-62\0";
pub const LN_ansi_X9_62: &'static [u8; 11usize] = b"ANSI X9.62\0";
pub const NID_ansi_X9_62: i32 = 405;
pub const SN_X9_62_prime_field: &'static [u8; 12usize] = b"prime-field\0";
pub const NID_X9_62_prime_field: i32 = 406;
pub const SN_X9_62_characteristic_two_field: &'static [u8; 25usize] = b"characteristic-two-field\0";
pub const NID_X9_62_characteristic_two_field: i32 = 407;
pub const SN_X9_62_id_ecPublicKey: &'static [u8; 15usize] = b"id-ecPublicKey\0";
pub const NID_X9_62_id_ecPublicKey: i32 = 408;
pub const SN_X9_62_prime192v1: &'static [u8; 11usize] = b"prime192v1\0";
pub const NID_X9_62_prime192v1: i32 = 409;
pub const SN_X9_62_prime192v2: &'static [u8; 11usize] = b"prime192v2\0";
pub const NID_X9_62_prime192v2: i32 = 410;
pub const SN_X9_62_prime192v3: &'static [u8; 11usize] = b"prime192v3\0";
pub const NID_X9_62_prime192v3: i32 = 411;
pub const SN_X9_62_prime239v1: &'static [u8; 11usize] = b"prime239v1\0";
pub const NID_X9_62_prime239v1: i32 = 412;
pub const SN_X9_62_prime239v2: &'static [u8; 11usize] = b"prime239v2\0";
pub const NID_X9_62_prime239v2: i32 = 413;
pub const SN_X9_62_prime239v3: &'static [u8; 11usize] = b"prime239v3\0";
pub const NID_X9_62_prime239v3: i32 = 414;
pub const SN_X9_62_prime256v1: &'static [u8; 11usize] = b"prime256v1\0";
pub const NID_X9_62_prime256v1: i32 = 415;
pub const SN_ecdsa_with_SHA1: &'static [u8; 16usize] = b"ecdsa-with-SHA1\0";
pub const NID_ecdsa_with_SHA1: i32 = 416;
pub const SN_ms_csp_name: &'static [u8; 8usize] = b"CSPName\0";
pub const LN_ms_csp_name: &'static [u8; 19usize] = b"Microsoft CSP Name\0";
pub const NID_ms_csp_name: i32 = 417;
pub const SN_aes_128_ecb: &'static [u8; 12usize] = b"AES-128-ECB\0";
pub const LN_aes_128_ecb: &'static [u8; 12usize] = b"aes-128-ecb\0";
pub const NID_aes_128_ecb: i32 = 418;
pub const SN_aes_128_cbc: &'static [u8; 12usize] = b"AES-128-CBC\0";
pub const LN_aes_128_cbc: &'static [u8; 12usize] = b"aes-128-cbc\0";
pub const NID_aes_128_cbc: i32 = 419;
pub const SN_aes_128_ofb128: &'static [u8; 12usize] = b"AES-128-OFB\0";
pub const LN_aes_128_ofb128: &'static [u8; 12usize] = b"aes-128-ofb\0";
pub const NID_aes_128_ofb128: i32 = 420;
pub const SN_aes_128_cfb128: &'static [u8; 12usize] = b"AES-128-CFB\0";
pub const LN_aes_128_cfb128: &'static [u8; 12usize] = b"aes-128-cfb\0";
pub const NID_aes_128_cfb128: i32 = 421;
pub const SN_aes_192_ecb: &'static [u8; 12usize] = b"AES-192-ECB\0";
pub const LN_aes_192_ecb: &'static [u8; 12usize] = b"aes-192-ecb\0";
pub const NID_aes_192_ecb: i32 = 422;
pub const SN_aes_192_cbc: &'static [u8; 12usize] = b"AES-192-CBC\0";
pub const LN_aes_192_cbc: &'static [u8; 12usize] = b"aes-192-cbc\0";
pub const NID_aes_192_cbc: i32 = 423;
pub const SN_aes_192_ofb128: &'static [u8; 12usize] = b"AES-192-OFB\0";
pub const LN_aes_192_ofb128: &'static [u8; 12usize] = b"aes-192-ofb\0";
pub const NID_aes_192_ofb128: i32 = 424;
pub const SN_aes_192_cfb128: &'static [u8; 12usize] = b"AES-192-CFB\0";
pub const LN_aes_192_cfb128: &'static [u8; 12usize] = b"aes-192-cfb\0";
pub const NID_aes_192_cfb128: i32 = 425;
pub const SN_aes_256_ecb: &'static [u8; 12usize] = b"AES-256-ECB\0";
pub const LN_aes_256_ecb: &'static [u8; 12usize] = b"aes-256-ecb\0";
pub const NID_aes_256_ecb: i32 = 426;
pub const SN_aes_256_cbc: &'static [u8; 12usize] = b"AES-256-CBC\0";
pub const LN_aes_256_cbc: &'static [u8; 12usize] = b"aes-256-cbc\0";
pub const NID_aes_256_cbc: i32 = 427;
pub const SN_aes_256_ofb128: &'static [u8; 12usize] = b"AES-256-OFB\0";
pub const LN_aes_256_ofb128: &'static [u8; 12usize] = b"aes-256-ofb\0";
pub const NID_aes_256_ofb128: i32 = 428;
pub const SN_aes_256_cfb128: &'static [u8; 12usize] = b"AES-256-CFB\0";
pub const LN_aes_256_cfb128: &'static [u8; 12usize] = b"aes-256-cfb\0";
pub const NID_aes_256_cfb128: i32 = 429;
pub const SN_hold_instruction_code: &'static [u8; 20usize] = b"holdInstructionCode\0";
pub const LN_hold_instruction_code: &'static [u8; 22usize] = b"Hold Instruction Code\0";
pub const NID_hold_instruction_code: i32 = 430;
pub const SN_hold_instruction_none: &'static [u8; 20usize] = b"holdInstructionNone\0";
pub const LN_hold_instruction_none: &'static [u8; 22usize] = b"Hold Instruction None\0";
pub const NID_hold_instruction_none: i32 = 431;
pub const SN_hold_instruction_call_issuer: &'static [u8; 26usize] = b"holdInstructionCallIssuer\0";
pub const LN_hold_instruction_call_issuer: &'static [u8; 29usize] =
    b"Hold Instruction Call Issuer\0";
pub const NID_hold_instruction_call_issuer: i32 = 432;
pub const SN_hold_instruction_reject: &'static [u8; 22usize] = b"holdInstructionReject\0";
pub const LN_hold_instruction_reject: &'static [u8; 24usize] = b"Hold Instruction Reject\0";
pub const NID_hold_instruction_reject: i32 = 433;
pub const SN_data: &'static [u8; 5usize] = b"data\0";
pub const NID_data: i32 = 434;
pub const SN_pss: &'static [u8; 4usize] = b"pss\0";
pub const NID_pss: i32 = 435;
pub const SN_ucl: &'static [u8; 4usize] = b"ucl\0";
pub const NID_ucl: i32 = 436;
pub const SN_pilot: &'static [u8; 6usize] = b"pilot\0";
pub const NID_pilot: i32 = 437;
pub const LN_pilotAttributeType: &'static [u8; 19usize] = b"pilotAttributeType\0";
pub const NID_pilotAttributeType: i32 = 438;
pub const LN_pilotAttributeSyntax: &'static [u8; 21usize] = b"pilotAttributeSyntax\0";
pub const NID_pilotAttributeSyntax: i32 = 439;
pub const LN_pilotObjectClass: &'static [u8; 17usize] = b"pilotObjectClass\0";
pub const NID_pilotObjectClass: i32 = 440;
pub const LN_pilotGroups: &'static [u8; 12usize] = b"pilotGroups\0";
pub const NID_pilotGroups: i32 = 441;
pub const LN_iA5StringSyntax: &'static [u8; 16usize] = b"iA5StringSyntax\0";
pub const NID_iA5StringSyntax: i32 = 442;
pub const LN_caseIgnoreIA5StringSyntax: &'static [u8; 26usize] = b"caseIgnoreIA5StringSyntax\0";
pub const NID_caseIgnoreIA5StringSyntax: i32 = 443;
pub const LN_pilotObject: &'static [u8; 12usize] = b"pilotObject\0";
pub const NID_pilotObject: i32 = 444;
pub const LN_pilotPerson: &'static [u8; 12usize] = b"pilotPerson\0";
pub const NID_pilotPerson: i32 = 445;
pub const SN_account: &'static [u8; 8usize] = b"account\0";
pub const NID_account: i32 = 446;
pub const SN_document: &'static [u8; 9usize] = b"document\0";
pub const NID_document: i32 = 447;
pub const SN_room: &'static [u8; 5usize] = b"room\0";
pub const NID_room: i32 = 448;
pub const LN_documentSeries: &'static [u8; 15usize] = b"documentSeries\0";
pub const NID_documentSeries: i32 = 449;
pub const LN_rFC822localPart: &'static [u8; 16usize] = b"rFC822localPart\0";
pub const NID_rFC822localPart: i32 = 450;
pub const LN_dNSDomain: &'static [u8; 10usize] = b"dNSDomain\0";
pub const NID_dNSDomain: i32 = 451;
pub const LN_domainRelatedObject: &'static [u8; 20usize] = b"domainRelatedObject\0";
pub const NID_domainRelatedObject: i32 = 452;
pub const LN_friendlyCountry: &'static [u8; 16usize] = b"friendlyCountry\0";
pub const NID_friendlyCountry: i32 = 453;
pub const LN_simpleSecurityObject: &'static [u8; 21usize] = b"simpleSecurityObject\0";
pub const NID_simpleSecurityObject: i32 = 454;
pub const LN_pilotOrganization: &'static [u8; 18usize] = b"pilotOrganization\0";
pub const NID_pilotOrganization: i32 = 455;
pub const LN_pilotDSA: &'static [u8; 9usize] = b"pilotDSA\0";
pub const NID_pilotDSA: i32 = 456;
pub const LN_qualityLabelledData: &'static [u8; 20usize] = b"qualityLabelledData\0";
pub const NID_qualityLabelledData: i32 = 457;
pub const SN_userId: &'static [u8; 4usize] = b"UID\0";
pub const LN_userId: &'static [u8; 7usize] = b"userId\0";
pub const NID_userId: i32 = 458;
pub const LN_textEncodedORAddress: &'static [u8; 21usize] = b"textEncodedORAddress\0";
pub const NID_textEncodedORAddress: i32 = 459;
pub const SN_rfc822Mailbox: &'static [u8; 5usize] = b"mail\0";
pub const LN_rfc822Mailbox: &'static [u8; 14usize] = b"rfc822Mailbox\0";
pub const NID_rfc822Mailbox: i32 = 460;
pub const SN_info: &'static [u8; 5usize] = b"info\0";
pub const NID_info: i32 = 461;
pub const LN_favouriteDrink: &'static [u8; 15usize] = b"favouriteDrink\0";
pub const NID_favouriteDrink: i32 = 462;
pub const LN_roomNumber: &'static [u8; 11usize] = b"roomNumber\0";
pub const NID_roomNumber: i32 = 463;
pub const SN_photo: &'static [u8; 6usize] = b"photo\0";
pub const NID_photo: i32 = 464;
pub const LN_userClass: &'static [u8; 10usize] = b"userClass\0";
pub const NID_userClass: i32 = 465;
pub const SN_host: &'static [u8; 5usize] = b"host\0";
pub const NID_host: i32 = 466;
pub const SN_manager: &'static [u8; 8usize] = b"manager\0";
pub const NID_manager: i32 = 467;
pub const LN_documentIdentifier: &'static [u8; 19usize] = b"documentIdentifier\0";
pub const NID_documentIdentifier: i32 = 468;
pub const LN_documentTitle: &'static [u8; 14usize] = b"documentTitle\0";
pub const NID_documentTitle: i32 = 469;
pub const LN_documentVersion: &'static [u8; 16usize] = b"documentVersion\0";
pub const NID_documentVersion: i32 = 470;
pub const LN_documentAuthor: &'static [u8; 15usize] = b"documentAuthor\0";
pub const NID_documentAuthor: i32 = 471;
pub const LN_documentLocation: &'static [u8; 17usize] = b"documentLocation\0";
pub const NID_documentLocation: i32 = 472;
pub const LN_homeTelephoneNumber: &'static [u8; 20usize] = b"homeTelephoneNumber\0";
pub const NID_homeTelephoneNumber: i32 = 473;
pub const SN_secretary: &'static [u8; 10usize] = b"secretary\0";
pub const NID_secretary: i32 = 474;
pub const LN_otherMailbox: &'static [u8; 13usize] = b"otherMailbox\0";
pub const NID_otherMailbox: i32 = 475;
pub const LN_lastModifiedTime: &'static [u8; 17usize] = b"lastModifiedTime\0";
pub const NID_lastModifiedTime: i32 = 476;
pub const LN_lastModifiedBy: &'static [u8; 15usize] = b"lastModifiedBy\0";
pub const NID_lastModifiedBy: i32 = 477;
pub const LN_aRecord: &'static [u8; 8usize] = b"aRecord\0";
pub const NID_aRecord: i32 = 478;
pub const LN_pilotAttributeType27: &'static [u8; 21usize] = b"pilotAttributeType27\0";
pub const NID_pilotAttributeType27: i32 = 479;
pub const LN_mXRecord: &'static [u8; 9usize] = b"mXRecord\0";
pub const NID_mXRecord: i32 = 480;
pub const LN_nSRecord: &'static [u8; 9usize] = b"nSRecord\0";
pub const NID_nSRecord: i32 = 481;
pub const LN_sOARecord: &'static [u8; 10usize] = b"sOARecord\0";
pub const NID_sOARecord: i32 = 482;
pub const LN_cNAMERecord: &'static [u8; 12usize] = b"cNAMERecord\0";
pub const NID_cNAMERecord: i32 = 483;
pub const LN_associatedDomain: &'static [u8; 17usize] = b"associatedDomain\0";
pub const NID_associatedDomain: i32 = 484;
pub const LN_associatedName: &'static [u8; 15usize] = b"associatedName\0";
pub const NID_associatedName: i32 = 485;
pub const LN_homePostalAddress: &'static [u8; 18usize] = b"homePostalAddress\0";
pub const NID_homePostalAddress: i32 = 486;
pub const LN_personalTitle: &'static [u8; 14usize] = b"personalTitle\0";
pub const NID_personalTitle: i32 = 487;
pub const LN_mobileTelephoneNumber: &'static [u8; 22usize] = b"mobileTelephoneNumber\0";
pub const NID_mobileTelephoneNumber: i32 = 488;
pub const LN_pagerTelephoneNumber: &'static [u8; 21usize] = b"pagerTelephoneNumber\0";
pub const NID_pagerTelephoneNumber: i32 = 489;
pub const LN_friendlyCountryName: &'static [u8; 20usize] = b"friendlyCountryName\0";
pub const NID_friendlyCountryName: i32 = 490;
pub const LN_organizationalStatus: &'static [u8; 21usize] = b"organizationalStatus\0";
pub const NID_organizationalStatus: i32 = 491;
pub const LN_janetMailbox: &'static [u8; 13usize] = b"janetMailbox\0";
pub const NID_janetMailbox: i32 = 492;
pub const LN_mailPreferenceOption: &'static [u8; 21usize] = b"mailPreferenceOption\0";
pub const NID_mailPreferenceOption: i32 = 493;
pub const LN_buildingName: &'static [u8; 13usize] = b"buildingName\0";
pub const NID_buildingName: i32 = 494;
pub const LN_dSAQuality: &'static [u8; 11usize] = b"dSAQuality\0";
pub const NID_dSAQuality: i32 = 495;
pub const LN_singleLevelQuality: &'static [u8; 19usize] = b"singleLevelQuality\0";
pub const NID_singleLevelQuality: i32 = 496;
pub const LN_subtreeMinimumQuality: &'static [u8; 22usize] = b"subtreeMinimumQuality\0";
pub const NID_subtreeMinimumQuality: i32 = 497;
pub const LN_subtreeMaximumQuality: &'static [u8; 22usize] = b"subtreeMaximumQuality\0";
pub const NID_subtreeMaximumQuality: i32 = 498;
pub const LN_personalSignature: &'static [u8; 18usize] = b"personalSignature\0";
pub const NID_personalSignature: i32 = 499;
pub const LN_dITRedirect: &'static [u8; 12usize] = b"dITRedirect\0";
pub const NID_dITRedirect: i32 = 500;
pub const SN_audio: &'static [u8; 6usize] = b"audio\0";
pub const NID_audio: i32 = 501;
pub const LN_documentPublisher: &'static [u8; 18usize] = b"documentPublisher\0";
pub const NID_documentPublisher: i32 = 502;
pub const LN_x500UniqueIdentifier: &'static [u8; 21usize] = b"x500UniqueIdentifier\0";
pub const NID_x500UniqueIdentifier: i32 = 503;
pub const SN_mime_mhs: &'static [u8; 9usize] = b"mime-mhs\0";
pub const LN_mime_mhs: &'static [u8; 9usize] = b"MIME MHS\0";
pub const NID_mime_mhs: i32 = 504;
pub const SN_mime_mhs_headings: &'static [u8; 18usize] = b"mime-mhs-headings\0";
pub const LN_mime_mhs_headings: &'static [u8; 18usize] = b"mime-mhs-headings\0";
pub const NID_mime_mhs_headings: i32 = 505;
pub const SN_mime_mhs_bodies: &'static [u8; 16usize] = b"mime-mhs-bodies\0";
pub const LN_mime_mhs_bodies: &'static [u8; 16usize] = b"mime-mhs-bodies\0";
pub const NID_mime_mhs_bodies: i32 = 506;
pub const SN_id_hex_partial_message: &'static [u8; 23usize] = b"id-hex-partial-message\0";
pub const LN_id_hex_partial_message: &'static [u8; 23usize] = b"id-hex-partial-message\0";
pub const NID_id_hex_partial_message: i32 = 507;
pub const SN_id_hex_multipart_message: &'static [u8; 25usize] = b"id-hex-multipart-message\0";
pub const LN_id_hex_multipart_message: &'static [u8; 25usize] = b"id-hex-multipart-message\0";
pub const NID_id_hex_multipart_message: i32 = 508;
pub const LN_generationQualifier: &'static [u8; 20usize] = b"generationQualifier\0";
pub const NID_generationQualifier: i32 = 509;
pub const LN_pseudonym: &'static [u8; 10usize] = b"pseudonym\0";
pub const NID_pseudonym: i32 = 510;
pub const SN_id_set: &'static [u8; 7usize] = b"id-set\0";
pub const LN_id_set: &'static [u8; 31usize] = b"Secure Electronic Transactions\0";
pub const NID_id_set: i32 = 512;
pub const SN_set_ctype: &'static [u8; 10usize] = b"set-ctype\0";
pub const LN_set_ctype: &'static [u8; 14usize] = b"content types\0";
pub const NID_set_ctype: i32 = 513;
pub const SN_set_msgExt: &'static [u8; 11usize] = b"set-msgExt\0";
pub const LN_set_msgExt: &'static [u8; 19usize] = b"message extensions\0";
pub const NID_set_msgExt: i32 = 514;
pub const SN_set_attr: &'static [u8; 9usize] = b"set-attr\0";
pub const NID_set_attr: i32 = 515;
pub const SN_set_policy: &'static [u8; 11usize] = b"set-policy\0";
pub const NID_set_policy: i32 = 516;
pub const SN_set_certExt: &'static [u8; 12usize] = b"set-certExt\0";
pub const LN_set_certExt: &'static [u8; 23usize] = b"certificate extensions\0";
pub const NID_set_certExt: i32 = 517;
pub const SN_set_brand: &'static [u8; 10usize] = b"set-brand\0";
pub const NID_set_brand: i32 = 518;
pub const SN_setct_PANData: &'static [u8; 14usize] = b"setct-PANData\0";
pub const NID_setct_PANData: i32 = 519;
pub const SN_setct_PANToken: &'static [u8; 15usize] = b"setct-PANToken\0";
pub const NID_setct_PANToken: i32 = 520;
pub const SN_setct_PANOnly: &'static [u8; 14usize] = b"setct-PANOnly\0";
pub const NID_setct_PANOnly: i32 = 521;
pub const SN_setct_OIData: &'static [u8; 13usize] = b"setct-OIData\0";
pub const NID_setct_OIData: i32 = 522;
pub const SN_setct_PI: &'static [u8; 9usize] = b"setct-PI\0";
pub const NID_setct_PI: i32 = 523;
pub const SN_setct_PIData: &'static [u8; 13usize] = b"setct-PIData\0";
pub const NID_setct_PIData: i32 = 524;
pub const SN_setct_PIDataUnsigned: &'static [u8; 21usize] = b"setct-PIDataUnsigned\0";
pub const NID_setct_PIDataUnsigned: i32 = 525;
pub const SN_setct_HODInput: &'static [u8; 15usize] = b"setct-HODInput\0";
pub const NID_setct_HODInput: i32 = 526;
pub const SN_setct_AuthResBaggage: &'static [u8; 21usize] = b"setct-AuthResBaggage\0";
pub const NID_setct_AuthResBaggage: i32 = 527;
pub const SN_setct_AuthRevReqBaggage: &'static [u8; 24usize] = b"setct-AuthRevReqBaggage\0";
pub const NID_setct_AuthRevReqBaggage: i32 = 528;
pub const SN_setct_AuthRevResBaggage: &'static [u8; 24usize] = b"setct-AuthRevResBaggage\0";
pub const NID_setct_AuthRevResBaggage: i32 = 529;
pub const SN_setct_CapTokenSeq: &'static [u8; 18usize] = b"setct-CapTokenSeq\0";
pub const NID_setct_CapTokenSeq: i32 = 530;
pub const SN_setct_PInitResData: &'static [u8; 19usize] = b"setct-PInitResData\0";
pub const NID_setct_PInitResData: i32 = 531;
pub const SN_setct_PI_TBS: &'static [u8; 13usize] = b"setct-PI-TBS\0";
pub const NID_setct_PI_TBS: i32 = 532;
pub const SN_setct_PResData: &'static [u8; 15usize] = b"setct-PResData\0";
pub const NID_setct_PResData: i32 = 533;
pub const SN_setct_AuthReqTBS: &'static [u8; 17usize] = b"setct-AuthReqTBS\0";
pub const NID_setct_AuthReqTBS: i32 = 534;
pub const SN_setct_AuthResTBS: &'static [u8; 17usize] = b"setct-AuthResTBS\0";
pub const NID_setct_AuthResTBS: i32 = 535;
pub const SN_setct_AuthResTBSX: &'static [u8; 18usize] = b"setct-AuthResTBSX\0";
pub const NID_setct_AuthResTBSX: i32 = 536;
pub const SN_setct_AuthTokenTBS: &'static [u8; 19usize] = b"setct-AuthTokenTBS\0";
pub const NID_setct_AuthTokenTBS: i32 = 537;
pub const SN_setct_CapTokenData: &'static [u8; 19usize] = b"setct-CapTokenData\0";
pub const NID_setct_CapTokenData: i32 = 538;
pub const SN_setct_CapTokenTBS: &'static [u8; 18usize] = b"setct-CapTokenTBS\0";
pub const NID_setct_CapTokenTBS: i32 = 539;
pub const SN_setct_AcqCardCodeMsg: &'static [u8; 21usize] = b"setct-AcqCardCodeMsg\0";
pub const NID_setct_AcqCardCodeMsg: i32 = 540;
pub const SN_setct_AuthRevReqTBS: &'static [u8; 20usize] = b"setct-AuthRevReqTBS\0";
pub const NID_setct_AuthRevReqTBS: i32 = 541;
pub const SN_setct_AuthRevResData: &'static [u8; 21usize] = b"setct-AuthRevResData\0";
pub const NID_setct_AuthRevResData: i32 = 542;
pub const SN_setct_AuthRevResTBS: &'static [u8; 20usize] = b"setct-AuthRevResTBS\0";
pub const NID_setct_AuthRevResTBS: i32 = 543;
pub const SN_setct_CapReqTBS: &'static [u8; 16usize] = b"setct-CapReqTBS\0";
pub const NID_setct_CapReqTBS: i32 = 544;
pub const SN_setct_CapReqTBSX: &'static [u8; 17usize] = b"setct-CapReqTBSX\0";
pub const NID_setct_CapReqTBSX: i32 = 545;
pub const SN_setct_CapResData: &'static [u8; 17usize] = b"setct-CapResData\0";
pub const NID_setct_CapResData: i32 = 546;
pub const SN_setct_CapRevReqTBS: &'static [u8; 19usize] = b"setct-CapRevReqTBS\0";
pub const NID_setct_CapRevReqTBS: i32 = 547;
pub const SN_setct_CapRevReqTBSX: &'static [u8; 20usize] = b"setct-CapRevReqTBSX\0";
pub const NID_setct_CapRevReqTBSX: i32 = 548;
pub const SN_setct_CapRevResData: &'static [u8; 20usize] = b"setct-CapRevResData\0";
pub const NID_setct_CapRevResData: i32 = 549;
pub const SN_setct_CredReqTBS: &'static [u8; 17usize] = b"setct-CredReqTBS\0";
pub const NID_setct_CredReqTBS: i32 = 550;
pub const SN_setct_CredReqTBSX: &'static [u8; 18usize] = b"setct-CredReqTBSX\0";
pub const NID_setct_CredReqTBSX: i32 = 551;
pub const SN_setct_CredResData: &'static [u8; 18usize] = b"setct-CredResData\0";
pub const NID_setct_CredResData: i32 = 552;
pub const SN_setct_CredRevReqTBS: &'static [u8; 20usize] = b"setct-CredRevReqTBS\0";
pub const NID_setct_CredRevReqTBS: i32 = 553;
pub const SN_setct_CredRevReqTBSX: &'static [u8; 21usize] = b"setct-CredRevReqTBSX\0";
pub const NID_setct_CredRevReqTBSX: i32 = 554;
pub const SN_setct_CredRevResData: &'static [u8; 21usize] = b"setct-CredRevResData\0";
pub const NID_setct_CredRevResData: i32 = 555;
pub const SN_setct_PCertReqData: &'static [u8; 19usize] = b"setct-PCertReqData\0";
pub const NID_setct_PCertReqData: i32 = 556;
pub const SN_setct_PCertResTBS: &'static [u8; 18usize] = b"setct-PCertResTBS\0";
pub const NID_setct_PCertResTBS: i32 = 557;
pub const SN_setct_BatchAdminReqData: &'static [u8; 24usize] = b"setct-BatchAdminReqData\0";
pub const NID_setct_BatchAdminReqData: i32 = 558;
pub const SN_setct_BatchAdminResData: &'static [u8; 24usize] = b"setct-BatchAdminResData\0";
pub const NID_setct_BatchAdminResData: i32 = 559;
pub const SN_setct_CardCInitResTBS: &'static [u8; 22usize] = b"setct-CardCInitResTBS\0";
pub const NID_setct_CardCInitResTBS: i32 = 560;
pub const SN_setct_MeAqCInitResTBS: &'static [u8; 22usize] = b"setct-MeAqCInitResTBS\0";
pub const NID_setct_MeAqCInitResTBS: i32 = 561;
pub const SN_setct_RegFormResTBS: &'static [u8; 20usize] = b"setct-RegFormResTBS\0";
pub const NID_setct_RegFormResTBS: i32 = 562;
pub const SN_setct_CertReqData: &'static [u8; 18usize] = b"setct-CertReqData\0";
pub const NID_setct_CertReqData: i32 = 563;
pub const SN_setct_CertReqTBS: &'static [u8; 17usize] = b"setct-CertReqTBS\0";
pub const NID_setct_CertReqTBS: i32 = 564;
pub const SN_setct_CertResData: &'static [u8; 18usize] = b"setct-CertResData\0";
pub const NID_setct_CertResData: i32 = 565;
pub const SN_setct_CertInqReqTBS: &'static [u8; 20usize] = b"setct-CertInqReqTBS\0";
pub const NID_setct_CertInqReqTBS: i32 = 566;
pub const SN_setct_ErrorTBS: &'static [u8; 15usize] = b"setct-ErrorTBS\0";
pub const NID_setct_ErrorTBS: i32 = 567;
pub const SN_setct_PIDualSignedTBE: &'static [u8; 22usize] = b"setct-PIDualSignedTBE\0";
pub const NID_setct_PIDualSignedTBE: i32 = 568;
pub const SN_setct_PIUnsignedTBE: &'static [u8; 20usize] = b"setct-PIUnsignedTBE\0";
pub const NID_setct_PIUnsignedTBE: i32 = 569;
pub const SN_setct_AuthReqTBE: &'static [u8; 17usize] = b"setct-AuthReqTBE\0";
pub const NID_setct_AuthReqTBE: i32 = 570;
pub const SN_setct_AuthResTBE: &'static [u8; 17usize] = b"setct-AuthResTBE\0";
pub const NID_setct_AuthResTBE: i32 = 571;
pub const SN_setct_AuthResTBEX: &'static [u8; 18usize] = b"setct-AuthResTBEX\0";
pub const NID_setct_AuthResTBEX: i32 = 572;
pub const SN_setct_AuthTokenTBE: &'static [u8; 19usize] = b"setct-AuthTokenTBE\0";
pub const NID_setct_AuthTokenTBE: i32 = 573;
pub const SN_setct_CapTokenTBE: &'static [u8; 18usize] = b"setct-CapTokenTBE\0";
pub const NID_setct_CapTokenTBE: i32 = 574;
pub const SN_setct_CapTokenTBEX: &'static [u8; 19usize] = b"setct-CapTokenTBEX\0";
pub const NID_setct_CapTokenTBEX: i32 = 575;
pub const SN_setct_AcqCardCodeMsgTBE: &'static [u8; 24usize] = b"setct-AcqCardCodeMsgTBE\0";
pub const NID_setct_AcqCardCodeMsgTBE: i32 = 576;
pub const SN_setct_AuthRevReqTBE: &'static [u8; 20usize] = b"setct-AuthRevReqTBE\0";
pub const NID_setct_AuthRevReqTBE: i32 = 577;
pub const SN_setct_AuthRevResTBE: &'static [u8; 20usize] = b"setct-AuthRevResTBE\0";
pub const NID_setct_AuthRevResTBE: i32 = 578;
pub const SN_setct_AuthRevResTBEB: &'static [u8; 21usize] = b"setct-AuthRevResTBEB\0";
pub const NID_setct_AuthRevResTBEB: i32 = 579;
pub const SN_setct_CapReqTBE: &'static [u8; 16usize] = b"setct-CapReqTBE\0";
pub const NID_setct_CapReqTBE: i32 = 580;
pub const SN_setct_CapReqTBEX: &'static [u8; 17usize] = b"setct-CapReqTBEX\0";
pub const NID_setct_CapReqTBEX: i32 = 581;
pub const SN_setct_CapResTBE: &'static [u8; 16usize] = b"setct-CapResTBE\0";
pub const NID_setct_CapResTBE: i32 = 582;
pub const SN_setct_CapRevReqTBE: &'static [u8; 19usize] = b"setct-CapRevReqTBE\0";
pub const NID_setct_CapRevReqTBE: i32 = 583;
pub const SN_setct_CapRevReqTBEX: &'static [u8; 20usize] = b"setct-CapRevReqTBEX\0";
pub const NID_setct_CapRevReqTBEX: i32 = 584;
pub const SN_setct_CapRevResTBE: &'static [u8; 19usize] = b"setct-CapRevResTBE\0";
pub const NID_setct_CapRevResTBE: i32 = 585;
pub const SN_setct_CredReqTBE: &'static [u8; 17usize] = b"setct-CredReqTBE\0";
pub const NID_setct_CredReqTBE: i32 = 586;
pub const SN_setct_CredReqTBEX: &'static [u8; 18usize] = b"setct-CredReqTBEX\0";
pub const NID_setct_CredReqTBEX: i32 = 587;
pub const SN_setct_CredResTBE: &'static [u8; 17usize] = b"setct-CredResTBE\0";
pub const NID_setct_CredResTBE: i32 = 588;
pub const SN_setct_CredRevReqTBE: &'static [u8; 20usize] = b"setct-CredRevReqTBE\0";
pub const NID_setct_CredRevReqTBE: i32 = 589;
pub const SN_setct_CredRevReqTBEX: &'static [u8; 21usize] = b"setct-CredRevReqTBEX\0";
pub const NID_setct_CredRevReqTBEX: i32 = 590;
pub const SN_setct_CredRevResTBE: &'static [u8; 20usize] = b"setct-CredRevResTBE\0";
pub const NID_setct_CredRevResTBE: i32 = 591;
pub const SN_setct_BatchAdminReqTBE: &'static [u8; 23usize] = b"setct-BatchAdminReqTBE\0";
pub const NID_setct_BatchAdminReqTBE: i32 = 592;
pub const SN_setct_BatchAdminResTBE: &'static [u8; 23usize] = b"setct-BatchAdminResTBE\0";
pub const NID_setct_BatchAdminResTBE: i32 = 593;
pub const SN_setct_RegFormReqTBE: &'static [u8; 20usize] = b"setct-RegFormReqTBE\0";
pub const NID_setct_RegFormReqTBE: i32 = 594;
pub const SN_setct_CertReqTBE: &'static [u8; 17usize] = b"setct-CertReqTBE\0";
pub const NID_setct_CertReqTBE: i32 = 595;
pub const SN_setct_CertReqTBEX: &'static [u8; 18usize] = b"setct-CertReqTBEX\0";
pub const NID_setct_CertReqTBEX: i32 = 596;
pub const SN_setct_CertResTBE: &'static [u8; 17usize] = b"setct-CertResTBE\0";
pub const NID_setct_CertResTBE: i32 = 597;
pub const SN_setct_CRLNotificationTBS: &'static [u8; 25usize] = b"setct-CRLNotificationTBS\0";
pub const NID_setct_CRLNotificationTBS: i32 = 598;
pub const SN_setct_CRLNotificationResTBS: &'static [u8; 28usize] = b"setct-CRLNotificationResTBS\0";
pub const NID_setct_CRLNotificationResTBS: i32 = 599;
pub const SN_setct_BCIDistributionTBS: &'static [u8; 25usize] = b"setct-BCIDistributionTBS\0";
pub const NID_setct_BCIDistributionTBS: i32 = 600;
pub const SN_setext_genCrypt: &'static [u8; 16usize] = b"setext-genCrypt\0";
pub const LN_setext_genCrypt: &'static [u8; 19usize] = b"generic cryptogram\0";
pub const NID_setext_genCrypt: i32 = 601;
pub const SN_setext_miAuth: &'static [u8; 14usize] = b"setext-miAuth\0";
pub const LN_setext_miAuth: &'static [u8; 24usize] = b"merchant initiated auth\0";
pub const NID_setext_miAuth: i32 = 602;
pub const SN_setext_pinSecure: &'static [u8; 17usize] = b"setext-pinSecure\0";
pub const NID_setext_pinSecure: i32 = 603;
pub const SN_setext_pinAny: &'static [u8; 14usize] = b"setext-pinAny\0";
pub const NID_setext_pinAny: i32 = 604;
pub const SN_setext_track2: &'static [u8; 14usize] = b"setext-track2\0";
pub const NID_setext_track2: i32 = 605;
pub const SN_setext_cv: &'static [u8; 10usize] = b"setext-cv\0";
pub const LN_setext_cv: &'static [u8; 24usize] = b"additional verification\0";
pub const NID_setext_cv: i32 = 606;
pub const SN_set_policy_root: &'static [u8; 16usize] = b"set-policy-root\0";
pub const NID_set_policy_root: i32 = 607;
pub const SN_setCext_hashedRoot: &'static [u8; 19usize] = b"setCext-hashedRoot\0";
pub const NID_setCext_hashedRoot: i32 = 608;
pub const SN_setCext_certType: &'static [u8; 17usize] = b"setCext-certType\0";
pub const NID_setCext_certType: i32 = 609;
pub const SN_setCext_merchData: &'static [u8; 18usize] = b"setCext-merchData\0";
pub const NID_setCext_merchData: i32 = 610;
pub const SN_setCext_cCertRequired: &'static [u8; 22usize] = b"setCext-cCertRequired\0";
pub const NID_setCext_cCertRequired: i32 = 611;
pub const SN_setCext_tunneling: &'static [u8; 18usize] = b"setCext-tunneling\0";
pub const NID_setCext_tunneling: i32 = 612;
pub const SN_setCext_setExt: &'static [u8; 15usize] = b"setCext-setExt\0";
pub const NID_setCext_setExt: i32 = 613;
pub const SN_setCext_setQualf: &'static [u8; 17usize] = b"setCext-setQualf\0";
pub const NID_setCext_setQualf: i32 = 614;
pub const SN_setCext_PGWYcapabilities: &'static [u8; 25usize] = b"setCext-PGWYcapabilities\0";
pub const NID_setCext_PGWYcapabilities: i32 = 615;
pub const SN_setCext_TokenIdentifier: &'static [u8; 24usize] = b"setCext-TokenIdentifier\0";
pub const NID_setCext_TokenIdentifier: i32 = 616;
pub const SN_setCext_Track2Data: &'static [u8; 19usize] = b"setCext-Track2Data\0";
pub const NID_setCext_Track2Data: i32 = 617;
pub const SN_setCext_TokenType: &'static [u8; 18usize] = b"setCext-TokenType\0";
pub const NID_setCext_TokenType: i32 = 618;
pub const SN_setCext_IssuerCapabilities: &'static [u8; 27usize] = b"setCext-IssuerCapabilities\0";
pub const NID_setCext_IssuerCapabilities: i32 = 619;
pub const SN_setAttr_Cert: &'static [u8; 13usize] = b"setAttr-Cert\0";
pub const NID_setAttr_Cert: i32 = 620;
pub const SN_setAttr_PGWYcap: &'static [u8; 16usize] = b"setAttr-PGWYcap\0";
pub const LN_setAttr_PGWYcap: &'static [u8; 29usize] = b"payment gateway capabilities\0";
pub const NID_setAttr_PGWYcap: i32 = 621;
pub const SN_setAttr_TokenType: &'static [u8; 18usize] = b"setAttr-TokenType\0";
pub const NID_setAttr_TokenType: i32 = 622;
pub const SN_setAttr_IssCap: &'static [u8; 15usize] = b"setAttr-IssCap\0";
pub const LN_setAttr_IssCap: &'static [u8; 20usize] = b"issuer capabilities\0";
pub const NID_setAttr_IssCap: i32 = 623;
pub const SN_set_rootKeyThumb: &'static [u8; 17usize] = b"set-rootKeyThumb\0";
pub const NID_set_rootKeyThumb: i32 = 624;
pub const SN_set_addPolicy: &'static [u8; 14usize] = b"set-addPolicy\0";
pub const NID_set_addPolicy: i32 = 625;
pub const SN_setAttr_Token_EMV: &'static [u8; 18usize] = b"setAttr-Token-EMV\0";
pub const NID_setAttr_Token_EMV: i32 = 626;
pub const SN_setAttr_Token_B0Prime: &'static [u8; 22usize] = b"setAttr-Token-B0Prime\0";
pub const NID_setAttr_Token_B0Prime: i32 = 627;
pub const SN_setAttr_IssCap_CVM: &'static [u8; 19usize] = b"setAttr-IssCap-CVM\0";
pub const NID_setAttr_IssCap_CVM: i32 = 628;
pub const SN_setAttr_IssCap_T2: &'static [u8; 18usize] = b"setAttr-IssCap-T2\0";
pub const NID_setAttr_IssCap_T2: i32 = 629;
pub const SN_setAttr_IssCap_Sig: &'static [u8; 19usize] = b"setAttr-IssCap-Sig\0";
pub const NID_setAttr_IssCap_Sig: i32 = 630;
pub const SN_setAttr_GenCryptgrm: &'static [u8; 20usize] = b"setAttr-GenCryptgrm\0";
pub const LN_setAttr_GenCryptgrm: &'static [u8; 20usize] = b"generate cryptogram\0";
pub const NID_setAttr_GenCryptgrm: i32 = 631;
pub const SN_setAttr_T2Enc: &'static [u8; 14usize] = b"setAttr-T2Enc\0";
pub const LN_setAttr_T2Enc: &'static [u8; 18usize] = b"encrypted track 2\0";
pub const NID_setAttr_T2Enc: i32 = 632;
pub const SN_setAttr_T2cleartxt: &'static [u8; 19usize] = b"setAttr-T2cleartxt\0";
pub const LN_setAttr_T2cleartxt: &'static [u8; 18usize] = b"cleartext track 2\0";
pub const NID_setAttr_T2cleartxt: i32 = 633;
pub const SN_setAttr_TokICCsig: &'static [u8; 18usize] = b"setAttr-TokICCsig\0";
pub const LN_setAttr_TokICCsig: &'static [u8; 23usize] = b"ICC or token signature\0";
pub const NID_setAttr_TokICCsig: i32 = 634;
pub const SN_setAttr_SecDevSig: &'static [u8; 18usize] = b"setAttr-SecDevSig\0";
pub const LN_setAttr_SecDevSig: &'static [u8; 24usize] = b"secure device signature\0";
pub const NID_setAttr_SecDevSig: i32 = 635;
pub const SN_set_brand_IATA_ATA: &'static [u8; 19usize] = b"set-brand-IATA-ATA\0";
pub const NID_set_brand_IATA_ATA: i32 = 636;
pub const SN_set_brand_Diners: &'static [u8; 17usize] = b"set-brand-Diners\0";
pub const NID_set_brand_Diners: i32 = 637;
pub const SN_set_brand_AmericanExpress: &'static [u8; 26usize] = b"set-brand-AmericanExpress\0";
pub const NID_set_brand_AmericanExpress: i32 = 638;
pub const SN_set_brand_JCB: &'static [u8; 14usize] = b"set-brand-JCB\0";
pub const NID_set_brand_JCB: i32 = 639;
pub const SN_set_brand_Visa: &'static [u8; 15usize] = b"set-brand-Visa\0";
pub const NID_set_brand_Visa: i32 = 640;
pub const SN_set_brand_MasterCard: &'static [u8; 21usize] = b"set-brand-MasterCard\0";
pub const NID_set_brand_MasterCard: i32 = 641;
pub const SN_set_brand_Novus: &'static [u8; 16usize] = b"set-brand-Novus\0";
pub const NID_set_brand_Novus: i32 = 642;
pub const SN_des_cdmf: &'static [u8; 9usize] = b"DES-CDMF\0";
pub const LN_des_cdmf: &'static [u8; 9usize] = b"des-cdmf\0";
pub const NID_des_cdmf: i32 = 643;
pub const SN_rsaOAEPEncryptionSET: &'static [u8; 21usize] = b"rsaOAEPEncryptionSET\0";
pub const NID_rsaOAEPEncryptionSET: i32 = 644;
pub const SN_itu_t: &'static [u8; 6usize] = b"ITU-T\0";
pub const LN_itu_t: &'static [u8; 6usize] = b"itu-t\0";
pub const NID_itu_t: i32 = 645;
pub const OBJ_itu_t: i32 = 0;
pub const SN_joint_iso_itu_t: &'static [u8; 16usize] = b"JOINT-ISO-ITU-T\0";
pub const LN_joint_iso_itu_t: &'static [u8; 16usize] = b"joint-iso-itu-t\0";
pub const NID_joint_iso_itu_t: i32 = 646;
pub const OBJ_joint_iso_itu_t: i32 = 2;
pub const SN_international_organizations: &'static [u8; 28usize] = b"international-organizations\0";
pub const LN_international_organizations: &'static [u8; 28usize] = b"International Organizations\0";
pub const NID_international_organizations: i32 = 647;
pub const SN_ms_smartcard_login: &'static [u8; 17usize] = b"msSmartcardLogin\0";
pub const LN_ms_smartcard_login: &'static [u8; 25usize] = b"Microsoft Smartcardlogin\0";
pub const NID_ms_smartcard_login: i32 = 648;
pub const SN_ms_upn: &'static [u8; 6usize] = b"msUPN\0";
pub const LN_ms_upn: &'static [u8; 35usize] = b"Microsoft Universal Principal Name\0";
pub const NID_ms_upn: i32 = 649;
pub const SN_aes_128_cfb1: &'static [u8; 13usize] = b"AES-128-CFB1\0";
pub const LN_aes_128_cfb1: &'static [u8; 13usize] = b"aes-128-cfb1\0";
pub const NID_aes_128_cfb1: i32 = 650;
pub const SN_aes_192_cfb1: &'static [u8; 13usize] = b"AES-192-CFB1\0";
pub const LN_aes_192_cfb1: &'static [u8; 13usize] = b"aes-192-cfb1\0";
pub const NID_aes_192_cfb1: i32 = 651;
pub const SN_aes_256_cfb1: &'static [u8; 13usize] = b"AES-256-CFB1\0";
pub const LN_aes_256_cfb1: &'static [u8; 13usize] = b"aes-256-cfb1\0";
pub const NID_aes_256_cfb1: i32 = 652;
pub const SN_aes_128_cfb8: &'static [u8; 13usize] = b"AES-128-CFB8\0";
pub const LN_aes_128_cfb8: &'static [u8; 13usize] = b"aes-128-cfb8\0";
pub const NID_aes_128_cfb8: i32 = 653;
pub const SN_aes_192_cfb8: &'static [u8; 13usize] = b"AES-192-CFB8\0";
pub const LN_aes_192_cfb8: &'static [u8; 13usize] = b"aes-192-cfb8\0";
pub const NID_aes_192_cfb8: i32 = 654;
pub const SN_aes_256_cfb8: &'static [u8; 13usize] = b"AES-256-CFB8\0";
pub const LN_aes_256_cfb8: &'static [u8; 13usize] = b"aes-256-cfb8\0";
pub const NID_aes_256_cfb8: i32 = 655;
pub const SN_des_cfb1: &'static [u8; 9usize] = b"DES-CFB1\0";
pub const LN_des_cfb1: &'static [u8; 9usize] = b"des-cfb1\0";
pub const NID_des_cfb1: i32 = 656;
pub const SN_des_cfb8: &'static [u8; 9usize] = b"DES-CFB8\0";
pub const LN_des_cfb8: &'static [u8; 9usize] = b"des-cfb8\0";
pub const NID_des_cfb8: i32 = 657;
pub const SN_des_ede3_cfb1: &'static [u8; 14usize] = b"DES-EDE3-CFB1\0";
pub const LN_des_ede3_cfb1: &'static [u8; 14usize] = b"des-ede3-cfb1\0";
pub const NID_des_ede3_cfb1: i32 = 658;
pub const SN_des_ede3_cfb8: &'static [u8; 14usize] = b"DES-EDE3-CFB8\0";
pub const LN_des_ede3_cfb8: &'static [u8; 14usize] = b"des-ede3-cfb8\0";
pub const NID_des_ede3_cfb8: i32 = 659;
pub const SN_streetAddress: &'static [u8; 7usize] = b"street\0";
pub const LN_streetAddress: &'static [u8; 14usize] = b"streetAddress\0";
pub const NID_streetAddress: i32 = 660;
pub const LN_postalCode: &'static [u8; 11usize] = b"postalCode\0";
pub const NID_postalCode: i32 = 661;
pub const SN_id_ppl: &'static [u8; 7usize] = b"id-ppl\0";
pub const NID_id_ppl: i32 = 662;
pub const SN_proxyCertInfo: &'static [u8; 14usize] = b"proxyCertInfo\0";
pub const LN_proxyCertInfo: &'static [u8; 30usize] = b"Proxy Certificate Information\0";
pub const NID_proxyCertInfo: i32 = 663;
pub const SN_id_ppl_anyLanguage: &'static [u8; 19usize] = b"id-ppl-anyLanguage\0";
pub const LN_id_ppl_anyLanguage: &'static [u8; 13usize] = b"Any language\0";
pub const NID_id_ppl_anyLanguage: i32 = 664;
pub const SN_id_ppl_inheritAll: &'static [u8; 18usize] = b"id-ppl-inheritAll\0";
pub const LN_id_ppl_inheritAll: &'static [u8; 12usize] = b"Inherit all\0";
pub const NID_id_ppl_inheritAll: i32 = 665;
pub const SN_name_constraints: &'static [u8; 16usize] = b"nameConstraints\0";
pub const LN_name_constraints: &'static [u8; 24usize] = b"X509v3 Name Constraints\0";
pub const NID_name_constraints: i32 = 666;
pub const SN_Independent: &'static [u8; 19usize] = b"id-ppl-independent\0";
pub const LN_Independent: &'static [u8; 12usize] = b"Independent\0";
pub const NID_Independent: i32 = 667;
pub const SN_sha256WithRSAEncryption: &'static [u8; 11usize] = b"RSA-SHA256\0";
pub const LN_sha256WithRSAEncryption: &'static [u8; 24usize] = b"sha256WithRSAEncryption\0";
pub const NID_sha256WithRSAEncryption: i32 = 668;
pub const SN_sha384WithRSAEncryption: &'static [u8; 11usize] = b"RSA-SHA384\0";
pub const LN_sha384WithRSAEncryption: &'static [u8; 24usize] = b"sha384WithRSAEncryption\0";
pub const NID_sha384WithRSAEncryption: i32 = 669;
pub const SN_sha512WithRSAEncryption: &'static [u8; 11usize] = b"RSA-SHA512\0";
pub const LN_sha512WithRSAEncryption: &'static [u8; 24usize] = b"sha512WithRSAEncryption\0";
pub const NID_sha512WithRSAEncryption: i32 = 670;
pub const SN_sha224WithRSAEncryption: &'static [u8; 11usize] = b"RSA-SHA224\0";
pub const LN_sha224WithRSAEncryption: &'static [u8; 24usize] = b"sha224WithRSAEncryption\0";
pub const NID_sha224WithRSAEncryption: i32 = 671;
pub const SN_sha256: &'static [u8; 7usize] = b"SHA256\0";
pub const LN_sha256: &'static [u8; 7usize] = b"sha256\0";
pub const NID_sha256: i32 = 672;
pub const SN_sha384: &'static [u8; 7usize] = b"SHA384\0";
pub const LN_sha384: &'static [u8; 7usize] = b"sha384\0";
pub const NID_sha384: i32 = 673;
pub const SN_sha512: &'static [u8; 7usize] = b"SHA512\0";
pub const LN_sha512: &'static [u8; 7usize] = b"sha512\0";
pub const NID_sha512: i32 = 674;
pub const SN_sha224: &'static [u8; 7usize] = b"SHA224\0";
pub const LN_sha224: &'static [u8; 7usize] = b"sha224\0";
pub const NID_sha224: i32 = 675;
pub const SN_identified_organization: &'static [u8; 24usize] = b"identified-organization\0";
pub const NID_identified_organization: i32 = 676;
pub const SN_certicom_arc: &'static [u8; 13usize] = b"certicom-arc\0";
pub const NID_certicom_arc: i32 = 677;
pub const SN_wap: &'static [u8; 4usize] = b"wap\0";
pub const NID_wap: i32 = 678;
pub const SN_wap_wsg: &'static [u8; 8usize] = b"wap-wsg\0";
pub const NID_wap_wsg: i32 = 679;
pub const SN_X9_62_id_characteristic_two_basis: &'static [u8; 28usize] =
    b"id-characteristic-two-basis\0";
pub const NID_X9_62_id_characteristic_two_basis: i32 = 680;
pub const SN_X9_62_onBasis: &'static [u8; 8usize] = b"onBasis\0";
pub const NID_X9_62_onBasis: i32 = 681;
pub const SN_X9_62_tpBasis: &'static [u8; 8usize] = b"tpBasis\0";
pub const NID_X9_62_tpBasis: i32 = 682;
pub const SN_X9_62_ppBasis: &'static [u8; 8usize] = b"ppBasis\0";
pub const NID_X9_62_ppBasis: i32 = 683;
pub const SN_X9_62_c2pnb163v1: &'static [u8; 11usize] = b"c2pnb163v1\0";
pub const NID_X9_62_c2pnb163v1: i32 = 684;
pub const SN_X9_62_c2pnb163v2: &'static [u8; 11usize] = b"c2pnb163v2\0";
pub const NID_X9_62_c2pnb163v2: i32 = 685;
pub const SN_X9_62_c2pnb163v3: &'static [u8; 11usize] = b"c2pnb163v3\0";
pub const NID_X9_62_c2pnb163v3: i32 = 686;
pub const SN_X9_62_c2pnb176v1: &'static [u8; 11usize] = b"c2pnb176v1\0";
pub const NID_X9_62_c2pnb176v1: i32 = 687;
pub const SN_X9_62_c2tnb191v1: &'static [u8; 11usize] = b"c2tnb191v1\0";
pub const NID_X9_62_c2tnb191v1: i32 = 688;
pub const SN_X9_62_c2tnb191v2: &'static [u8; 11usize] = b"c2tnb191v2\0";
pub const NID_X9_62_c2tnb191v2: i32 = 689;
pub const SN_X9_62_c2tnb191v3: &'static [u8; 11usize] = b"c2tnb191v3\0";
pub const NID_X9_62_c2tnb191v3: i32 = 690;
pub const SN_X9_62_c2onb191v4: &'static [u8; 11usize] = b"c2onb191v4\0";
pub const NID_X9_62_c2onb191v4: i32 = 691;
pub const SN_X9_62_c2onb191v5: &'static [u8; 11usize] = b"c2onb191v5\0";
pub const NID_X9_62_c2onb191v5: i32 = 692;
pub const SN_X9_62_c2pnb208w1: &'static [u8; 11usize] = b"c2pnb208w1\0";
pub const NID_X9_62_c2pnb208w1: i32 = 693;
pub const SN_X9_62_c2tnb239v1: &'static [u8; 11usize] = b"c2tnb239v1\0";
pub const NID_X9_62_c2tnb239v1: i32 = 694;
pub const SN_X9_62_c2tnb239v2: &'static [u8; 11usize] = b"c2tnb239v2\0";
pub const NID_X9_62_c2tnb239v2: i32 = 695;
pub const SN_X9_62_c2tnb239v3: &'static [u8; 11usize] = b"c2tnb239v3\0";
pub const NID_X9_62_c2tnb239v3: i32 = 696;
pub const SN_X9_62_c2onb239v4: &'static [u8; 11usize] = b"c2onb239v4\0";
pub const NID_X9_62_c2onb239v4: i32 = 697;
pub const SN_X9_62_c2onb239v5: &'static [u8; 11usize] = b"c2onb239v5\0";
pub const NID_X9_62_c2onb239v5: i32 = 698;
pub const SN_X9_62_c2pnb272w1: &'static [u8; 11usize] = b"c2pnb272w1\0";
pub const NID_X9_62_c2pnb272w1: i32 = 699;
pub const SN_X9_62_c2pnb304w1: &'static [u8; 11usize] = b"c2pnb304w1\0";
pub const NID_X9_62_c2pnb304w1: i32 = 700;
pub const SN_X9_62_c2tnb359v1: &'static [u8; 11usize] = b"c2tnb359v1\0";
pub const NID_X9_62_c2tnb359v1: i32 = 701;
pub const SN_X9_62_c2pnb368w1: &'static [u8; 11usize] = b"c2pnb368w1\0";
pub const NID_X9_62_c2pnb368w1: i32 = 702;
pub const SN_X9_62_c2tnb431r1: &'static [u8; 11usize] = b"c2tnb431r1\0";
pub const NID_X9_62_c2tnb431r1: i32 = 703;
pub const SN_secp112r1: &'static [u8; 10usize] = b"secp112r1\0";
pub const NID_secp112r1: i32 = 704;
pub const SN_secp112r2: &'static [u8; 10usize] = b"secp112r2\0";
pub const NID_secp112r2: i32 = 705;
pub const SN_secp128r1: &'static [u8; 10usize] = b"secp128r1\0";
pub const NID_secp128r1: i32 = 706;
pub const SN_secp128r2: &'static [u8; 10usize] = b"secp128r2\0";
pub const NID_secp128r2: i32 = 707;
pub const SN_secp160k1: &'static [u8; 10usize] = b"secp160k1\0";
pub const NID_secp160k1: i32 = 708;
pub const SN_secp160r1: &'static [u8; 10usize] = b"secp160r1\0";
pub const NID_secp160r1: i32 = 709;
pub const SN_secp160r2: &'static [u8; 10usize] = b"secp160r2\0";
pub const NID_secp160r2: i32 = 710;
pub const SN_secp192k1: &'static [u8; 10usize] = b"secp192k1\0";
pub const NID_secp192k1: i32 = 711;
pub const SN_secp224k1: &'static [u8; 10usize] = b"secp224k1\0";
pub const NID_secp224k1: i32 = 712;
pub const SN_secp224r1: &'static [u8; 10usize] = b"secp224r1\0";
pub const NID_secp224r1: i32 = 713;
pub const SN_secp256k1: &'static [u8; 10usize] = b"secp256k1\0";
pub const NID_secp256k1: i32 = 714;
pub const SN_secp384r1: &'static [u8; 10usize] = b"secp384r1\0";
pub const NID_secp384r1: i32 = 715;
pub const SN_secp521r1: &'static [u8; 10usize] = b"secp521r1\0";
pub const NID_secp521r1: i32 = 716;
pub const SN_sect113r1: &'static [u8; 10usize] = b"sect113r1\0";
pub const NID_sect113r1: i32 = 717;
pub const SN_sect113r2: &'static [u8; 10usize] = b"sect113r2\0";
pub const NID_sect113r2: i32 = 718;
pub const SN_sect131r1: &'static [u8; 10usize] = b"sect131r1\0";
pub const NID_sect131r1: i32 = 719;
pub const SN_sect131r2: &'static [u8; 10usize] = b"sect131r2\0";
pub const NID_sect131r2: i32 = 720;
pub const SN_sect163k1: &'static [u8; 10usize] = b"sect163k1\0";
pub const NID_sect163k1: i32 = 721;
pub const SN_sect163r1: &'static [u8; 10usize] = b"sect163r1\0";
pub const NID_sect163r1: i32 = 722;
pub const SN_sect163r2: &'static [u8; 10usize] = b"sect163r2\0";
pub const NID_sect163r2: i32 = 723;
pub const SN_sect193r1: &'static [u8; 10usize] = b"sect193r1\0";
pub const NID_sect193r1: i32 = 724;
pub const SN_sect193r2: &'static [u8; 10usize] = b"sect193r2\0";
pub const NID_sect193r2: i32 = 725;
pub const SN_sect233k1: &'static [u8; 10usize] = b"sect233k1\0";
pub const NID_sect233k1: i32 = 726;
pub const SN_sect233r1: &'static [u8; 10usize] = b"sect233r1\0";
pub const NID_sect233r1: i32 = 727;
pub const SN_sect239k1: &'static [u8; 10usize] = b"sect239k1\0";
pub const NID_sect239k1: i32 = 728;
pub const SN_sect283k1: &'static [u8; 10usize] = b"sect283k1\0";
pub const NID_sect283k1: i32 = 729;
pub const SN_sect283r1: &'static [u8; 10usize] = b"sect283r1\0";
pub const NID_sect283r1: i32 = 730;
pub const SN_sect409k1: &'static [u8; 10usize] = b"sect409k1\0";
pub const NID_sect409k1: i32 = 731;
pub const SN_sect409r1: &'static [u8; 10usize] = b"sect409r1\0";
pub const NID_sect409r1: i32 = 732;
pub const SN_sect571k1: &'static [u8; 10usize] = b"sect571k1\0";
pub const NID_sect571k1: i32 = 733;
pub const SN_sect571r1: &'static [u8; 10usize] = b"sect571r1\0";
pub const NID_sect571r1: i32 = 734;
pub const SN_wap_wsg_idm_ecid_wtls1: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls1\0";
pub const NID_wap_wsg_idm_ecid_wtls1: i32 = 735;
pub const SN_wap_wsg_idm_ecid_wtls3: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls3\0";
pub const NID_wap_wsg_idm_ecid_wtls3: i32 = 736;
pub const SN_wap_wsg_idm_ecid_wtls4: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls4\0";
pub const NID_wap_wsg_idm_ecid_wtls4: i32 = 737;
pub const SN_wap_wsg_idm_ecid_wtls5: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls5\0";
pub const NID_wap_wsg_idm_ecid_wtls5: i32 = 738;
pub const SN_wap_wsg_idm_ecid_wtls6: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls6\0";
pub const NID_wap_wsg_idm_ecid_wtls6: i32 = 739;
pub const SN_wap_wsg_idm_ecid_wtls7: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls7\0";
pub const NID_wap_wsg_idm_ecid_wtls7: i32 = 740;
pub const SN_wap_wsg_idm_ecid_wtls8: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls8\0";
pub const NID_wap_wsg_idm_ecid_wtls8: i32 = 741;
pub const SN_wap_wsg_idm_ecid_wtls9: &'static [u8; 23usize] = b"wap-wsg-idm-ecid-wtls9\0";
pub const NID_wap_wsg_idm_ecid_wtls9: i32 = 742;
pub const SN_wap_wsg_idm_ecid_wtls10: &'static [u8; 24usize] = b"wap-wsg-idm-ecid-wtls10\0";
pub const NID_wap_wsg_idm_ecid_wtls10: i32 = 743;
pub const SN_wap_wsg_idm_ecid_wtls11: &'static [u8; 24usize] = b"wap-wsg-idm-ecid-wtls11\0";
pub const NID_wap_wsg_idm_ecid_wtls11: i32 = 744;
pub const SN_wap_wsg_idm_ecid_wtls12: &'static [u8; 24usize] = b"wap-wsg-idm-ecid-wtls12\0";
pub const NID_wap_wsg_idm_ecid_wtls12: i32 = 745;
pub const SN_any_policy: &'static [u8; 10usize] = b"anyPolicy\0";
pub const LN_any_policy: &'static [u8; 18usize] = b"X509v3 Any Policy\0";
pub const NID_any_policy: i32 = 746;
pub const SN_policy_mappings: &'static [u8; 15usize] = b"policyMappings\0";
pub const LN_policy_mappings: &'static [u8; 23usize] = b"X509v3 Policy Mappings\0";
pub const NID_policy_mappings: i32 = 747;
pub const SN_inhibit_any_policy: &'static [u8; 17usize] = b"inhibitAnyPolicy\0";
pub const LN_inhibit_any_policy: &'static [u8; 26usize] = b"X509v3 Inhibit Any Policy\0";
pub const NID_inhibit_any_policy: i32 = 748;
pub const SN_ipsec3: &'static [u8; 14usize] = b"Oakley-EC2N-3\0";
pub const LN_ipsec3: &'static [u8; 7usize] = b"ipsec3\0";
pub const NID_ipsec3: i32 = 749;
pub const SN_ipsec4: &'static [u8; 14usize] = b"Oakley-EC2N-4\0";
pub const LN_ipsec4: &'static [u8; 7usize] = b"ipsec4\0";
pub const NID_ipsec4: i32 = 750;
pub const SN_camellia_128_cbc: &'static [u8; 17usize] = b"CAMELLIA-128-CBC\0";
pub const LN_camellia_128_cbc: &'static [u8; 17usize] = b"camellia-128-cbc\0";
pub const NID_camellia_128_cbc: i32 = 751;
pub const SN_camellia_192_cbc: &'static [u8; 17usize] = b"CAMELLIA-192-CBC\0";
pub const LN_camellia_192_cbc: &'static [u8; 17usize] = b"camellia-192-cbc\0";
pub const NID_camellia_192_cbc: i32 = 752;
pub const SN_camellia_256_cbc: &'static [u8; 17usize] = b"CAMELLIA-256-CBC\0";
pub const LN_camellia_256_cbc: &'static [u8; 17usize] = b"camellia-256-cbc\0";
pub const NID_camellia_256_cbc: i32 = 753;
pub const SN_camellia_128_ecb: &'static [u8; 17usize] = b"CAMELLIA-128-ECB\0";
pub const LN_camellia_128_ecb: &'static [u8; 17usize] = b"camellia-128-ecb\0";
pub const NID_camellia_128_ecb: i32 = 754;
pub const SN_camellia_192_ecb: &'static [u8; 17usize] = b"CAMELLIA-192-ECB\0";
pub const LN_camellia_192_ecb: &'static [u8; 17usize] = b"camellia-192-ecb\0";
pub const NID_camellia_192_ecb: i32 = 755;
pub const SN_camellia_256_ecb: &'static [u8; 17usize] = b"CAMELLIA-256-ECB\0";
pub const LN_camellia_256_ecb: &'static [u8; 17usize] = b"camellia-256-ecb\0";
pub const NID_camellia_256_ecb: i32 = 756;
pub const SN_camellia_128_cfb128: &'static [u8; 17usize] = b"CAMELLIA-128-CFB\0";
pub const LN_camellia_128_cfb128: &'static [u8; 17usize] = b"camellia-128-cfb\0";
pub const NID_camellia_128_cfb128: i32 = 757;
pub const SN_camellia_192_cfb128: &'static [u8; 17usize] = b"CAMELLIA-192-CFB\0";
pub const LN_camellia_192_cfb128: &'static [u8; 17usize] = b"camellia-192-cfb\0";
pub const NID_camellia_192_cfb128: i32 = 758;
pub const SN_camellia_256_cfb128: &'static [u8; 17usize] = b"CAMELLIA-256-CFB\0";
pub const LN_camellia_256_cfb128: &'static [u8; 17usize] = b"camellia-256-cfb\0";
pub const NID_camellia_256_cfb128: i32 = 759;
pub const SN_camellia_128_cfb1: &'static [u8; 18usize] = b"CAMELLIA-128-CFB1\0";
pub const LN_camellia_128_cfb1: &'static [u8; 18usize] = b"camellia-128-cfb1\0";
pub const NID_camellia_128_cfb1: i32 = 760;
pub const SN_camellia_192_cfb1: &'static [u8; 18usize] = b"CAMELLIA-192-CFB1\0";
pub const LN_camellia_192_cfb1: &'static [u8; 18usize] = b"camellia-192-cfb1\0";
pub const NID_camellia_192_cfb1: i32 = 761;
pub const SN_camellia_256_cfb1: &'static [u8; 18usize] = b"CAMELLIA-256-CFB1\0";
pub const LN_camellia_256_cfb1: &'static [u8; 18usize] = b"camellia-256-cfb1\0";
pub const NID_camellia_256_cfb1: i32 = 762;
pub const SN_camellia_128_cfb8: &'static [u8; 18usize] = b"CAMELLIA-128-CFB8\0";
pub const LN_camellia_128_cfb8: &'static [u8; 18usize] = b"camellia-128-cfb8\0";
pub const NID_camellia_128_cfb8: i32 = 763;
pub const SN_camellia_192_cfb8: &'static [u8; 18usize] = b"CAMELLIA-192-CFB8\0";
pub const LN_camellia_192_cfb8: &'static [u8; 18usize] = b"camellia-192-cfb8\0";
pub const NID_camellia_192_cfb8: i32 = 764;
pub const SN_camellia_256_cfb8: &'static [u8; 18usize] = b"CAMELLIA-256-CFB8\0";
pub const LN_camellia_256_cfb8: &'static [u8; 18usize] = b"camellia-256-cfb8\0";
pub const NID_camellia_256_cfb8: i32 = 765;
pub const SN_camellia_128_ofb128: &'static [u8; 17usize] = b"CAMELLIA-128-OFB\0";
pub const LN_camellia_128_ofb128: &'static [u8; 17usize] = b"camellia-128-ofb\0";
pub const NID_camellia_128_ofb128: i32 = 766;
pub const SN_camellia_192_ofb128: &'static [u8; 17usize] = b"CAMELLIA-192-OFB\0";
pub const LN_camellia_192_ofb128: &'static [u8; 17usize] = b"camellia-192-ofb\0";
pub const NID_camellia_192_ofb128: i32 = 767;
pub const SN_camellia_256_ofb128: &'static [u8; 17usize] = b"CAMELLIA-256-OFB\0";
pub const LN_camellia_256_ofb128: &'static [u8; 17usize] = b"camellia-256-ofb\0";
pub const NID_camellia_256_ofb128: i32 = 768;
pub const SN_subject_directory_attributes: &'static [u8; 27usize] = b"subjectDirectoryAttributes\0";
pub const LN_subject_directory_attributes: &'static [u8; 36usize] =
    b"X509v3 Subject Directory Attributes\0";
pub const NID_subject_directory_attributes: i32 = 769;
pub const SN_issuing_distribution_point: &'static [u8; 25usize] = b"issuingDistributionPoint\0";
pub const LN_issuing_distribution_point: &'static [u8; 34usize] =
    b"X509v3 Issuing Distribution Point\0";
pub const NID_issuing_distribution_point: i32 = 770;
pub const SN_certificate_issuer: &'static [u8; 18usize] = b"certificateIssuer\0";
pub const LN_certificate_issuer: &'static [u8; 26usize] = b"X509v3 Certificate Issuer\0";
pub const NID_certificate_issuer: i32 = 771;
pub const SN_kisa: &'static [u8; 5usize] = b"KISA\0";
pub const LN_kisa: &'static [u8; 5usize] = b"kisa\0";
pub const NID_kisa: i32 = 773;
pub const SN_seed_ecb: &'static [u8; 9usize] = b"SEED-ECB\0";
pub const LN_seed_ecb: &'static [u8; 9usize] = b"seed-ecb\0";
pub const NID_seed_ecb: i32 = 776;
pub const SN_seed_cbc: &'static [u8; 9usize] = b"SEED-CBC\0";
pub const LN_seed_cbc: &'static [u8; 9usize] = b"seed-cbc\0";
pub const NID_seed_cbc: i32 = 777;
pub const SN_seed_ofb128: &'static [u8; 9usize] = b"SEED-OFB\0";
pub const LN_seed_ofb128: &'static [u8; 9usize] = b"seed-ofb\0";
pub const NID_seed_ofb128: i32 = 778;
pub const SN_seed_cfb128: &'static [u8; 9usize] = b"SEED-CFB\0";
pub const LN_seed_cfb128: &'static [u8; 9usize] = b"seed-cfb\0";
pub const NID_seed_cfb128: i32 = 779;
pub const SN_hmac_md5: &'static [u8; 9usize] = b"HMAC-MD5\0";
pub const LN_hmac_md5: &'static [u8; 9usize] = b"hmac-md5\0";
pub const NID_hmac_md5: i32 = 780;
pub const SN_hmac_sha1: &'static [u8; 10usize] = b"HMAC-SHA1\0";
pub const LN_hmac_sha1: &'static [u8; 10usize] = b"hmac-sha1\0";
pub const NID_hmac_sha1: i32 = 781;
pub const SN_id_PasswordBasedMAC: &'static [u8; 20usize] = b"id-PasswordBasedMAC\0";
pub const LN_id_PasswordBasedMAC: &'static [u8; 19usize] = b"password based MAC\0";
pub const NID_id_PasswordBasedMAC: i32 = 782;
pub const SN_id_DHBasedMac: &'static [u8; 14usize] = b"id-DHBasedMac\0";
pub const LN_id_DHBasedMac: &'static [u8; 25usize] = b"Diffie-Hellman based MAC\0";
pub const NID_id_DHBasedMac: i32 = 783;
pub const SN_id_it_suppLangTags: &'static [u8; 19usize] = b"id-it-suppLangTags\0";
pub const NID_id_it_suppLangTags: i32 = 784;
pub const SN_caRepository: &'static [u8; 13usize] = b"caRepository\0";
pub const LN_caRepository: &'static [u8; 14usize] = b"CA Repository\0";
pub const NID_caRepository: i32 = 785;
pub const SN_id_smime_ct_compressedData: &'static [u8; 27usize] = b"id-smime-ct-compressedData\0";
pub const NID_id_smime_ct_compressedData: i32 = 786;
pub const SN_id_ct_asciiTextWithCRLF: &'static [u8; 24usize] = b"id-ct-asciiTextWithCRLF\0";
pub const NID_id_ct_asciiTextWithCRLF: i32 = 787;
pub const SN_id_aes128_wrap: &'static [u8; 15usize] = b"id-aes128-wrap\0";
pub const NID_id_aes128_wrap: i32 = 788;
pub const SN_id_aes192_wrap: &'static [u8; 15usize] = b"id-aes192-wrap\0";
pub const NID_id_aes192_wrap: i32 = 789;
pub const SN_id_aes256_wrap: &'static [u8; 15usize] = b"id-aes256-wrap\0";
pub const NID_id_aes256_wrap: i32 = 790;
pub const SN_ecdsa_with_Recommended: &'static [u8; 23usize] = b"ecdsa-with-Recommended\0";
pub const NID_ecdsa_with_Recommended: i32 = 791;
pub const SN_ecdsa_with_Specified: &'static [u8; 21usize] = b"ecdsa-with-Specified\0";
pub const NID_ecdsa_with_Specified: i32 = 792;
pub const SN_ecdsa_with_SHA224: &'static [u8; 18usize] = b"ecdsa-with-SHA224\0";
pub const NID_ecdsa_with_SHA224: i32 = 793;
pub const SN_ecdsa_with_SHA256: &'static [u8; 18usize] = b"ecdsa-with-SHA256\0";
pub const NID_ecdsa_with_SHA256: i32 = 794;
pub const SN_ecdsa_with_SHA384: &'static [u8; 18usize] = b"ecdsa-with-SHA384\0";
pub const NID_ecdsa_with_SHA384: i32 = 795;
pub const SN_ecdsa_with_SHA512: &'static [u8; 18usize] = b"ecdsa-with-SHA512\0";
pub const NID_ecdsa_with_SHA512: i32 = 796;
pub const LN_hmacWithMD5: &'static [u8; 12usize] = b"hmacWithMD5\0";
pub const NID_hmacWithMD5: i32 = 797;
pub const LN_hmacWithSHA224: &'static [u8; 15usize] = b"hmacWithSHA224\0";
pub const NID_hmacWithSHA224: i32 = 798;
pub const LN_hmacWithSHA256: &'static [u8; 15usize] = b"hmacWithSHA256\0";
pub const NID_hmacWithSHA256: i32 = 799;
pub const LN_hmacWithSHA384: &'static [u8; 15usize] = b"hmacWithSHA384\0";
pub const NID_hmacWithSHA384: i32 = 800;
pub const LN_hmacWithSHA512: &'static [u8; 15usize] = b"hmacWithSHA512\0";
pub const NID_hmacWithSHA512: i32 = 801;
pub const SN_dsa_with_SHA224: &'static [u8; 16usize] = b"dsa_with_SHA224\0";
pub const NID_dsa_with_SHA224: i32 = 802;
pub const SN_dsa_with_SHA256: &'static [u8; 16usize] = b"dsa_with_SHA256\0";
pub const NID_dsa_with_SHA256: i32 = 803;
pub const SN_whirlpool: &'static [u8; 10usize] = b"whirlpool\0";
pub const NID_whirlpool: i32 = 804;
pub const SN_cryptopro: &'static [u8; 10usize] = b"cryptopro\0";
pub const NID_cryptopro: i32 = 805;
pub const SN_cryptocom: &'static [u8; 10usize] = b"cryptocom\0";
pub const NID_cryptocom: i32 = 806;
pub const SN_id_GostR3411_94_with_GostR3410_2001: &'static [u8; 36usize] =
    b"id-GostR3411-94-with-GostR3410-2001\0";
pub const LN_id_GostR3411_94_with_GostR3410_2001: &'static [u8; 39usize] =
    b"GOST R 34.11-94 with GOST R 34.10-2001\0";
pub const NID_id_GostR3411_94_with_GostR3410_2001: i32 = 807;
pub const SN_id_GostR3411_94_with_GostR3410_94: &'static [u8; 34usize] =
    b"id-GostR3411-94-with-GostR3410-94\0";
pub const LN_id_GostR3411_94_with_GostR3410_94: &'static [u8; 37usize] =
    b"GOST R 34.11-94 with GOST R 34.10-94\0";
pub const NID_id_GostR3411_94_with_GostR3410_94: i32 = 808;
pub const SN_id_GostR3411_94: &'static [u8; 10usize] = b"md_gost94\0";
pub const LN_id_GostR3411_94: &'static [u8; 16usize] = b"GOST R 34.11-94\0";
pub const NID_id_GostR3411_94: i32 = 809;
pub const SN_id_HMACGostR3411_94: &'static [u8; 20usize] = b"id-HMACGostR3411-94\0";
pub const LN_id_HMACGostR3411_94: &'static [u8; 19usize] = b"HMAC GOST 34.11-94\0";
pub const NID_id_HMACGostR3411_94: i32 = 810;
pub const SN_id_GostR3410_2001: &'static [u8; 9usize] = b"gost2001\0";
pub const LN_id_GostR3410_2001: &'static [u8; 18usize] = b"GOST R 34.10-2001\0";
pub const NID_id_GostR3410_2001: i32 = 811;
pub const SN_id_GostR3410_94: &'static [u8; 7usize] = b"gost94\0";
pub const LN_id_GostR3410_94: &'static [u8; 16usize] = b"GOST R 34.10-94\0";
pub const NID_id_GostR3410_94: i32 = 812;
pub const SN_id_Gost28147_89: &'static [u8; 7usize] = b"gost89\0";
pub const LN_id_Gost28147_89: &'static [u8; 14usize] = b"GOST 28147-89\0";
pub const NID_id_Gost28147_89: i32 = 813;
pub const SN_gost89_cnt: &'static [u8; 11usize] = b"gost89-cnt\0";
pub const NID_gost89_cnt: i32 = 814;
pub const SN_id_Gost28147_89_MAC: &'static [u8; 9usize] = b"gost-mac\0";
pub const LN_id_Gost28147_89_MAC: &'static [u8; 18usize] = b"GOST 28147-89 MAC\0";
pub const NID_id_Gost28147_89_MAC: i32 = 815;
pub const SN_id_GostR3411_94_prf: &'static [u8; 17usize] = b"prf-gostr3411-94\0";
pub const LN_id_GostR3411_94_prf: &'static [u8; 20usize] = b"GOST R 34.11-94 PRF\0";
pub const NID_id_GostR3411_94_prf: i32 = 816;
pub const SN_id_GostR3410_2001DH: &'static [u8; 20usize] = b"id-GostR3410-2001DH\0";
pub const LN_id_GostR3410_2001DH: &'static [u8; 21usize] = b"GOST R 34.10-2001 DH\0";
pub const NID_id_GostR3410_2001DH: i32 = 817;
pub const SN_id_GostR3410_94DH: &'static [u8; 18usize] = b"id-GostR3410-94DH\0";
pub const LN_id_GostR3410_94DH: &'static [u8; 19usize] = b"GOST R 34.10-94 DH\0";
pub const NID_id_GostR3410_94DH: i32 = 818;
pub const SN_id_Gost28147_89_CryptoPro_KeyMeshing: &'static [u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-KeyMeshing\0";
pub const NID_id_Gost28147_89_CryptoPro_KeyMeshing: i32 = 819;
pub const SN_id_Gost28147_89_None_KeyMeshing: &'static [u8; 32usize] =
    b"id-Gost28147-89-None-KeyMeshing\0";
pub const NID_id_Gost28147_89_None_KeyMeshing: i32 = 820;
pub const SN_id_GostR3411_94_TestParamSet: &'static [u8; 29usize] =
    b"id-GostR3411-94-TestParamSet\0";
pub const NID_id_GostR3411_94_TestParamSet: i32 = 821;
pub const SN_id_GostR3411_94_CryptoProParamSet: &'static [u8; 34usize] =
    b"id-GostR3411-94-CryptoProParamSet\0";
pub const NID_id_GostR3411_94_CryptoProParamSet: i32 = 822;
pub const SN_id_Gost28147_89_TestParamSet: &'static [u8; 29usize] =
    b"id-Gost28147-89-TestParamSet\0";
pub const NID_id_Gost28147_89_TestParamSet: i32 = 823;
pub const SN_id_Gost28147_89_CryptoPro_A_ParamSet: &'static [u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-A-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_A_ParamSet: i32 = 824;
pub const SN_id_Gost28147_89_CryptoPro_B_ParamSet: &'static [u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-B-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_B_ParamSet: i32 = 825;
pub const SN_id_Gost28147_89_CryptoPro_C_ParamSet: &'static [u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-C-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_C_ParamSet: i32 = 826;
pub const SN_id_Gost28147_89_CryptoPro_D_ParamSet: &'static [u8; 37usize] =
    b"id-Gost28147-89-CryptoPro-D-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_D_ParamSet: i32 = 827;
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: &'static [u8; 45usize] =
    b"id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: i32 = 828;
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: &'static [u8; 45usize] =
    b"id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: i32 = 829;
pub const SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: &'static [u8; 41usize] =
    b"id-Gost28147-89-CryptoPro-RIC-1-ParamSet\0";
pub const NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: i32 = 830;
pub const SN_id_GostR3410_94_TestParamSet: &'static [u8; 29usize] =
    b"id-GostR3410-94-TestParamSet\0";
pub const NID_id_GostR3410_94_TestParamSet: i32 = 831;
pub const SN_id_GostR3410_94_CryptoPro_A_ParamSet: &'static [u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-A-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_A_ParamSet: i32 = 832;
pub const SN_id_GostR3410_94_CryptoPro_B_ParamSet: &'static [u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-B-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_B_ParamSet: i32 = 833;
pub const SN_id_GostR3410_94_CryptoPro_C_ParamSet: &'static [u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-C-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_C_ParamSet: i32 = 834;
pub const SN_id_GostR3410_94_CryptoPro_D_ParamSet: &'static [u8; 37usize] =
    b"id-GostR3410-94-CryptoPro-D-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_D_ParamSet: i32 = 835;
pub const SN_id_GostR3410_94_CryptoPro_XchA_ParamSet: &'static [u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchA-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchA_ParamSet: i32 = 836;
pub const SN_id_GostR3410_94_CryptoPro_XchB_ParamSet: &'static [u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchB-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchB_ParamSet: i32 = 837;
pub const SN_id_GostR3410_94_CryptoPro_XchC_ParamSet: &'static [u8; 40usize] =
    b"id-GostR3410-94-CryptoPro-XchC-ParamSet\0";
pub const NID_id_GostR3410_94_CryptoPro_XchC_ParamSet: i32 = 838;
pub const SN_id_GostR3410_2001_TestParamSet: &'static [u8; 31usize] =
    b"id-GostR3410-2001-TestParamSet\0";
pub const NID_id_GostR3410_2001_TestParamSet: i32 = 839;
pub const SN_id_GostR3410_2001_CryptoPro_A_ParamSet: &'static [u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-A-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_A_ParamSet: i32 = 840;
pub const SN_id_GostR3410_2001_CryptoPro_B_ParamSet: &'static [u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-B-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_B_ParamSet: i32 = 841;
pub const SN_id_GostR3410_2001_CryptoPro_C_ParamSet: &'static [u8; 39usize] =
    b"id-GostR3410-2001-CryptoPro-C-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_C_ParamSet: i32 = 842;
pub const SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet: &'static [u8; 42usize] =
    b"id-GostR3410-2001-CryptoPro-XchA-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet: i32 = 843;
pub const SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet: &'static [u8; 42usize] =
    b"id-GostR3410-2001-CryptoPro-XchB-ParamSet\0";
pub const NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet: i32 = 844;
pub const SN_id_GostR3410_94_a: &'static [u8; 18usize] = b"id-GostR3410-94-a\0";
pub const NID_id_GostR3410_94_a: i32 = 845;
pub const SN_id_GostR3410_94_aBis: &'static [u8; 21usize] = b"id-GostR3410-94-aBis\0";
pub const NID_id_GostR3410_94_aBis: i32 = 846;
pub const SN_id_GostR3410_94_b: &'static [u8; 18usize] = b"id-GostR3410-94-b\0";
pub const NID_id_GostR3410_94_b: i32 = 847;
pub const SN_id_GostR3410_94_bBis: &'static [u8; 21usize] = b"id-GostR3410-94-bBis\0";
pub const NID_id_GostR3410_94_bBis: i32 = 848;
pub const SN_id_Gost28147_89_cc: &'static [u8; 19usize] = b"id-Gost28147-89-cc\0";
pub const LN_id_Gost28147_89_cc: &'static [u8; 33usize] = b"GOST 28147-89 Cryptocom ParamSet\0";
pub const NID_id_Gost28147_89_cc: i32 = 849;
pub const SN_id_GostR3410_94_cc: &'static [u8; 9usize] = b"gost94cc\0";
pub const LN_id_GostR3410_94_cc: &'static [u8; 24usize] = b"GOST 34.10-94 Cryptocom\0";
pub const NID_id_GostR3410_94_cc: i32 = 850;
pub const SN_id_GostR3410_2001_cc: &'static [u8; 11usize] = b"gost2001cc\0";
pub const LN_id_GostR3410_2001_cc: &'static [u8; 26usize] = b"GOST 34.10-2001 Cryptocom\0";
pub const NID_id_GostR3410_2001_cc: i32 = 851;
pub const SN_id_GostR3411_94_with_GostR3410_94_cc: &'static [u8; 37usize] =
    b"id-GostR3411-94-with-GostR3410-94-cc\0";
pub const LN_id_GostR3411_94_with_GostR3410_94_cc: &'static [u8; 47usize] =
    b"GOST R 34.11-94 with GOST R 34.10-94 Cryptocom\0";
pub const NID_id_GostR3411_94_with_GostR3410_94_cc: i32 = 852;
pub const SN_id_GostR3411_94_with_GostR3410_2001_cc: &'static [u8; 39usize] =
    b"id-GostR3411-94-with-GostR3410-2001-cc\0";
pub const LN_id_GostR3411_94_with_GostR3410_2001_cc: &'static [u8; 49usize] =
    b"GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom\0";
pub const NID_id_GostR3411_94_with_GostR3410_2001_cc: i32 = 853;
pub const SN_id_GostR3410_2001_ParamSet_cc: &'static [u8; 30usize] =
    b"id-GostR3410-2001-ParamSet-cc\0";
pub const LN_id_GostR3410_2001_ParamSet_cc: &'static [u8; 41usize] =
    b"GOST R 3410-2001 Parameter Set Cryptocom\0";
pub const NID_id_GostR3410_2001_ParamSet_cc: i32 = 854;
pub const SN_hmac: &'static [u8; 5usize] = b"HMAC\0";
pub const LN_hmac: &'static [u8; 5usize] = b"hmac\0";
pub const NID_hmac: i32 = 855;
pub const SN_LocalKeySet: &'static [u8; 12usize] = b"LocalKeySet\0";
pub const LN_LocalKeySet: &'static [u8; 24usize] = b"Microsoft Local Key set\0";
pub const NID_LocalKeySet: i32 = 856;
pub const SN_freshest_crl: &'static [u8; 12usize] = b"freshestCRL\0";
pub const LN_freshest_crl: &'static [u8; 20usize] = b"X509v3 Freshest CRL\0";
pub const NID_freshest_crl: i32 = 857;
pub const SN_id_on_permanentIdentifier: &'static [u8; 26usize] = b"id-on-permanentIdentifier\0";
pub const LN_id_on_permanentIdentifier: &'static [u8; 21usize] = b"Permanent Identifier\0";
pub const NID_id_on_permanentIdentifier: i32 = 858;
pub const LN_searchGuide: &'static [u8; 12usize] = b"searchGuide\0";
pub const NID_searchGuide: i32 = 859;
pub const LN_businessCategory: &'static [u8; 17usize] = b"businessCategory\0";
pub const NID_businessCategory: i32 = 860;
pub const LN_postalAddress: &'static [u8; 14usize] = b"postalAddress\0";
pub const NID_postalAddress: i32 = 861;
pub const LN_postOfficeBox: &'static [u8; 14usize] = b"postOfficeBox\0";
pub const NID_postOfficeBox: i32 = 862;
pub const LN_physicalDeliveryOfficeName: &'static [u8; 27usize] = b"physicalDeliveryOfficeName\0";
pub const NID_physicalDeliveryOfficeName: i32 = 863;
pub const LN_telephoneNumber: &'static [u8; 16usize] = b"telephoneNumber\0";
pub const NID_telephoneNumber: i32 = 864;
pub const LN_telexNumber: &'static [u8; 12usize] = b"telexNumber\0";
pub const NID_telexNumber: i32 = 865;
pub const LN_teletexTerminalIdentifier: &'static [u8; 26usize] = b"teletexTerminalIdentifier\0";
pub const NID_teletexTerminalIdentifier: i32 = 866;
pub const LN_facsimileTelephoneNumber: &'static [u8; 25usize] = b"facsimileTelephoneNumber\0";
pub const NID_facsimileTelephoneNumber: i32 = 867;
pub const LN_x121Address: &'static [u8; 12usize] = b"x121Address\0";
pub const NID_x121Address: i32 = 868;
pub const LN_internationaliSDNNumber: &'static [u8; 24usize] = b"internationaliSDNNumber\0";
pub const NID_internationaliSDNNumber: i32 = 869;
pub const LN_registeredAddress: &'static [u8; 18usize] = b"registeredAddress\0";
pub const NID_registeredAddress: i32 = 870;
pub const LN_destinationIndicator: &'static [u8; 21usize] = b"destinationIndicator\0";
pub const NID_destinationIndicator: i32 = 871;
pub const LN_preferredDeliveryMethod: &'static [u8; 24usize] = b"preferredDeliveryMethod\0";
pub const NID_preferredDeliveryMethod: i32 = 872;
pub const LN_presentationAddress: &'static [u8; 20usize] = b"presentationAddress\0";
pub const NID_presentationAddress: i32 = 873;
pub const LN_supportedApplicationContext: &'static [u8; 28usize] = b"supportedApplicationContext\0";
pub const NID_supportedApplicationContext: i32 = 874;
pub const SN_member: &'static [u8; 7usize] = b"member\0";
pub const NID_member: i32 = 875;
pub const SN_owner: &'static [u8; 6usize] = b"owner\0";
pub const NID_owner: i32 = 876;
pub const LN_roleOccupant: &'static [u8; 13usize] = b"roleOccupant\0";
pub const NID_roleOccupant: i32 = 877;
pub const SN_seeAlso: &'static [u8; 8usize] = b"seeAlso\0";
pub const NID_seeAlso: i32 = 878;
pub const LN_userPassword: &'static [u8; 13usize] = b"userPassword\0";
pub const NID_userPassword: i32 = 879;
pub const LN_userCertificate: &'static [u8; 16usize] = b"userCertificate\0";
pub const NID_userCertificate: i32 = 880;
pub const LN_cACertificate: &'static [u8; 14usize] = b"cACertificate\0";
pub const NID_cACertificate: i32 = 881;
pub const LN_authorityRevocationList: &'static [u8; 24usize] = b"authorityRevocationList\0";
pub const NID_authorityRevocationList: i32 = 882;
pub const LN_certificateRevocationList: &'static [u8; 26usize] = b"certificateRevocationList\0";
pub const NID_certificateRevocationList: i32 = 883;
pub const LN_crossCertificatePair: &'static [u8; 21usize] = b"crossCertificatePair\0";
pub const NID_crossCertificatePair: i32 = 884;
pub const LN_enhancedSearchGuide: &'static [u8; 20usize] = b"enhancedSearchGuide\0";
pub const NID_enhancedSearchGuide: i32 = 885;
pub const LN_protocolInformation: &'static [u8; 20usize] = b"protocolInformation\0";
pub const NID_protocolInformation: i32 = 886;
pub const LN_distinguishedName: &'static [u8; 18usize] = b"distinguishedName\0";
pub const NID_distinguishedName: i32 = 887;
pub const LN_uniqueMember: &'static [u8; 13usize] = b"uniqueMember\0";
pub const NID_uniqueMember: i32 = 888;
pub const LN_houseIdentifier: &'static [u8; 16usize] = b"houseIdentifier\0";
pub const NID_houseIdentifier: i32 = 889;
pub const LN_supportedAlgorithms: &'static [u8; 20usize] = b"supportedAlgorithms\0";
pub const NID_supportedAlgorithms: i32 = 890;
pub const LN_deltaRevocationList: &'static [u8; 20usize] = b"deltaRevocationList\0";
pub const NID_deltaRevocationList: i32 = 891;
pub const SN_dmdName: &'static [u8; 8usize] = b"dmdName\0";
pub const NID_dmdName: i32 = 892;
pub const SN_id_alg_PWRI_KEK: &'static [u8; 16usize] = b"id-alg-PWRI-KEK\0";
pub const NID_id_alg_PWRI_KEK: i32 = 893;
pub const SN_cmac: &'static [u8; 5usize] = b"CMAC\0";
pub const LN_cmac: &'static [u8; 5usize] = b"cmac\0";
pub const NID_cmac: i32 = 894;
pub const SN_aes_128_gcm: &'static [u8; 14usize] = b"id-aes128-GCM\0";
pub const LN_aes_128_gcm: &'static [u8; 12usize] = b"aes-128-gcm\0";
pub const NID_aes_128_gcm: i32 = 895;
pub const SN_aes_128_ccm: &'static [u8; 14usize] = b"id-aes128-CCM\0";
pub const LN_aes_128_ccm: &'static [u8; 12usize] = b"aes-128-ccm\0";
pub const NID_aes_128_ccm: i32 = 896;
pub const SN_id_aes128_wrap_pad: &'static [u8; 19usize] = b"id-aes128-wrap-pad\0";
pub const NID_id_aes128_wrap_pad: i32 = 897;
pub const SN_aes_192_gcm: &'static [u8; 14usize] = b"id-aes192-GCM\0";
pub const LN_aes_192_gcm: &'static [u8; 12usize] = b"aes-192-gcm\0";
pub const NID_aes_192_gcm: i32 = 898;
pub const SN_aes_192_ccm: &'static [u8; 14usize] = b"id-aes192-CCM\0";
pub const LN_aes_192_ccm: &'static [u8; 12usize] = b"aes-192-ccm\0";
pub const NID_aes_192_ccm: i32 = 899;
pub const SN_id_aes192_wrap_pad: &'static [u8; 19usize] = b"id-aes192-wrap-pad\0";
pub const NID_id_aes192_wrap_pad: i32 = 900;
pub const SN_aes_256_gcm: &'static [u8; 14usize] = b"id-aes256-GCM\0";
pub const LN_aes_256_gcm: &'static [u8; 12usize] = b"aes-256-gcm\0";
pub const NID_aes_256_gcm: i32 = 901;
pub const SN_aes_256_ccm: &'static [u8; 14usize] = b"id-aes256-CCM\0";
pub const LN_aes_256_ccm: &'static [u8; 12usize] = b"aes-256-ccm\0";
pub const NID_aes_256_ccm: i32 = 902;
pub const SN_id_aes256_wrap_pad: &'static [u8; 19usize] = b"id-aes256-wrap-pad\0";
pub const NID_id_aes256_wrap_pad: i32 = 903;
pub const SN_aes_128_ctr: &'static [u8; 12usize] = b"AES-128-CTR\0";
pub const LN_aes_128_ctr: &'static [u8; 12usize] = b"aes-128-ctr\0";
pub const NID_aes_128_ctr: i32 = 904;
pub const SN_aes_192_ctr: &'static [u8; 12usize] = b"AES-192-CTR\0";
pub const LN_aes_192_ctr: &'static [u8; 12usize] = b"aes-192-ctr\0";
pub const NID_aes_192_ctr: i32 = 905;
pub const SN_aes_256_ctr: &'static [u8; 12usize] = b"AES-256-CTR\0";
pub const LN_aes_256_ctr: &'static [u8; 12usize] = b"aes-256-ctr\0";
pub const NID_aes_256_ctr: i32 = 906;
pub const SN_id_camellia128_wrap: &'static [u8; 20usize] = b"id-camellia128-wrap\0";
pub const NID_id_camellia128_wrap: i32 = 907;
pub const SN_id_camellia192_wrap: &'static [u8; 20usize] = b"id-camellia192-wrap\0";
pub const NID_id_camellia192_wrap: i32 = 908;
pub const SN_id_camellia256_wrap: &'static [u8; 20usize] = b"id-camellia256-wrap\0";
pub const NID_id_camellia256_wrap: i32 = 909;
pub const SN_anyExtendedKeyUsage: &'static [u8; 20usize] = b"anyExtendedKeyUsage\0";
pub const LN_anyExtendedKeyUsage: &'static [u8; 23usize] = b"Any Extended Key Usage\0";
pub const NID_anyExtendedKeyUsage: i32 = 910;
pub const SN_mgf1: &'static [u8; 5usize] = b"MGF1\0";
pub const LN_mgf1: &'static [u8; 5usize] = b"mgf1\0";
pub const NID_mgf1: i32 = 911;
pub const SN_rsassaPss: &'static [u8; 11usize] = b"RSASSA-PSS\0";
pub const LN_rsassaPss: &'static [u8; 10usize] = b"rsassaPss\0";
pub const NID_rsassaPss: i32 = 912;
pub const SN_aes_128_xts: &'static [u8; 12usize] = b"AES-128-XTS\0";
pub const LN_aes_128_xts: &'static [u8; 12usize] = b"aes-128-xts\0";
pub const NID_aes_128_xts: i32 = 913;
pub const SN_aes_256_xts: &'static [u8; 12usize] = b"AES-256-XTS\0";
pub const LN_aes_256_xts: &'static [u8; 12usize] = b"aes-256-xts\0";
pub const NID_aes_256_xts: i32 = 914;
pub const SN_rc4_hmac_md5: &'static [u8; 13usize] = b"RC4-HMAC-MD5\0";
pub const LN_rc4_hmac_md5: &'static [u8; 13usize] = b"rc4-hmac-md5\0";
pub const NID_rc4_hmac_md5: i32 = 915;
pub const SN_aes_128_cbc_hmac_sha1: &'static [u8; 22usize] = b"AES-128-CBC-HMAC-SHA1\0";
pub const LN_aes_128_cbc_hmac_sha1: &'static [u8; 22usize] = b"aes-128-cbc-hmac-sha1\0";
pub const NID_aes_128_cbc_hmac_sha1: i32 = 916;
pub const SN_aes_192_cbc_hmac_sha1: &'static [u8; 22usize] = b"AES-192-CBC-HMAC-SHA1\0";
pub const LN_aes_192_cbc_hmac_sha1: &'static [u8; 22usize] = b"aes-192-cbc-hmac-sha1\0";
pub const NID_aes_192_cbc_hmac_sha1: i32 = 917;
pub const SN_aes_256_cbc_hmac_sha1: &'static [u8; 22usize] = b"AES-256-CBC-HMAC-SHA1\0";
pub const LN_aes_256_cbc_hmac_sha1: &'static [u8; 22usize] = b"aes-256-cbc-hmac-sha1\0";
pub const NID_aes_256_cbc_hmac_sha1: i32 = 918;
pub const SN_rsaesOaep: &'static [u8; 11usize] = b"RSAES-OAEP\0";
pub const LN_rsaesOaep: &'static [u8; 10usize] = b"rsaesOaep\0";
pub const NID_rsaesOaep: i32 = 919;
pub const SN_dhpublicnumber: &'static [u8; 15usize] = b"dhpublicnumber\0";
pub const LN_dhpublicnumber: &'static [u8; 9usize] = b"X9.42 DH\0";
pub const NID_dhpublicnumber: i32 = 920;
pub const SN_brainpoolP160r1: &'static [u8; 16usize] = b"brainpoolP160r1\0";
pub const NID_brainpoolP160r1: i32 = 921;
pub const SN_brainpoolP160t1: &'static [u8; 16usize] = b"brainpoolP160t1\0";
pub const NID_brainpoolP160t1: i32 = 922;
pub const SN_brainpoolP192r1: &'static [u8; 16usize] = b"brainpoolP192r1\0";
pub const NID_brainpoolP192r1: i32 = 923;
pub const SN_brainpoolP192t1: &'static [u8; 16usize] = b"brainpoolP192t1\0";
pub const NID_brainpoolP192t1: i32 = 924;
pub const SN_brainpoolP224r1: &'static [u8; 16usize] = b"brainpoolP224r1\0";
pub const NID_brainpoolP224r1: i32 = 925;
pub const SN_brainpoolP224t1: &'static [u8; 16usize] = b"brainpoolP224t1\0";
pub const NID_brainpoolP224t1: i32 = 926;
pub const SN_brainpoolP256r1: &'static [u8; 16usize] = b"brainpoolP256r1\0";
pub const NID_brainpoolP256r1: i32 = 927;
pub const SN_brainpoolP256t1: &'static [u8; 16usize] = b"brainpoolP256t1\0";
pub const NID_brainpoolP256t1: i32 = 928;
pub const SN_brainpoolP320r1: &'static [u8; 16usize] = b"brainpoolP320r1\0";
pub const NID_brainpoolP320r1: i32 = 929;
pub const SN_brainpoolP320t1: &'static [u8; 16usize] = b"brainpoolP320t1\0";
pub const NID_brainpoolP320t1: i32 = 930;
pub const SN_brainpoolP384r1: &'static [u8; 16usize] = b"brainpoolP384r1\0";
pub const NID_brainpoolP384r1: i32 = 931;
pub const SN_brainpoolP384t1: &'static [u8; 16usize] = b"brainpoolP384t1\0";
pub const NID_brainpoolP384t1: i32 = 932;
pub const SN_brainpoolP512r1: &'static [u8; 16usize] = b"brainpoolP512r1\0";
pub const NID_brainpoolP512r1: i32 = 933;
pub const SN_brainpoolP512t1: &'static [u8; 16usize] = b"brainpoolP512t1\0";
pub const NID_brainpoolP512t1: i32 = 934;
pub const SN_pSpecified: &'static [u8; 11usize] = b"PSPECIFIED\0";
pub const LN_pSpecified: &'static [u8; 11usize] = b"pSpecified\0";
pub const NID_pSpecified: i32 = 935;
pub const SN_dhSinglePass_stdDH_sha1kdf_scheme: &'static [u8; 34usize] =
    b"dhSinglePass-stdDH-sha1kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha1kdf_scheme: i32 = 936;
pub const SN_dhSinglePass_stdDH_sha224kdf_scheme: &'static [u8; 36usize] =
    b"dhSinglePass-stdDH-sha224kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha224kdf_scheme: i32 = 937;
pub const SN_dhSinglePass_stdDH_sha256kdf_scheme: &'static [u8; 36usize] =
    b"dhSinglePass-stdDH-sha256kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha256kdf_scheme: i32 = 938;
pub const SN_dhSinglePass_stdDH_sha384kdf_scheme: &'static [u8; 36usize] =
    b"dhSinglePass-stdDH-sha384kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha384kdf_scheme: i32 = 939;
pub const SN_dhSinglePass_stdDH_sha512kdf_scheme: &'static [u8; 36usize] =
    b"dhSinglePass-stdDH-sha512kdf-scheme\0";
pub const NID_dhSinglePass_stdDH_sha512kdf_scheme: i32 = 940;
pub const SN_dhSinglePass_cofactorDH_sha1kdf_scheme: &'static [u8; 39usize] =
    b"dhSinglePass-cofactorDH-sha1kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha1kdf_scheme: i32 = 941;
pub const SN_dhSinglePass_cofactorDH_sha224kdf_scheme: &'static [u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha224kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha224kdf_scheme: i32 = 942;
pub const SN_dhSinglePass_cofactorDH_sha256kdf_scheme: &'static [u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha256kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha256kdf_scheme: i32 = 943;
pub const SN_dhSinglePass_cofactorDH_sha384kdf_scheme: &'static [u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha384kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha384kdf_scheme: i32 = 944;
pub const SN_dhSinglePass_cofactorDH_sha512kdf_scheme: &'static [u8; 41usize] =
    b"dhSinglePass-cofactorDH-sha512kdf-scheme\0";
pub const NID_dhSinglePass_cofactorDH_sha512kdf_scheme: i32 = 945;
pub const SN_dh_std_kdf: &'static [u8; 11usize] = b"dh-std-kdf\0";
pub const NID_dh_std_kdf: i32 = 946;
pub const SN_dh_cofactor_kdf: &'static [u8; 16usize] = b"dh-cofactor-kdf\0";
pub const NID_dh_cofactor_kdf: i32 = 947;
pub const SN_X25519: &'static [u8; 7usize] = b"X25519\0";
pub const NID_X25519: i32 = 948;
pub const SN_ED25519: &'static [u8; 8usize] = b"ED25519\0";
pub const NID_ED25519: i32 = 949;
pub const SN_chacha20_poly1305: &'static [u8; 18usize] = b"ChaCha20-Poly1305\0";
pub const LN_chacha20_poly1305: &'static [u8; 18usize] = b"chacha20-poly1305\0";
pub const NID_chacha20_poly1305: i32 = 950;
pub const SN_kx_rsa: &'static [u8; 6usize] = b"KxRSA\0";
pub const LN_kx_rsa: &'static [u8; 7usize] = b"kx-rsa\0";
pub const NID_kx_rsa: i32 = 951;
pub const SN_kx_ecdhe: &'static [u8; 8usize] = b"KxECDHE\0";
pub const LN_kx_ecdhe: &'static [u8; 9usize] = b"kx-ecdhe\0";
pub const NID_kx_ecdhe: i32 = 952;
pub const SN_kx_psk: &'static [u8; 6usize] = b"KxPSK\0";
pub const LN_kx_psk: &'static [u8; 7usize] = b"kx-psk\0";
pub const NID_kx_psk: i32 = 953;
pub const SN_auth_rsa: &'static [u8; 8usize] = b"AuthRSA\0";
pub const LN_auth_rsa: &'static [u8; 9usize] = b"auth-rsa\0";
pub const NID_auth_rsa: i32 = 954;
pub const SN_auth_ecdsa: &'static [u8; 10usize] = b"AuthECDSA\0";
pub const LN_auth_ecdsa: &'static [u8; 11usize] = b"auth-ecdsa\0";
pub const NID_auth_ecdsa: i32 = 955;
pub const SN_auth_psk: &'static [u8; 8usize] = b"AuthPSK\0";
pub const LN_auth_psk: &'static [u8; 9usize] = b"auth-psk\0";
pub const NID_auth_psk: i32 = 956;
pub const SN_kx_any: &'static [u8; 6usize] = b"KxANY\0";
pub const LN_kx_any: &'static [u8; 7usize] = b"kx-any\0";
pub const NID_kx_any: i32 = 957;
pub const SN_auth_any: &'static [u8; 8usize] = b"AuthANY\0";
pub const LN_auth_any: &'static [u8; 9usize] = b"auth-any\0";
pub const NID_auth_any: i32 = 958;
pub const SN_CECPQ2: &'static [u8; 7usize] = b"CECPQ2\0";
pub const NID_CECPQ2: i32 = 959;
pub const SN_ED448: &'static [u8; 6usize] = b"ED448\0";
pub const NID_ED448: i32 = 960;
pub const SN_X448: &'static [u8; 5usize] = b"X448\0";
pub const NID_X448: i32 = 961;
pub const SN_sha512_256: &'static [u8; 11usize] = b"SHA512-256\0";
pub const LN_sha512_256: &'static [u8; 11usize] = b"sha512-256\0";
pub const NID_sha512_256: i32 = 962;
pub const CBS_ASN1_TAG_SHIFT: i32 = 24;
pub const CBS_ASN1_CONSTRUCTED: i32 = 536870912;
pub const CBS_ASN1_UNIVERSAL: i32 = 0;
pub const CBS_ASN1_APPLICATION: i32 = 1073741824;
pub const CBS_ASN1_CONTEXT_SPECIFIC: i64 = 2147483648;
pub const CBS_ASN1_PRIVATE: i64 = 3221225472;
pub const CBS_ASN1_CLASS_MASK: i64 = 3221225472;
pub const CBS_ASN1_TAG_NUMBER_MASK: i32 = 536870911;
pub const CBS_ASN1_BOOLEAN: i32 = 1;
pub const CBS_ASN1_INTEGER: i32 = 2;
pub const CBS_ASN1_BITSTRING: i32 = 3;
pub const CBS_ASN1_OCTETSTRING: i32 = 4;
pub const CBS_ASN1_NULL: i32 = 5;
pub const CBS_ASN1_OBJECT: i32 = 6;
pub const CBS_ASN1_ENUMERATED: i32 = 10;
pub const CBS_ASN1_UTF8STRING: i32 = 12;
pub const CBS_ASN1_SEQUENCE: i32 = 536870928;
pub const CBS_ASN1_SET: i32 = 536870929;
pub const CBS_ASN1_NUMERICSTRING: i32 = 18;
pub const CBS_ASN1_PRINTABLESTRING: i32 = 19;
pub const CBS_ASN1_T61STRING: i32 = 20;
pub const CBS_ASN1_VIDEOTEXSTRING: i32 = 21;
pub const CBS_ASN1_IA5STRING: i32 = 22;
pub const CBS_ASN1_UTCTIME: i32 = 23;
pub const CBS_ASN1_GENERALIZEDTIME: i32 = 24;
pub const CBS_ASN1_GRAPHICSTRING: i32 = 25;
pub const CBS_ASN1_VISIBLESTRING: i32 = 26;
pub const CBS_ASN1_GENERALSTRING: i32 = 27;
pub const CBS_ASN1_UNIVERSALSTRING: i32 = 28;
pub const CBS_ASN1_BMPSTRING: i32 = 30;
pub const OBJ_NAME_TYPE_MD_METH: i32 = 1;
pub const OBJ_NAME_TYPE_CIPHER_METH: i32 = 2;
pub const OBJ_R_UNKNOWN_NID: i32 = 100;
pub const OBJ_R_INVALID_OID_STRING: i32 = 101;
pub const SHA_CBLOCK: i32 = 64;
pub const SHA_DIGEST_LENGTH: i32 = 20;
pub const SHA224_CBLOCK: i32 = 64;
pub const SHA224_DIGEST_LENGTH: i32 = 28;
pub const SHA256_CBLOCK: i32 = 64;
pub const SHA256_DIGEST_LENGTH: i32 = 32;
pub const SHA384_CBLOCK: i32 = 128;
pub const SHA384_DIGEST_LENGTH: i32 = 48;
pub const SHA512_CBLOCK: i32 = 128;
pub const SHA512_DIGEST_LENGTH: i32 = 64;
pub const SHA512_256_DIGEST_LENGTH: i32 = 32;
pub const _STDLIB_H: i32 = 1;
pub const WNOHANG: i32 = 1;
pub const WUNTRACED: i32 = 2;
pub const WSTOPPED: i32 = 2;
pub const WEXITED: i32 = 4;
pub const WCONTINUED: i32 = 8;
pub const WNOWAIT: i32 = 16777216;
pub const __WNOTHREAD: i32 = 536870912;
pub const __WALL: i32 = 1073741824;
pub const __WCLONE: i64 = 2147483648;
pub const __ENUM_IDTYPE_T: i32 = 1;
pub const __W_CONTINUED: i32 = 65535;
pub const __WCOREFLAG: i32 = 128;
pub const __HAVE_FLOAT128: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: i32 = 0;
pub const __HAVE_FLOAT64X: i32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: i32 = 1;
pub const __HAVE_FLOAT16: i32 = 0;
pub const __HAVE_FLOAT32: i32 = 1;
pub const __HAVE_FLOAT64: i32 = 1;
pub const __HAVE_FLOAT32X: i32 = 1;
pub const __HAVE_FLOAT128X: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: i32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: i32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: i32 = 0;
pub const __ldiv_t_defined: i32 = 1;
pub const __lldiv_t_defined: i32 = 1;
pub const RAND_MAX: i32 = 2147483647;
pub const EXIT_FAILURE: i32 = 1;
pub const EXIT_SUCCESS: i32 = 0;
pub const _ALLOCA_H: i32 = 1;
pub const OPENSSL_VERSION_TEXT: &'static [u8; 38usize] = b"OpenSSL 1.1.1 (compatible; BoringSSL)\0";
pub const OPENSSL_VERSION: i32 = 0;
pub const OPENSSL_CFLAGS: i32 = 1;
pub const OPENSSL_BUILT_ON: i32 = 2;
pub const OPENSSL_PLATFORM: i32 = 3;
pub const OPENSSL_DIR: i32 = 4;
pub const SSLEAY_VERSION: i32 = 0;
pub const SSLEAY_CFLAGS: i32 = 1;
pub const SSLEAY_BUILT_ON: i32 = 2;
pub const SSLEAY_PLATFORM: i32 = 3;
pub const SSLEAY_DIR: i32 = 4;
pub const OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS: i32 = 0;
pub const OPENSSL_INIT_LOAD_CRYPTO_STRINGS: i32 = 0;
pub const OPENSSL_INIT_ADD_ALL_CIPHERS: i32 = 0;
pub const OPENSSL_INIT_ADD_ALL_DIGESTS: i32 = 0;
pub const OPENSSL_INIT_NO_ADD_ALL_CIPHERS: i32 = 0;
pub const OPENSSL_INIT_NO_ADD_ALL_DIGESTS: i32 = 0;
pub const OPENSSL_INIT_LOAD_CONFIG: i32 = 0;
pub const OPENSSL_INIT_NO_LOAD_CONFIG: i32 = 0;
pub const EVP_CIPH_STREAM_CIPHER: i32 = 0;
pub const EVP_CIPH_ECB_MODE: i32 = 1;
pub const EVP_CIPH_CBC_MODE: i32 = 2;
pub const EVP_CIPH_CFB_MODE: i32 = 3;
pub const EVP_CIPH_OFB_MODE: i32 = 4;
pub const EVP_CIPH_CTR_MODE: i32 = 5;
pub const EVP_CIPH_GCM_MODE: i32 = 6;
pub const EVP_CIPH_XTS_MODE: i32 = 7;
pub const EVP_CIPH_VARIABLE_LENGTH: i32 = 64;
pub const EVP_CIPH_ALWAYS_CALL_INIT: i32 = 128;
pub const EVP_CIPH_CUSTOM_IV: i32 = 256;
pub const EVP_CIPH_CTRL_INIT: i32 = 512;
pub const EVP_CIPH_FLAG_CUSTOM_CIPHER: i32 = 1024;
pub const EVP_CIPH_FLAG_AEAD_CIPHER: i32 = 2048;
pub const EVP_CIPH_CUSTOM_COPY: i32 = 4096;
pub const EVP_CIPH_FLAG_NON_FIPS_ALLOW: i32 = 0;
pub const EVP_CIPH_CCM_MODE: i32 = -1;
pub const EVP_CIPH_OCB_MODE: i32 = -2;
pub const EVP_CIPH_WRAP_MODE: i32 = -3;
pub const EVP_CIPHER_CTX_FLAG_WRAP_ALLOW: i32 = 0;
pub const EVP_CIPH_NO_PADDING: i32 = 2048;
pub const EVP_CTRL_INIT: i32 = 0;
pub const EVP_CTRL_SET_KEY_LENGTH: i32 = 1;
pub const EVP_CTRL_GET_RC2_KEY_BITS: i32 = 2;
pub const EVP_CTRL_SET_RC2_KEY_BITS: i32 = 3;
pub const EVP_CTRL_GET_RC5_ROUNDS: i32 = 4;
pub const EVP_CTRL_SET_RC5_ROUNDS: i32 = 5;
pub const EVP_CTRL_RAND_KEY: i32 = 6;
pub const EVP_CTRL_PBE_PRF_NID: i32 = 7;
pub const EVP_CTRL_COPY: i32 = 8;
pub const EVP_CTRL_AEAD_SET_IVLEN: i32 = 9;
pub const EVP_CTRL_AEAD_GET_TAG: i32 = 16;
pub const EVP_CTRL_AEAD_SET_TAG: i32 = 17;
pub const EVP_CTRL_AEAD_SET_IV_FIXED: i32 = 18;
pub const EVP_CTRL_GCM_IV_GEN: i32 = 19;
pub const EVP_CTRL_AEAD_SET_MAC_KEY: i32 = 23;
pub const EVP_CTRL_GCM_SET_IV_INV: i32 = 24;
pub const EVP_GCM_TLS_FIXED_IV_LEN: i32 = 4;
pub const EVP_GCM_TLS_EXPLICIT_IV_LEN: i32 = 8;
pub const EVP_GCM_TLS_TAG_LEN: i32 = 16;
pub const EVP_CTRL_GCM_SET_IVLEN: i32 = 9;
pub const EVP_CTRL_GCM_GET_TAG: i32 = 16;
pub const EVP_CTRL_GCM_SET_TAG: i32 = 17;
pub const EVP_CTRL_GCM_SET_IV_FIXED: i32 = 18;
pub const EVP_MAX_KEY_LENGTH: i32 = 64;
pub const EVP_MAX_IV_LENGTH: i32 = 16;
pub const EVP_MAX_BLOCK_LENGTH: i32 = 32;
pub const CIPHER_R_AES_KEY_SETUP_FAILED: i32 = 100;
pub const CIPHER_R_BAD_DECRYPT: i32 = 101;
pub const CIPHER_R_BAD_KEY_LENGTH: i32 = 102;
pub const CIPHER_R_BUFFER_TOO_SMALL: i32 = 103;
pub const CIPHER_R_CTRL_NOT_IMPLEMENTED: i32 = 104;
pub const CIPHER_R_CTRL_OPERATION_NOT_IMPLEMENTED: i32 = 105;
pub const CIPHER_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH: i32 = 106;
pub const CIPHER_R_INITIALIZATION_ERROR: i32 = 107;
pub const CIPHER_R_INPUT_NOT_INITIALIZED: i32 = 108;
pub const CIPHER_R_INVALID_AD_SIZE: i32 = 109;
pub const CIPHER_R_INVALID_KEY_LENGTH: i32 = 110;
pub const CIPHER_R_INVALID_NONCE_SIZE: i32 = 111;
pub const CIPHER_R_INVALID_OPERATION: i32 = 112;
pub const CIPHER_R_IV_TOO_LARGE: i32 = 113;
pub const CIPHER_R_NO_CIPHER_SET: i32 = 114;
pub const CIPHER_R_OUTPUT_ALIASES_INPUT: i32 = 115;
pub const CIPHER_R_TAG_TOO_LARGE: i32 = 116;
pub const CIPHER_R_TOO_LARGE: i32 = 117;
pub const CIPHER_R_UNSUPPORTED_AD_SIZE: i32 = 118;
pub const CIPHER_R_UNSUPPORTED_INPUT_SIZE: i32 = 119;
pub const CIPHER_R_UNSUPPORTED_KEY_SIZE: i32 = 120;
pub const CIPHER_R_UNSUPPORTED_NONCE_SIZE: i32 = 121;
pub const CIPHER_R_UNSUPPORTED_TAG_SIZE: i32 = 122;
pub const CIPHER_R_WRONG_FINAL_BLOCK_LENGTH: i32 = 123;
pub const CIPHER_R_NO_DIRECTION_SET: i32 = 124;
pub const CIPHER_R_INVALID_NONCE: i32 = 125;
pub const DH_GENERATOR_2: i32 = 2;
pub const DH_GENERATOR_5: i32 = 5;
pub const DH_CHECK_P_NOT_PRIME: i32 = 1;
pub const DH_CHECK_P_NOT_SAFE_PRIME: i32 = 2;
pub const DH_CHECK_UNABLE_TO_CHECK_GENERATOR: i32 = 4;
pub const DH_CHECK_NOT_SUITABLE_GENERATOR: i32 = 8;
pub const DH_CHECK_Q_NOT_PRIME: i32 = 16;
pub const DH_CHECK_INVALID_Q_VALUE: i32 = 32;
pub const DH_CHECK_INVALID_J_VALUE: i32 = 64;
pub const DH_NOT_SUITABLE_GENERATOR: i32 = 8;
pub const DH_UNABLE_TO_CHECK_GENERATOR: i32 = 4;
pub const DH_CHECK_PUBKEY_TOO_SMALL: i32 = 1;
pub const DH_CHECK_PUBKEY_TOO_LARGE: i32 = 2;
pub const DH_CHECK_PUBKEY_INVALID: i32 = 4;
pub const DH_R_BAD_GENERATOR: i32 = 100;
pub const DH_R_INVALID_PUBKEY: i32 = 101;
pub const DH_R_MODULUS_TOO_LARGE: i32 = 102;
pub const DH_R_NO_PRIVATE_VALUE: i32 = 103;
pub const DH_R_DECODE_ERROR: i32 = 104;
pub const DH_R_ENCODE_ERROR: i32 = 105;
pub const ENGINE_R_OPERATION_NOT_SUPPORTED: i32 = 100;
pub const DSA_R_BAD_Q_VALUE: i32 = 100;
pub const DSA_R_MISSING_PARAMETERS: i32 = 101;
pub const DSA_R_MODULUS_TOO_LARGE: i32 = 102;
pub const DSA_R_NEED_NEW_SETUP_VALUES: i32 = 103;
pub const DSA_R_BAD_VERSION: i32 = 104;
pub const DSA_R_DECODE_ERROR: i32 = 105;
pub const DSA_R_ENCODE_ERROR: i32 = 106;
pub const DSA_R_INVALID_PARAMETERS: i32 = 107;
pub const OPENSSL_EC_NAMED_CURVE: i32 = 0;
pub const OPENSSL_EC_EXPLICIT_CURVE: i32 = 1;
pub const EC_PKEY_NO_PARAMETERS: i32 = 1;
pub const EC_PKEY_NO_PUBKEY: i32 = 2;
pub const ECDSA_FLAG_OPAQUE: i32 = 1;
pub const EC_R_BUFFER_TOO_SMALL: i32 = 100;
pub const EC_R_COORDINATES_OUT_OF_RANGE: i32 = 101;
pub const EC_R_D2I_ECPKPARAMETERS_FAILURE: i32 = 102;
pub const EC_R_EC_GROUP_NEW_BY_NAME_FAILURE: i32 = 103;
pub const EC_R_GROUP2PKPARAMETERS_FAILURE: i32 = 104;
pub const EC_R_I2D_ECPKPARAMETERS_FAILURE: i32 = 105;
pub const EC_R_INCOMPATIBLE_OBJECTS: i32 = 106;
pub const EC_R_INVALID_COMPRESSED_POINT: i32 = 107;
pub const EC_R_INVALID_COMPRESSION_BIT: i32 = 108;
pub const EC_R_INVALID_ENCODING: i32 = 109;
pub const EC_R_INVALID_FIELD: i32 = 110;
pub const EC_R_INVALID_FORM: i32 = 111;
pub const EC_R_INVALID_GROUP_ORDER: i32 = 112;
pub const EC_R_INVALID_PRIVATE_KEY: i32 = 113;
pub const EC_R_MISSING_PARAMETERS: i32 = 114;
pub const EC_R_MISSING_PRIVATE_KEY: i32 = 115;
pub const EC_R_NON_NAMED_CURVE: i32 = 116;
pub const EC_R_NOT_INITIALIZED: i32 = 117;
pub const EC_R_PKPARAMETERS2GROUP_FAILURE: i32 = 118;
pub const EC_R_POINT_AT_INFINITY: i32 = 119;
pub const EC_R_POINT_IS_NOT_ON_CURVE: i32 = 120;
pub const EC_R_SLOT_FULL: i32 = 121;
pub const EC_R_UNDEFINED_GENERATOR: i32 = 122;
pub const EC_R_UNKNOWN_GROUP: i32 = 123;
pub const EC_R_UNKNOWN_ORDER: i32 = 124;
pub const EC_R_WRONG_ORDER: i32 = 125;
pub const EC_R_BIGNUM_OUT_OF_RANGE: i32 = 126;
pub const EC_R_WRONG_CURVE_PARAMETERS: i32 = 127;
pub const EC_R_DECODE_ERROR: i32 = 128;
pub const EC_R_ENCODE_ERROR: i32 = 129;
pub const EC_R_GROUP_MISMATCH: i32 = 130;
pub const EC_R_INVALID_COFACTOR: i32 = 131;
pub const EC_R_PUBLIC_KEY_VALIDATION_FAILED: i32 = 132;
pub const EC_R_INVALID_SCALAR: i32 = 133;
pub const ECDH_R_KDF_FAILED: i32 = 100;
pub const ECDH_R_NO_PRIVATE_VALUE: i32 = 101;
pub const ECDH_R_POINT_ARITHMETIC_FAILURE: i32 = 102;
pub const ECDH_R_UNKNOWN_DIGEST_LENGTH: i32 = 103;
pub const ECDSA_R_BAD_SIGNATURE: i32 = 100;
pub const ECDSA_R_MISSING_PARAMETERS: i32 = 101;
pub const ECDSA_R_NEED_NEW_SETUP_VALUES: i32 = 102;
pub const ECDSA_R_NOT_IMPLEMENTED: i32 = 103;
pub const ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED: i32 = 104;
pub const ECDSA_R_ENCODE_ERROR: i32 = 105;
pub const EVP_AEAD_MAX_KEY_LENGTH: i32 = 80;
pub const EVP_AEAD_MAX_NONCE_LENGTH: i32 = 24;
pub const EVP_AEAD_MAX_OVERHEAD: i32 = 64;
pub const EVP_AEAD_DEFAULT_TAG_LENGTH: i32 = 0;
pub const EVP_MAX_MD_SIZE: i32 = 64;
pub const EVP_MAX_MD_BLOCK_SIZE: i32 = 128;
pub const EVP_MD_FLAG_PKEY_DIGEST: i32 = 1;
pub const EVP_MD_FLAG_DIGALGID_ABSENT: i32 = 2;
pub const EVP_MD_FLAG_XOF: i32 = 4;
pub const EVP_MD_CTX_FLAG_NON_FIPS_ALLOW: i32 = 0;
pub const DIGEST_R_INPUT_NOT_INITIALIZED: i32 = 100;
pub const DIGEST_R_DECODE_ERROR: i32 = 101;
pub const DIGEST_R_UNKNOWN_HASH: i32 = 102;
pub const EVP_PKEY_NONE: i32 = 0;
pub const EVP_PKEY_RSA: i32 = 6;
pub const EVP_PKEY_RSA_PSS: i32 = 912;
pub const EVP_PKEY_DSA: i32 = 116;
pub const EVP_PKEY_EC: i32 = 408;
pub const EVP_PKEY_ED25519: i32 = 949;
pub const EVP_PKEY_X25519: i32 = 948;
pub const EVP_PKEY_DH: i32 = 28;
pub const EVP_PKEY_RSA2: i32 = 19;
pub const EVP_PKEY_X448: i32 = 961;
pub const EVP_PKEY_ED448: i32 = 960;
pub const EVP_R_BUFFER_TOO_SMALL: i32 = 100;
pub const EVP_R_COMMAND_NOT_SUPPORTED: i32 = 101;
pub const EVP_R_DECODE_ERROR: i32 = 102;
pub const EVP_R_DIFFERENT_KEY_TYPES: i32 = 103;
pub const EVP_R_DIFFERENT_PARAMETERS: i32 = 104;
pub const EVP_R_ENCODE_ERROR: i32 = 105;
pub const EVP_R_EXPECTING_AN_EC_KEY_KEY: i32 = 106;
pub const EVP_R_EXPECTING_AN_RSA_KEY: i32 = 107;
pub const EVP_R_EXPECTING_A_DSA_KEY: i32 = 108;
pub const EVP_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE: i32 = 109;
pub const EVP_R_INVALID_DIGEST_LENGTH: i32 = 110;
pub const EVP_R_INVALID_DIGEST_TYPE: i32 = 111;
pub const EVP_R_INVALID_KEYBITS: i32 = 112;
pub const EVP_R_INVALID_MGF1_MD: i32 = 113;
pub const EVP_R_INVALID_OPERATION: i32 = 114;
pub const EVP_R_INVALID_PADDING_MODE: i32 = 115;
pub const EVP_R_INVALID_PSS_SALTLEN: i32 = 116;
pub const EVP_R_KEYS_NOT_SET: i32 = 117;
pub const EVP_R_MISSING_PARAMETERS: i32 = 118;
pub const EVP_R_NO_DEFAULT_DIGEST: i32 = 119;
pub const EVP_R_NO_KEY_SET: i32 = 120;
pub const EVP_R_NO_MDC2_SUPPORT: i32 = 121;
pub const EVP_R_NO_NID_FOR_CURVE: i32 = 122;
pub const EVP_R_NO_OPERATION_SET: i32 = 123;
pub const EVP_R_NO_PARAMETERS_SET: i32 = 124;
pub const EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: i32 = 125;
pub const EVP_R_OPERATON_NOT_INITIALIZED: i32 = 126;
pub const EVP_R_UNKNOWN_PUBLIC_KEY_TYPE: i32 = 127;
pub const EVP_R_UNSUPPORTED_ALGORITHM: i32 = 128;
pub const EVP_R_UNSUPPORTED_PUBLIC_KEY_TYPE: i32 = 129;
pub const EVP_R_NOT_A_PRIVATE_KEY: i32 = 130;
pub const EVP_R_INVALID_SIGNATURE: i32 = 131;
pub const EVP_R_MEMORY_LIMIT_EXCEEDED: i32 = 132;
pub const EVP_R_INVALID_PARAMETERS: i32 = 133;
pub const EVP_R_INVALID_PEER_KEY: i32 = 134;
pub const EVP_R_NOT_XOF_OR_INVALID_LENGTH: i32 = 135;
pub const EVP_R_EMPTY_PSK: i32 = 136;
pub const PKCS7_DETACHED: i32 = 64;
pub const PKCS7_TEXT: i32 = 1;
pub const PKCS7_NOCERTS: i32 = 2;
pub const PKCS7_NOSIGS: i32 = 4;
pub const PKCS7_NOCHAIN: i32 = 8;
pub const PKCS7_NOINTERN: i32 = 16;
pub const PKCS7_NOVERIFY: i32 = 32;
pub const PKCS7_BINARY: i32 = 128;
pub const PKCS7_NOATTR: i32 = 256;
pub const PKCS7_NOSMIMECAP: i32 = 512;
pub const PKCS7_STREAM: i32 = 4096;
pub const PKCS7_R_BAD_PKCS7_VERSION: i32 = 100;
pub const PKCS7_R_NOT_PKCS7_SIGNED_DATA: i32 = 101;
pub const PKCS7_R_NO_CERTIFICATES_INCLUDED: i32 = 102;
pub const PKCS7_R_NO_CRLS_INCLUDED: i32 = 103;
pub const RSA_PKCS1_PADDING: i32 = 1;
pub const RSA_NO_PADDING: i32 = 3;
pub const RSA_PKCS1_OAEP_PADDING: i32 = 4;
pub const RSA_PKCS1_PSS_PADDING: i32 = 6;
pub const RSA_FLAG_OPAQUE: i32 = 1;
pub const RSA_FLAG_NO_BLINDING: i32 = 8;
pub const RSA_FLAG_EXT_PKEY: i32 = 32;
pub const RSA_3: i32 = 3;
pub const RSA_F4: i32 = 65537;
pub const RSA_METHOD_FLAG_NO_CHECK: i32 = 1;
pub const RSA_R_BAD_ENCODING: i32 = 100;
pub const RSA_R_BAD_E_VALUE: i32 = 101;
pub const RSA_R_BAD_FIXED_HEADER_DECRYPT: i32 = 102;
pub const RSA_R_BAD_PAD_BYTE_COUNT: i32 = 103;
pub const RSA_R_BAD_RSA_PARAMETERS: i32 = 104;
pub const RSA_R_BAD_SIGNATURE: i32 = 105;
pub const RSA_R_BAD_VERSION: i32 = 106;
pub const RSA_R_BLOCK_TYPE_IS_NOT_01: i32 = 107;
pub const RSA_R_BN_NOT_INITIALIZED: i32 = 108;
pub const RSA_R_CANNOT_RECOVER_MULTI_PRIME_KEY: i32 = 109;
pub const RSA_R_CRT_PARAMS_ALREADY_GIVEN: i32 = 110;
pub const RSA_R_CRT_VALUES_INCORRECT: i32 = 111;
pub const RSA_R_DATA_LEN_NOT_EQUAL_TO_MOD_LEN: i32 = 112;
pub const RSA_R_DATA_TOO_LARGE: i32 = 113;
pub const RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: i32 = 114;
pub const RSA_R_DATA_TOO_LARGE_FOR_MODULUS: i32 = 115;
pub const RSA_R_DATA_TOO_SMALL: i32 = 116;
pub const RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE: i32 = 117;
pub const RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY: i32 = 118;
pub const RSA_R_D_E_NOT_CONGRUENT_TO_1: i32 = 119;
pub const RSA_R_EMPTY_PUBLIC_KEY: i32 = 120;
pub const RSA_R_ENCODE_ERROR: i32 = 121;
pub const RSA_R_FIRST_OCTET_INVALID: i32 = 122;
pub const RSA_R_INCONSISTENT_SET_OF_CRT_VALUES: i32 = 123;
pub const RSA_R_INTERNAL_ERROR: i32 = 124;
pub const RSA_R_INVALID_MESSAGE_LENGTH: i32 = 125;
pub const RSA_R_KEY_SIZE_TOO_SMALL: i32 = 126;
pub const RSA_R_LAST_OCTET_INVALID: i32 = 127;
pub const RSA_R_MODULUS_TOO_LARGE: i32 = 128;
pub const RSA_R_MUST_HAVE_AT_LEAST_TWO_PRIMES: i32 = 129;
pub const RSA_R_NO_PUBLIC_EXPONENT: i32 = 130;
pub const RSA_R_NULL_BEFORE_BLOCK_MISSING: i32 = 131;
pub const RSA_R_N_NOT_EQUAL_P_Q: i32 = 132;
pub const RSA_R_OAEP_DECODING_ERROR: i32 = 133;
pub const RSA_R_ONLY_ONE_OF_P_Q_GIVEN: i32 = 134;
pub const RSA_R_OUTPUT_BUFFER_TOO_SMALL: i32 = 135;
pub const RSA_R_PADDING_CHECK_FAILED: i32 = 136;
pub const RSA_R_PKCS_DECODING_ERROR: i32 = 137;
pub const RSA_R_SLEN_CHECK_FAILED: i32 = 138;
pub const RSA_R_SLEN_RECOVERY_FAILED: i32 = 139;
pub const RSA_R_TOO_LONG: i32 = 140;
pub const RSA_R_TOO_MANY_ITERATIONS: i32 = 141;
pub const RSA_R_UNKNOWN_ALGORITHM_TYPE: i32 = 142;
pub const RSA_R_UNKNOWN_PADDING_TYPE: i32 = 143;
pub const RSA_R_VALUE_MISSING: i32 = 144;
pub const RSA_R_WRONG_SIGNATURE_LENGTH: i32 = 145;
pub const RSA_R_PUBLIC_KEY_VALIDATION_FAILED: i32 = 146;
pub const RSA_R_D_OUT_OF_RANGE: i32 = 147;
pub const RSA_R_BLOCK_TYPE_IS_NOT_02: i32 = 148;
pub const X509_FILETYPE_PEM: i32 = 1;
pub const X509_FILETYPE_ASN1: i32 = 2;
pub const X509_FILETYPE_DEFAULT: i32 = 3;
pub const X509v3_KU_DIGITAL_SIGNATURE: i32 = 128;
pub const X509v3_KU_NON_REPUDIATION: i32 = 64;
pub const X509v3_KU_KEY_ENCIPHERMENT: i32 = 32;
pub const X509v3_KU_DATA_ENCIPHERMENT: i32 = 16;
pub const X509v3_KU_KEY_AGREEMENT: i32 = 8;
pub const X509v3_KU_KEY_CERT_SIGN: i32 = 4;
pub const X509v3_KU_CRL_SIGN: i32 = 2;
pub const X509v3_KU_ENCIPHER_ONLY: i32 = 1;
pub const X509v3_KU_DECIPHER_ONLY: i32 = 32768;
pub const X509v3_KU_UNDEF: i32 = 65535;
pub const X509_TRUST_DEFAULT: i32 = -1;
pub const X509_TRUST_COMPAT: i32 = 1;
pub const X509_TRUST_SSL_CLIENT: i32 = 2;
pub const X509_TRUST_SSL_SERVER: i32 = 3;
pub const X509_TRUST_EMAIL: i32 = 4;
pub const X509_TRUST_OBJECT_SIGN: i32 = 5;
pub const X509_TRUST_OCSP_SIGN: i32 = 6;
pub const X509_TRUST_OCSP_REQUEST: i32 = 7;
pub const X509_TRUST_TSA: i32 = 8;
pub const X509_TRUST_MIN: i32 = 1;
pub const X509_TRUST_MAX: i32 = 8;
pub const X509_TRUST_DYNAMIC: i32 = 1;
pub const X509_TRUST_DYNAMIC_NAME: i32 = 2;
pub const X509_TRUST_TRUSTED: i32 = 1;
pub const X509_TRUST_REJECTED: i32 = 2;
pub const X509_TRUST_UNTRUSTED: i32 = 3;
pub const X509_FLAG_COMPAT: i32 = 0;
pub const X509_FLAG_NO_HEADER: i32 = 1;
pub const X509_FLAG_NO_VERSION: i32 = 2;
pub const X509_FLAG_NO_SERIAL: i32 = 4;
pub const X509_FLAG_NO_SIGNAME: i32 = 8;
pub const X509_FLAG_NO_ISSUER: i32 = 16;
pub const X509_FLAG_NO_VALIDITY: i32 = 32;
pub const X509_FLAG_NO_SUBJECT: i32 = 64;
pub const X509_FLAG_NO_PUBKEY: i32 = 128;
pub const X509_FLAG_NO_EXTENSIONS: i32 = 256;
pub const X509_FLAG_NO_SIGDUMP: i32 = 512;
pub const X509_FLAG_NO_AUX: i32 = 1024;
pub const X509_FLAG_NO_ATTRIBUTES: i32 = 2048;
pub const X509_FLAG_NO_IDS: i32 = 4096;
pub const XN_FLAG_SEP_MASK: i32 = 983040;
pub const XN_FLAG_COMPAT: i32 = 0;
pub const XN_FLAG_SEP_COMMA_PLUS: i32 = 65536;
pub const XN_FLAG_SEP_CPLUS_SPC: i32 = 131072;
pub const XN_FLAG_SEP_SPLUS_SPC: i32 = 196608;
pub const XN_FLAG_SEP_MULTILINE: i32 = 262144;
pub const XN_FLAG_DN_REV: i32 = 1048576;
pub const XN_FLAG_FN_MASK: i32 = 6291456;
pub const XN_FLAG_FN_SN: i32 = 0;
pub const XN_FLAG_FN_LN: i32 = 2097152;
pub const XN_FLAG_FN_OID: i32 = 4194304;
pub const XN_FLAG_FN_NONE: i32 = 6291456;
pub const XN_FLAG_SPC_EQ: i32 = 8388608;
pub const XN_FLAG_DUMP_UNKNOWN_FIELDS: i32 = 16777216;
pub const XN_FLAG_FN_ALIGN: i32 = 33554432;
pub const XN_FLAG_RFC2253: i32 = 17892119;
pub const XN_FLAG_ONELINE: i32 = 8520479;
pub const XN_FLAG_MULTILINE: i32 = 44302342;
pub const X509_LU_X509: i32 = 1;
pub const X509_LU_CRL: i32 = 2;
pub const X509_LU_PKEY: i32 = 3;
pub const X509_L_FILE_LOAD: i32 = 1;
pub const X509_L_ADD_DIR: i32 = 2;
pub const X509_V_OK: i32 = 0;
pub const X509_V_ERR_UNSPECIFIED: i32 = 1;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: i32 = 2;
pub const X509_V_ERR_UNABLE_TO_GET_CRL: i32 = 3;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: i32 = 4;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: i32 = 5;
pub const X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: i32 = 6;
pub const X509_V_ERR_CERT_SIGNATURE_FAILURE: i32 = 7;
pub const X509_V_ERR_CRL_SIGNATURE_FAILURE: i32 = 8;
pub const X509_V_ERR_CERT_NOT_YET_VALID: i32 = 9;
pub const X509_V_ERR_CERT_HAS_EXPIRED: i32 = 10;
pub const X509_V_ERR_CRL_NOT_YET_VALID: i32 = 11;
pub const X509_V_ERR_CRL_HAS_EXPIRED: i32 = 12;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: i32 = 13;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: i32 = 14;
pub const X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: i32 = 15;
pub const X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: i32 = 16;
pub const X509_V_ERR_OUT_OF_MEM: i32 = 17;
pub const X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: i32 = 18;
pub const X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: i32 = 19;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: i32 = 20;
pub const X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: i32 = 21;
pub const X509_V_ERR_CERT_CHAIN_TOO_LONG: i32 = 22;
pub const X509_V_ERR_CERT_REVOKED: i32 = 23;
pub const X509_V_ERR_INVALID_CA: i32 = 24;
pub const X509_V_ERR_PATH_LENGTH_EXCEEDED: i32 = 25;
pub const X509_V_ERR_INVALID_PURPOSE: i32 = 26;
pub const X509_V_ERR_CERT_UNTRUSTED: i32 = 27;
pub const X509_V_ERR_CERT_REJECTED: i32 = 28;
pub const X509_V_ERR_SUBJECT_ISSUER_MISMATCH: i32 = 29;
pub const X509_V_ERR_AKID_SKID_MISMATCH: i32 = 30;
pub const X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: i32 = 31;
pub const X509_V_ERR_KEYUSAGE_NO_CERTSIGN: i32 = 32;
pub const X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER: i32 = 33;
pub const X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION: i32 = 34;
pub const X509_V_ERR_KEYUSAGE_NO_CRL_SIGN: i32 = 35;
pub const X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION: i32 = 36;
pub const X509_V_ERR_INVALID_NON_CA: i32 = 37;
pub const X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED: i32 = 38;
pub const X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE: i32 = 39;
pub const X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED: i32 = 40;
pub const X509_V_ERR_INVALID_EXTENSION: i32 = 41;
pub const X509_V_ERR_INVALID_POLICY_EXTENSION: i32 = 42;
pub const X509_V_ERR_NO_EXPLICIT_POLICY: i32 = 43;
pub const X509_V_ERR_DIFFERENT_CRL_SCOPE: i32 = 44;
pub const X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: i32 = 45;
pub const X509_V_ERR_UNNESTED_RESOURCE: i32 = 46;
pub const X509_V_ERR_PERMITTED_VIOLATION: i32 = 47;
pub const X509_V_ERR_EXCLUDED_VIOLATION: i32 = 48;
pub const X509_V_ERR_SUBTREE_MINMAX: i32 = 49;
pub const X509_V_ERR_APPLICATION_VERIFICATION: i32 = 50;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: i32 = 51;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: i32 = 52;
pub const X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: i32 = 53;
pub const X509_V_ERR_CRL_PATH_VALIDATION_ERROR: i32 = 54;
pub const X509_V_ERR_SUITE_B_INVALID_VERSION: i32 = 56;
pub const X509_V_ERR_SUITE_B_INVALID_ALGORITHM: i32 = 57;
pub const X509_V_ERR_SUITE_B_INVALID_CURVE: i32 = 58;
pub const X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM: i32 = 59;
pub const X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED: i32 = 60;
pub const X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256: i32 = 61;
pub const X509_V_ERR_HOSTNAME_MISMATCH: i32 = 62;
pub const X509_V_ERR_EMAIL_MISMATCH: i32 = 63;
pub const X509_V_ERR_IP_ADDRESS_MISMATCH: i32 = 64;
pub const X509_V_ERR_INVALID_CALL: i32 = 65;
pub const X509_V_ERR_STORE_LOOKUP: i32 = 66;
pub const X509_V_ERR_NAME_CONSTRAINTS_WITHOUT_SANS: i32 = 67;
pub const X509_V_FLAG_CB_ISSUER_CHECK: i32 = 1;
pub const X509_V_FLAG_USE_CHECK_TIME: i32 = 2;
pub const X509_V_FLAG_CRL_CHECK: i32 = 4;
pub const X509_V_FLAG_CRL_CHECK_ALL: i32 = 8;
pub const X509_V_FLAG_IGNORE_CRITICAL: i32 = 16;
pub const X509_V_FLAG_X509_STRICT: i32 = 0;
pub const X509_V_FLAG_ALLOW_PROXY_CERTS: i32 = 64;
pub const X509_V_FLAG_POLICY_CHECK: i32 = 128;
pub const X509_V_FLAG_EXPLICIT_POLICY: i32 = 256;
pub const X509_V_FLAG_INHIBIT_ANY: i32 = 512;
pub const X509_V_FLAG_INHIBIT_MAP: i32 = 1024;
pub const X509_V_FLAG_NOTIFY_POLICY: i32 = 2048;
pub const X509_V_FLAG_EXTENDED_CRL_SUPPORT: i32 = 4096;
pub const X509_V_FLAG_USE_DELTAS: i32 = 8192;
pub const X509_V_FLAG_CHECK_SS_SIGNATURE: i32 = 16384;
pub const X509_V_FLAG_TRUSTED_FIRST: i32 = 32768;
pub const X509_V_FLAG_SUITEB_128_LOS_ONLY: i32 = 65536;
pub const X509_V_FLAG_SUITEB_192_LOS: i32 = 131072;
pub const X509_V_FLAG_SUITEB_128_LOS: i32 = 196608;
pub const X509_V_FLAG_PARTIAL_CHAIN: i32 = 524288;
pub const X509_V_FLAG_NO_ALT_CHAINS: i32 = 1048576;
pub const X509_VP_FLAG_DEFAULT: i32 = 1;
pub const X509_VP_FLAG_OVERWRITE: i32 = 2;
pub const X509_VP_FLAG_RESET_FLAGS: i32 = 4;
pub const X509_VP_FLAG_LOCKED: i32 = 8;
pub const X509_VP_FLAG_ONCE: i32 = 16;
pub const X509_V_FLAG_POLICY_MASK: i32 = 1920;
pub const X509_R_AKID_MISMATCH: i32 = 100;
pub const X509_R_BAD_PKCS7_VERSION: i32 = 101;
pub const X509_R_BAD_X509_FILETYPE: i32 = 102;
pub const X509_R_BASE64_DECODE_ERROR: i32 = 103;
pub const X509_R_CANT_CHECK_DH_KEY: i32 = 104;
pub const X509_R_CERT_ALREADY_IN_HASH_TABLE: i32 = 105;
pub const X509_R_CRL_ALREADY_DELTA: i32 = 106;
pub const X509_R_CRL_VERIFY_FAILURE: i32 = 107;
pub const X509_R_IDP_MISMATCH: i32 = 108;
pub const X509_R_INVALID_BIT_STRING_BITS_LEFT: i32 = 109;
pub const X509_R_INVALID_DIRECTORY: i32 = 110;
pub const X509_R_INVALID_FIELD_NAME: i32 = 111;
pub const X509_R_INVALID_PSS_PARAMETERS: i32 = 112;
pub const X509_R_INVALID_TRUST: i32 = 113;
pub const X509_R_ISSUER_MISMATCH: i32 = 114;
pub const X509_R_KEY_TYPE_MISMATCH: i32 = 115;
pub const X509_R_KEY_VALUES_MISMATCH: i32 = 116;
pub const X509_R_LOADING_CERT_DIR: i32 = 117;
pub const X509_R_LOADING_DEFAULTS: i32 = 118;
pub const X509_R_NEWER_CRL_NOT_NEWER: i32 = 119;
pub const X509_R_NOT_PKCS7_SIGNED_DATA: i32 = 120;
pub const X509_R_NO_CERTIFICATES_INCLUDED: i32 = 121;
pub const X509_R_NO_CERT_SET_FOR_US_TO_VERIFY: i32 = 122;
pub const X509_R_NO_CRLS_INCLUDED: i32 = 123;
pub const X509_R_NO_CRL_NUMBER: i32 = 124;
pub const X509_R_PUBLIC_KEY_DECODE_ERROR: i32 = 125;
pub const X509_R_PUBLIC_KEY_ENCODE_ERROR: i32 = 126;
pub const X509_R_SHOULD_RETRY: i32 = 127;
pub const X509_R_UNKNOWN_KEY_TYPE: i32 = 128;
pub const X509_R_UNKNOWN_NID: i32 = 129;
pub const X509_R_UNKNOWN_PURPOSE_ID: i32 = 130;
pub const X509_R_UNKNOWN_TRUST_ID: i32 = 131;
pub const X509_R_UNSUPPORTED_ALGORITHM: i32 = 132;
pub const X509_R_WRONG_LOOKUP_TYPE: i32 = 133;
pub const X509_R_WRONG_TYPE: i32 = 134;
pub const X509_R_NAME_TOO_LONG: i32 = 135;
pub const X509_R_INVALID_PARAMETER: i32 = 136;
pub const X509_R_SIGNATURE_ALGORITHM_MISMATCH: i32 = 137;
pub const X509_R_DELTA_CRL_WITHOUT_CRL_NUMBER: i32 = 138;
pub const X509_R_INVALID_FIELD_FOR_VERSION: i32 = 139;
pub const X509_R_INVALID_VERSION: i32 = 140;
pub const PKCS8_R_BAD_PKCS12_DATA: i32 = 100;
pub const PKCS8_R_BAD_PKCS12_VERSION: i32 = 101;
pub const PKCS8_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: i32 = 102;
pub const PKCS8_R_CRYPT_ERROR: i32 = 103;
pub const PKCS8_R_DECODE_ERROR: i32 = 104;
pub const PKCS8_R_ENCODE_ERROR: i32 = 105;
pub const PKCS8_R_ENCRYPT_ERROR: i32 = 106;
pub const PKCS8_R_ERROR_SETTING_CIPHER_PARAMS: i32 = 107;
pub const PKCS8_R_INCORRECT_PASSWORD: i32 = 108;
pub const PKCS8_R_KEYGEN_FAILURE: i32 = 109;
pub const PKCS8_R_KEY_GEN_ERROR: i32 = 110;
pub const PKCS8_R_METHOD_NOT_SUPPORTED: i32 = 111;
pub const PKCS8_R_MISSING_MAC: i32 = 112;
pub const PKCS8_R_MULTIPLE_PRIVATE_KEYS_IN_PKCS12: i32 = 113;
pub const PKCS8_R_PKCS12_PUBLIC_KEY_INTEGRITY_NOT_SUPPORTED: i32 = 114;
pub const PKCS8_R_PKCS12_TOO_DEEPLY_NESTED: i32 = 115;
pub const PKCS8_R_PRIVATE_KEY_DECODE_ERROR: i32 = 116;
pub const PKCS8_R_PRIVATE_KEY_ENCODE_ERROR: i32 = 117;
pub const PKCS8_R_TOO_LONG: i32 = 118;
pub const PKCS8_R_UNKNOWN_ALGORITHM: i32 = 119;
pub const PKCS8_R_UNKNOWN_CIPHER: i32 = 120;
pub const PKCS8_R_UNKNOWN_CIPHER_ALGORITHM: i32 = 121;
pub const PKCS8_R_UNKNOWN_DIGEST: i32 = 122;
pub const PKCS8_R_UNKNOWN_HASH: i32 = 123;
pub const PKCS8_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM: i32 = 124;
pub const PKCS8_R_UNSUPPORTED_KEYLENGTH: i32 = 125;
pub const PKCS8_R_UNSUPPORTED_SALT_TYPE: i32 = 126;
pub const PKCS8_R_UNSUPPORTED_CIPHER: i32 = 127;
pub const PKCS8_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION: i32 = 128;
pub const PKCS8_R_BAD_ITERATION_COUNT: i32 = 129;
pub const PKCS8_R_UNSUPPORTED_PRF: i32 = 130;
pub const PKCS8_R_INVALID_CHARACTERS: i32 = 131;
pub const PKCS8_R_UNSUPPORTED_OPTIONS: i32 = 132;
pub const RIPEMD160_CBLOCK: i32 = 64;
pub const RIPEMD160_LBLOCK: i32 = 16;
pub const RIPEMD160_DIGEST_LENGTH: i32 = 20;
pub const PEM_BUFSIZE: i32 = 1024;
pub const PEM_STRING_X509_OLD: &'static [u8; 17usize] = b"X509 CERTIFICATE\0";
pub const PEM_STRING_X509: &'static [u8; 12usize] = b"CERTIFICATE\0";
pub const PEM_STRING_X509_PAIR: &'static [u8; 17usize] = b"CERTIFICATE PAIR\0";
pub const PEM_STRING_X509_TRUSTED: &'static [u8; 20usize] = b"TRUSTED CERTIFICATE\0";
pub const PEM_STRING_X509_REQ_OLD: &'static [u8; 24usize] = b"NEW CERTIFICATE REQUEST\0";
pub const PEM_STRING_X509_REQ: &'static [u8; 20usize] = b"CERTIFICATE REQUEST\0";
pub const PEM_STRING_X509_CRL: &'static [u8; 9usize] = b"X509 CRL\0";
pub const PEM_STRING_EVP_PKEY: &'static [u8; 16usize] = b"ANY PRIVATE KEY\0";
pub const PEM_STRING_PUBLIC: &'static [u8; 11usize] = b"PUBLIC KEY\0";
pub const PEM_STRING_RSA: &'static [u8; 16usize] = b"RSA PRIVATE KEY\0";
pub const PEM_STRING_RSA_PUBLIC: &'static [u8; 15usize] = b"RSA PUBLIC KEY\0";
pub const PEM_STRING_DSA: &'static [u8; 16usize] = b"DSA PRIVATE KEY\0";
pub const PEM_STRING_DSA_PUBLIC: &'static [u8; 15usize] = b"DSA PUBLIC KEY\0";
pub const PEM_STRING_EC: &'static [u8; 15usize] = b"EC PRIVATE KEY\0";
pub const PEM_STRING_PKCS7: &'static [u8; 6usize] = b"PKCS7\0";
pub const PEM_STRING_PKCS7_SIGNED: &'static [u8; 20usize] = b"PKCS #7 SIGNED DATA\0";
pub const PEM_STRING_PKCS8: &'static [u8; 22usize] = b"ENCRYPTED PRIVATE KEY\0";
pub const PEM_STRING_PKCS8INF: &'static [u8; 12usize] = b"PRIVATE KEY\0";
pub const PEM_STRING_DHPARAMS: &'static [u8; 14usize] = b"DH PARAMETERS\0";
pub const PEM_STRING_SSL_SESSION: &'static [u8; 23usize] = b"SSL SESSION PARAMETERS\0";
pub const PEM_STRING_DSAPARAMS: &'static [u8; 15usize] = b"DSA PARAMETERS\0";
pub const PEM_STRING_ECDSA_PUBLIC: &'static [u8; 17usize] = b"ECDSA PUBLIC KEY\0";
pub const PEM_STRING_ECPRIVATEKEY: &'static [u8; 15usize] = b"EC PRIVATE KEY\0";
pub const PEM_STRING_CMS: &'static [u8; 4usize] = b"CMS\0";
pub const PEM_TYPE_ENCRYPTED: i32 = 10;
pub const PEM_TYPE_MIC_ONLY: i32 = 20;
pub const PEM_TYPE_MIC_CLEAR: i32 = 30;
pub const PEM_TYPE_CLEAR: i32 = 40;
pub const PEM_R_BAD_BASE64_DECODE: i32 = 100;
pub const PEM_R_BAD_DECRYPT: i32 = 101;
pub const PEM_R_BAD_END_LINE: i32 = 102;
pub const PEM_R_BAD_IV_CHARS: i32 = 103;
pub const PEM_R_BAD_PASSWORD_READ: i32 = 104;
pub const PEM_R_CIPHER_IS_NULL: i32 = 105;
pub const PEM_R_ERROR_CONVERTING_PRIVATE_KEY: i32 = 106;
pub const PEM_R_NOT_DEK_INFO: i32 = 107;
pub const PEM_R_NOT_ENCRYPTED: i32 = 108;
pub const PEM_R_NOT_PROC_TYPE: i32 = 109;
pub const PEM_R_NO_START_LINE: i32 = 110;
pub const PEM_R_READ_KEY: i32 = 111;
pub const PEM_R_SHORT_HEADER: i32 = 112;
pub const PEM_R_UNSUPPORTED_CIPHER: i32 = 113;
pub const PEM_R_UNSUPPORTED_ENCRYPTION: i32 = 114;
pub const SSL2_MT_CLIENT_HELLO: i32 = 1;
pub const SSL2_VERSION: i32 = 2;
pub const SSL3_CK_SCSV: i32 = 50331903;
pub const SSL3_CK_FALLBACK_SCSV: i32 = 50353664;
pub const SSL3_CK_RSA_NULL_MD5: i32 = 50331649;
pub const SSL3_CK_RSA_NULL_SHA: i32 = 50331650;
pub const SSL3_CK_RSA_RC4_40_MD5: i32 = 50331651;
pub const SSL3_CK_RSA_RC4_128_MD5: i32 = 50331652;
pub const SSL3_CK_RSA_RC4_128_SHA: i32 = 50331653;
pub const SSL3_CK_RSA_RC2_40_MD5: i32 = 50331654;
pub const SSL3_CK_RSA_IDEA_128_SHA: i32 = 50331655;
pub const SSL3_CK_RSA_DES_40_CBC_SHA: i32 = 50331656;
pub const SSL3_CK_RSA_DES_64_CBC_SHA: i32 = 50331657;
pub const SSL3_CK_RSA_DES_192_CBC3_SHA: i32 = 50331658;
pub const SSL3_CK_DH_DSS_DES_40_CBC_SHA: i32 = 50331659;
pub const SSL3_CK_DH_DSS_DES_64_CBC_SHA: i32 = 50331660;
pub const SSL3_CK_DH_DSS_DES_192_CBC3_SHA: i32 = 50331661;
pub const SSL3_CK_DH_RSA_DES_40_CBC_SHA: i32 = 50331662;
pub const SSL3_CK_DH_RSA_DES_64_CBC_SHA: i32 = 50331663;
pub const SSL3_CK_DH_RSA_DES_192_CBC3_SHA: i32 = 50331664;
pub const SSL3_CK_EDH_DSS_DES_40_CBC_SHA: i32 = 50331665;
pub const SSL3_CK_EDH_DSS_DES_64_CBC_SHA: i32 = 50331666;
pub const SSL3_CK_EDH_DSS_DES_192_CBC3_SHA: i32 = 50331667;
pub const SSL3_CK_EDH_RSA_DES_40_CBC_SHA: i32 = 50331668;
pub const SSL3_CK_EDH_RSA_DES_64_CBC_SHA: i32 = 50331669;
pub const SSL3_CK_EDH_RSA_DES_192_CBC3_SHA: i32 = 50331670;
pub const SSL3_CK_ADH_RC4_40_MD5: i32 = 50331671;
pub const SSL3_CK_ADH_RC4_128_MD5: i32 = 50331672;
pub const SSL3_CK_ADH_DES_40_CBC_SHA: i32 = 50331673;
pub const SSL3_CK_ADH_DES_64_CBC_SHA: i32 = 50331674;
pub const SSL3_CK_ADH_DES_192_CBC_SHA: i32 = 50331675;
pub const SSL3_TXT_RSA_NULL_MD5: &'static [u8; 9usize] = b"NULL-MD5\0";
pub const SSL3_TXT_RSA_NULL_SHA: &'static [u8; 9usize] = b"NULL-SHA\0";
pub const SSL3_TXT_RSA_RC4_40_MD5: &'static [u8; 12usize] = b"EXP-RC4-MD5\0";
pub const SSL3_TXT_RSA_RC4_128_MD5: &'static [u8; 8usize] = b"RC4-MD5\0";
pub const SSL3_TXT_RSA_RC4_128_SHA: &'static [u8; 8usize] = b"RC4-SHA\0";
pub const SSL3_TXT_RSA_RC2_40_MD5: &'static [u8; 16usize] = b"EXP-RC2-CBC-MD5\0";
pub const SSL3_TXT_RSA_IDEA_128_SHA: &'static [u8; 13usize] = b"IDEA-CBC-SHA\0";
pub const SSL3_TXT_RSA_DES_40_CBC_SHA: &'static [u8; 16usize] = b"EXP-DES-CBC-SHA\0";
pub const SSL3_TXT_RSA_DES_64_CBC_SHA: &'static [u8; 12usize] = b"DES-CBC-SHA\0";
pub const SSL3_TXT_RSA_DES_192_CBC3_SHA: &'static [u8; 13usize] = b"DES-CBC3-SHA\0";
pub const SSL3_TXT_DH_DSS_DES_40_CBC_SHA: &'static [u8; 23usize] = b"EXP-DH-DSS-DES-CBC-SHA\0";
pub const SSL3_TXT_DH_DSS_DES_64_CBC_SHA: &'static [u8; 19usize] = b"DH-DSS-DES-CBC-SHA\0";
pub const SSL3_TXT_DH_DSS_DES_192_CBC3_SHA: &'static [u8; 20usize] = b"DH-DSS-DES-CBC3-SHA\0";
pub const SSL3_TXT_DH_RSA_DES_40_CBC_SHA: &'static [u8; 23usize] = b"EXP-DH-RSA-DES-CBC-SHA\0";
pub const SSL3_TXT_DH_RSA_DES_64_CBC_SHA: &'static [u8; 19usize] = b"DH-RSA-DES-CBC-SHA\0";
pub const SSL3_TXT_DH_RSA_DES_192_CBC3_SHA: &'static [u8; 20usize] = b"DH-RSA-DES-CBC3-SHA\0";
pub const SSL3_TXT_EDH_DSS_DES_40_CBC_SHA: &'static [u8; 24usize] = b"EXP-EDH-DSS-DES-CBC-SHA\0";
pub const SSL3_TXT_EDH_DSS_DES_64_CBC_SHA: &'static [u8; 20usize] = b"EDH-DSS-DES-CBC-SHA\0";
pub const SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA: &'static [u8; 21usize] = b"EDH-DSS-DES-CBC3-SHA\0";
pub const SSL3_TXT_EDH_RSA_DES_40_CBC_SHA: &'static [u8; 24usize] = b"EXP-EDH-RSA-DES-CBC-SHA\0";
pub const SSL3_TXT_EDH_RSA_DES_64_CBC_SHA: &'static [u8; 20usize] = b"EDH-RSA-DES-CBC-SHA\0";
pub const SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA: &'static [u8; 21usize] = b"EDH-RSA-DES-CBC3-SHA\0";
pub const SSL3_TXT_ADH_RC4_40_MD5: &'static [u8; 16usize] = b"EXP-ADH-RC4-MD5\0";
pub const SSL3_TXT_ADH_RC4_128_MD5: &'static [u8; 12usize] = b"ADH-RC4-MD5\0";
pub const SSL3_TXT_ADH_DES_40_CBC_SHA: &'static [u8; 20usize] = b"EXP-ADH-DES-CBC-SHA\0";
pub const SSL3_TXT_ADH_DES_64_CBC_SHA: &'static [u8; 16usize] = b"ADH-DES-CBC-SHA\0";
pub const SSL3_TXT_ADH_DES_192_CBC_SHA: &'static [u8; 17usize] = b"ADH-DES-CBC3-SHA\0";
pub const SSL3_SSL_SESSION_ID_LENGTH: i32 = 32;
pub const SSL3_MAX_SSL_SESSION_ID_LENGTH: i32 = 32;
pub const SSL3_MASTER_SECRET_SIZE: i32 = 48;
pub const SSL3_RANDOM_SIZE: i32 = 32;
pub const SSL3_SESSION_ID_SIZE: i32 = 32;
pub const SSL3_RT_HEADER_LENGTH: i32 = 5;
pub const SSL3_HM_HEADER_LENGTH: i32 = 4;
pub const SSL3_ALIGN_PAYLOAD: i32 = 8;
pub const SSL3_RT_MAX_MD_SIZE: i32 = 64;
pub const SSL_RT_MAX_CIPHER_BLOCK_SIZE: i32 = 16;
pub const SSL3_RT_MAX_PLAIN_LENGTH: i32 = 16384;
pub const SSL3_RT_MAX_COMPRESSED_OVERHEAD: i32 = 1024;
pub const SSL3_RT_MAX_ENCRYPTED_OVERHEAD: i32 = 320;
pub const SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD: i32 = 88;
pub const SSL3_RT_MAX_COMPRESSED_LENGTH: i32 = 16384;
pub const SSL3_RT_MAX_ENCRYPTED_LENGTH: i32 = 16704;
pub const SSL3_RT_MAX_PACKET_SIZE: i32 = 16709;
pub const SSL3_MD_CLIENT_FINISHED_CONST: &'static [u8; 5usize] = b"CLNT\0";
pub const SSL3_MD_SERVER_FINISHED_CONST: &'static [u8; 5usize] = b"SRVR\0";
pub const SSL3_RT_CHANGE_CIPHER_SPEC: i32 = 20;
pub const SSL3_RT_ALERT: i32 = 21;
pub const SSL3_RT_HANDSHAKE: i32 = 22;
pub const SSL3_RT_APPLICATION_DATA: i32 = 23;
pub const SSL3_RT_HEADER: i32 = 256;
pub const SSL3_AL_WARNING: i32 = 1;
pub const SSL3_AL_FATAL: i32 = 2;
pub const SSL3_AD_CLOSE_NOTIFY: i32 = 0;
pub const SSL3_AD_UNEXPECTED_MESSAGE: i32 = 10;
pub const SSL3_AD_BAD_RECORD_MAC: i32 = 20;
pub const SSL3_AD_DECOMPRESSION_FAILURE: i32 = 30;
pub const SSL3_AD_HANDSHAKE_FAILURE: i32 = 40;
pub const SSL3_AD_NO_CERTIFICATE: i32 = 41;
pub const SSL3_AD_BAD_CERTIFICATE: i32 = 42;
pub const SSL3_AD_UNSUPPORTED_CERTIFICATE: i32 = 43;
pub const SSL3_AD_CERTIFICATE_REVOKED: i32 = 44;
pub const SSL3_AD_CERTIFICATE_EXPIRED: i32 = 45;
pub const SSL3_AD_CERTIFICATE_UNKNOWN: i32 = 46;
pub const SSL3_AD_ILLEGAL_PARAMETER: i32 = 47;
pub const SSL3_AD_INAPPROPRIATE_FALLBACK: i32 = 86;
pub const SSL3_CT_RSA_SIGN: i32 = 1;
pub const SSL3_MT_HELLO_REQUEST: i32 = 0;
pub const SSL3_MT_CLIENT_HELLO: i32 = 1;
pub const SSL3_MT_SERVER_HELLO: i32 = 2;
pub const SSL3_MT_NEW_SESSION_TICKET: i32 = 4;
pub const SSL3_MT_END_OF_EARLY_DATA: i32 = 5;
pub const SSL3_MT_ENCRYPTED_EXTENSIONS: i32 = 8;
pub const SSL3_MT_CERTIFICATE: i32 = 11;
pub const SSL3_MT_SERVER_KEY_EXCHANGE: i32 = 12;
pub const SSL3_MT_CERTIFICATE_REQUEST: i32 = 13;
pub const SSL3_MT_SERVER_HELLO_DONE: i32 = 14;
pub const SSL3_MT_CERTIFICATE_VERIFY: i32 = 15;
pub const SSL3_MT_CLIENT_KEY_EXCHANGE: i32 = 16;
pub const SSL3_MT_FINISHED: i32 = 20;
pub const SSL3_MT_CERTIFICATE_STATUS: i32 = 22;
pub const SSL3_MT_SUPPLEMENTAL_DATA: i32 = 23;
pub const SSL3_MT_KEY_UPDATE: i32 = 24;
pub const SSL3_MT_COMPRESSED_CERTIFICATE: i32 = 25;
pub const SSL3_MT_NEXT_PROTO: i32 = 67;
pub const SSL3_MT_CHANNEL_ID: i32 = 203;
pub const SSL3_MT_MESSAGE_HASH: i32 = 254;
pub const DTLS1_MT_HELLO_VERIFY_REQUEST: i32 = 3;
pub const SSL3_MT_SERVER_DONE: i32 = 14;
pub const SSL3_MT_NEWSESSION_TICKET: i32 = 4;
pub const SSL3_MT_CCS: i32 = 1;
pub const TLS1_AD_END_OF_EARLY_DATA: i32 = 1;
pub const TLS1_AD_DECRYPTION_FAILED: i32 = 21;
pub const TLS1_AD_RECORD_OVERFLOW: i32 = 22;
pub const TLS1_AD_UNKNOWN_CA: i32 = 48;
pub const TLS1_AD_ACCESS_DENIED: i32 = 49;
pub const TLS1_AD_DECODE_ERROR: i32 = 50;
pub const TLS1_AD_DECRYPT_ERROR: i32 = 51;
pub const TLS1_AD_EXPORT_RESTRICTION: i32 = 60;
pub const TLS1_AD_PROTOCOL_VERSION: i32 = 70;
pub const TLS1_AD_INSUFFICIENT_SECURITY: i32 = 71;
pub const TLS1_AD_INTERNAL_ERROR: i32 = 80;
pub const TLS1_AD_USER_CANCELLED: i32 = 90;
pub const TLS1_AD_NO_RENEGOTIATION: i32 = 100;
pub const TLS1_AD_MISSING_EXTENSION: i32 = 109;
pub const TLS1_AD_UNSUPPORTED_EXTENSION: i32 = 110;
pub const TLS1_AD_CERTIFICATE_UNOBTAINABLE: i32 = 111;
pub const TLS1_AD_UNRECOGNIZED_NAME: i32 = 112;
pub const TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE: i32 = 113;
pub const TLS1_AD_BAD_CERTIFICATE_HASH_VALUE: i32 = 114;
pub const TLS1_AD_UNKNOWN_PSK_IDENTITY: i32 = 115;
pub const TLS1_AD_CERTIFICATE_REQUIRED: i32 = 116;
pub const TLS1_AD_NO_APPLICATION_PROTOCOL: i32 = 120;
pub const TLSEXT_TYPE_server_name: i32 = 0;
pub const TLSEXT_TYPE_status_request: i32 = 5;
pub const TLSEXT_TYPE_ec_point_formats: i32 = 11;
pub const TLSEXT_TYPE_signature_algorithms: i32 = 13;
pub const TLSEXT_TYPE_srtp: i32 = 14;
pub const TLSEXT_TYPE_application_layer_protocol_negotiation: i32 = 16;
pub const TLSEXT_TYPE_padding: i32 = 21;
pub const TLSEXT_TYPE_extended_master_secret: i32 = 23;
pub const TLSEXT_TYPE_token_binding: i32 = 24;
pub const TLSEXT_TYPE_quic_transport_parameters_legacy: i32 = 65445;
pub const TLSEXT_TYPE_quic_transport_parameters_standard: i32 = 57;
pub const TLSEXT_TYPE_quic_transport_parameters: i32 = 65445;
pub const TLSEXT_TYPE_cert_compression: i32 = 27;
pub const TLSEXT_TYPE_session_ticket: i32 = 35;
pub const TLSEXT_TYPE_supported_groups: i32 = 10;
pub const TLSEXT_TYPE_pre_shared_key: i32 = 41;
pub const TLSEXT_TYPE_early_data: i32 = 42;
pub const TLSEXT_TYPE_supported_versions: i32 = 43;
pub const TLSEXT_TYPE_cookie: i32 = 44;
pub const TLSEXT_TYPE_psk_key_exchange_modes: i32 = 45;
pub const TLSEXT_TYPE_certificate_authorities: i32 = 47;
pub const TLSEXT_TYPE_signature_algorithms_cert: i32 = 50;
pub const TLSEXT_TYPE_key_share: i32 = 51;
pub const TLSEXT_TYPE_renegotiate: i32 = 65281;
pub const TLSEXT_TYPE_delegated_credential: i32 = 34;
pub const TLSEXT_TYPE_application_settings: i32 = 17513;
pub const TLSEXT_TYPE_encrypted_client_hello: i32 = 65033;
pub const TLSEXT_TYPE_ech_is_inner: i32 = 55817;
pub const TLSEXT_TYPE_certificate_timestamp: i32 = 18;
pub const TLSEXT_TYPE_next_proto_neg: i32 = 13172;
pub const TLSEXT_TYPE_channel_id: i32 = 30032;
pub const TLSEXT_STATUSTYPE_nothing: i32 = -1;
pub const TLSEXT_STATUSTYPE_ocsp: i32 = 1;
pub const TLSEXT_ECPOINTFORMAT_uncompressed: i32 = 0;
pub const TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime: i32 = 1;
pub const TLSEXT_signature_anonymous: i32 = 0;
pub const TLSEXT_signature_rsa: i32 = 1;
pub const TLSEXT_signature_dsa: i32 = 2;
pub const TLSEXT_signature_ecdsa: i32 = 3;
pub const TLSEXT_hash_none: i32 = 0;
pub const TLSEXT_hash_md5: i32 = 1;
pub const TLSEXT_hash_sha1: i32 = 2;
pub const TLSEXT_hash_sha224: i32 = 3;
pub const TLSEXT_hash_sha256: i32 = 4;
pub const TLSEXT_hash_sha384: i32 = 5;
pub const TLSEXT_hash_sha512: i32 = 6;
pub const TLSEXT_cert_compression_zlib: i32 = 1;
pub const TLSEXT_cert_compression_brotli: i32 = 2;
pub const TLSEXT_MAXLEN_host_name: i32 = 255;
pub const TLS1_CK_PSK_WITH_RC4_128_SHA: i32 = 50331786;
pub const TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA: i32 = 50331787;
pub const TLS1_CK_PSK_WITH_AES_128_CBC_SHA: i32 = 50331788;
pub const TLS1_CK_PSK_WITH_AES_256_CBC_SHA: i32 = 50331789;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA: i32 = 50380853;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA: i32 = 50380854;
pub const TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5: i32 = 50331744;
pub const TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5: i32 = 50331745;
pub const TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA: i32 = 50331746;
pub const TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA: i32 = 50331747;
pub const TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA: i32 = 50331748;
pub const TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA: i32 = 50331749;
pub const TLS1_CK_DHE_DSS_WITH_RC4_128_SHA: i32 = 50331750;
pub const TLS1_CK_RSA_WITH_AES_128_SHA: i32 = 50331695;
pub const TLS1_CK_DH_DSS_WITH_AES_128_SHA: i32 = 50331696;
pub const TLS1_CK_DH_RSA_WITH_AES_128_SHA: i32 = 50331697;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_SHA: i32 = 50331698;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_SHA: i32 = 50331699;
pub const TLS1_CK_ADH_WITH_AES_128_SHA: i32 = 50331700;
pub const TLS1_CK_RSA_WITH_AES_256_SHA: i32 = 50331701;
pub const TLS1_CK_DH_DSS_WITH_AES_256_SHA: i32 = 50331702;
pub const TLS1_CK_DH_RSA_WITH_AES_256_SHA: i32 = 50331703;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_SHA: i32 = 50331704;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_SHA: i32 = 50331705;
pub const TLS1_CK_ADH_WITH_AES_256_SHA: i32 = 50331706;
pub const TLS1_CK_RSA_WITH_NULL_SHA256: i32 = 50331707;
pub const TLS1_CK_RSA_WITH_AES_128_SHA256: i32 = 50331708;
pub const TLS1_CK_RSA_WITH_AES_256_SHA256: i32 = 50331709;
pub const TLS1_CK_DH_DSS_WITH_AES_128_SHA256: i32 = 50331710;
pub const TLS1_CK_DH_RSA_WITH_AES_128_SHA256: i32 = 50331711;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_SHA256: i32 = 50331712;
pub const TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331713;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331714;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331715;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331716;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331717;
pub const TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA: i32 = 50331718;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_SHA256: i32 = 50331751;
pub const TLS1_CK_DH_DSS_WITH_AES_256_SHA256: i32 = 50331752;
pub const TLS1_CK_DH_RSA_WITH_AES_256_SHA256: i32 = 50331753;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_SHA256: i32 = 50331754;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_SHA256: i32 = 50331755;
pub const TLS1_CK_ADH_WITH_AES_128_SHA256: i32 = 50331756;
pub const TLS1_CK_ADH_WITH_AES_256_SHA256: i32 = 50331757;
pub const TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331780;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331781;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331782;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331783;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331784;
pub const TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA: i32 = 50331785;
pub const TLS1_CK_RSA_WITH_SEED_SHA: i32 = 50331798;
pub const TLS1_CK_DH_DSS_WITH_SEED_SHA: i32 = 50331799;
pub const TLS1_CK_DH_RSA_WITH_SEED_SHA: i32 = 50331800;
pub const TLS1_CK_DHE_DSS_WITH_SEED_SHA: i32 = 50331801;
pub const TLS1_CK_DHE_RSA_WITH_SEED_SHA: i32 = 50331802;
pub const TLS1_CK_ADH_WITH_SEED_SHA: i32 = 50331803;
pub const TLS1_CK_RSA_WITH_AES_128_GCM_SHA256: i32 = 50331804;
pub const TLS1_CK_RSA_WITH_AES_256_GCM_SHA384: i32 = 50331805;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256: i32 = 50331806;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384: i32 = 50331807;
pub const TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256: i32 = 50331808;
pub const TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384: i32 = 50331809;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256: i32 = 50331810;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384: i32 = 50331811;
pub const TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256: i32 = 50331812;
pub const TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384: i32 = 50331813;
pub const TLS1_CK_ADH_WITH_AES_128_GCM_SHA256: i32 = 50331814;
pub const TLS1_CK_ADH_WITH_AES_256_GCM_SHA384: i32 = 50331815;
pub const TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA: i32 = 50380801;
pub const TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA: i32 = 50380802;
pub const TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: i32 = 50380803;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA: i32 = 50380804;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA: i32 = 50380805;
pub const TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA: i32 = 50380806;
pub const TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA: i32 = 50380807;
pub const TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: i32 = 50380808;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: i32 = 50380809;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: i32 = 50380810;
pub const TLS1_CK_ECDH_RSA_WITH_NULL_SHA: i32 = 50380811;
pub const TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA: i32 = 50380812;
pub const TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA: i32 = 50380813;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA: i32 = 50380814;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA: i32 = 50380815;
pub const TLS1_CK_ECDHE_RSA_WITH_NULL_SHA: i32 = 50380816;
pub const TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA: i32 = 50380817;
pub const TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA: i32 = 50380818;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA: i32 = 50380819;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA: i32 = 50380820;
pub const TLS1_CK_ECDH_anon_WITH_NULL_SHA: i32 = 50380821;
pub const TLS1_CK_ECDH_anon_WITH_RC4_128_SHA: i32 = 50380822;
pub const TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA: i32 = 50380823;
pub const TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA: i32 = 50380824;
pub const TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA: i32 = 50380825;
pub const TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA: i32 = 50380826;
pub const TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: i32 = 50380827;
pub const TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: i32 = 50380828;
pub const TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA: i32 = 50380829;
pub const TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: i32 = 50380830;
pub const TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: i32 = 50380831;
pub const TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA: i32 = 50380832;
pub const TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: i32 = 50380833;
pub const TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: i32 = 50380834;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256: i32 = 50380835;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384: i32 = 50380836;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256: i32 = 50380837;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384: i32 = 50380838;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256: i32 = 50380839;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384: i32 = 50380840;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256: i32 = 50380841;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384: i32 = 50380842;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: i32 = 50380843;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: i32 = 50380844;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: i32 = 50380845;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: i32 = 50380846;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256: i32 = 50380847;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384: i32 = 50380848;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256: i32 = 50380849;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384: i32 = 50380850;
pub const TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: i32 = 50384040;
pub const TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: i32 = 50384041;
pub const TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: i32 = 50384044;
pub const TLS1_CK_AES_128_GCM_SHA256: i32 = 50336513;
pub const TLS1_CK_AES_256_GCM_SHA384: i32 = 50336514;
pub const TLS1_CK_CHACHA20_POLY1305_SHA256: i32 = 50336515;
pub const TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5: &'static [u8; 16usize] = b"EXP1024-RC4-MD5\0";
pub const TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5: &'static [u8; 20usize] =
    b"EXP1024-RC2-CBC-MD5\0";
pub const TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA: &'static [u8; 20usize] =
    b"EXP1024-DES-CBC-SHA\0";
pub const TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA: &'static [u8; 28usize] =
    b"EXP1024-DHE-DSS-DES-CBC-SHA\0";
pub const TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA: &'static [u8; 16usize] = b"EXP1024-RC4-SHA\0";
pub const TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA: &'static [u8; 24usize] =
    b"EXP1024-DHE-DSS-RC4-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA: &'static [u8; 16usize] = b"DHE-DSS-RC4-SHA\0";
pub const TLS1_TXT_RSA_WITH_AES_128_SHA: &'static [u8; 11usize] = b"AES128-SHA\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_SHA: &'static [u8; 18usize] = b"DH-DSS-AES128-SHA\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_SHA: &'static [u8; 18usize] = b"DH-RSA-AES128-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA: &'static [u8; 19usize] = b"DHE-DSS-AES128-SHA\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA: &'static [u8; 19usize] = b"DHE-RSA-AES128-SHA\0";
pub const TLS1_TXT_ADH_WITH_AES_128_SHA: &'static [u8; 15usize] = b"ADH-AES128-SHA\0";
pub const TLS1_TXT_RSA_WITH_AES_256_SHA: &'static [u8; 11usize] = b"AES256-SHA\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_SHA: &'static [u8; 18usize] = b"DH-DSS-AES256-SHA\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_SHA: &'static [u8; 18usize] = b"DH-RSA-AES256-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA: &'static [u8; 19usize] = b"DHE-DSS-AES256-SHA\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA: &'static [u8; 19usize] = b"DHE-RSA-AES256-SHA\0";
pub const TLS1_TXT_ADH_WITH_AES_256_SHA: &'static [u8; 15usize] = b"ADH-AES256-SHA\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA: &'static [u8; 20usize] = b"ECDH-ECDSA-NULL-SHA\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA: &'static [u8; 19usize] = b"ECDH-ECDSA-RC4-SHA\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: &'static [u8; 24usize] =
    b"ECDH-ECDSA-DES-CBC3-SHA\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA: &'static [u8; 22usize] =
    b"ECDH-ECDSA-AES128-SHA\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA: &'static [u8; 22usize] =
    b"ECDH-ECDSA-AES256-SHA\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA: &'static [u8; 21usize] = b"ECDHE-ECDSA-NULL-SHA\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA: &'static [u8; 20usize] = b"ECDHE-ECDSA-RC4-SHA\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: &'static [u8; 25usize] =
    b"ECDHE-ECDSA-DES-CBC3-SHA\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: &'static [u8; 23usize] =
    b"ECDHE-ECDSA-AES128-SHA\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: &'static [u8; 23usize] =
    b"ECDHE-ECDSA-AES256-SHA\0";
pub const TLS1_TXT_ECDH_RSA_WITH_NULL_SHA: &'static [u8; 18usize] = b"ECDH-RSA-NULL-SHA\0";
pub const TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA: &'static [u8; 17usize] = b"ECDH-RSA-RC4-SHA\0";
pub const TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA: &'static [u8; 22usize] =
    b"ECDH-RSA-DES-CBC3-SHA\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA: &'static [u8; 20usize] = b"ECDH-RSA-AES128-SHA\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA: &'static [u8; 20usize] = b"ECDH-RSA-AES256-SHA\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA: &'static [u8; 19usize] = b"ECDHE-RSA-NULL-SHA\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA: &'static [u8; 18usize] = b"ECDHE-RSA-RC4-SHA\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA: &'static [u8; 23usize] =
    b"ECDHE-RSA-DES-CBC3-SHA\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA: &'static [u8; 21usize] =
    b"ECDHE-RSA-AES128-SHA\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA: &'static [u8; 21usize] =
    b"ECDHE-RSA-AES256-SHA\0";
pub const TLS1_TXT_ECDH_anon_WITH_NULL_SHA: &'static [u8; 15usize] = b"AECDH-NULL-SHA\0";
pub const TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA: &'static [u8; 14usize] = b"AECDH-RC4-SHA\0";
pub const TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA: &'static [u8; 19usize] =
    b"AECDH-DES-CBC3-SHA\0";
pub const TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA: &'static [u8; 17usize] = b"AECDH-AES128-SHA\0";
pub const TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA: &'static [u8; 17usize] = b"AECDH-AES256-SHA\0";
pub const TLS1_TXT_PSK_WITH_RC4_128_SHA: &'static [u8; 12usize] = b"PSK-RC4-SHA\0";
pub const TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA: &'static [u8; 21usize] = b"PSK-3DES-EDE-CBC-SHA\0";
pub const TLS1_TXT_PSK_WITH_AES_128_CBC_SHA: &'static [u8; 19usize] = b"PSK-AES128-CBC-SHA\0";
pub const TLS1_TXT_PSK_WITH_AES_256_CBC_SHA: &'static [u8; 19usize] = b"PSK-AES256-CBC-SHA\0";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA: &'static [u8; 25usize] =
    b"ECDHE-PSK-AES128-CBC-SHA\0";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA: &'static [u8; 25usize] =
    b"ECDHE-PSK-AES256-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA: &'static [u8; 21usize] =
    b"SRP-3DES-EDE-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: &'static [u8; 25usize] =
    b"SRP-RSA-3DES-EDE-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: &'static [u8; 25usize] =
    b"SRP-DSS-3DES-EDE-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA: &'static [u8; 20usize] = b"SRP-AES-128-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: &'static [u8; 24usize] =
    b"SRP-RSA-AES-128-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: &'static [u8; 24usize] =
    b"SRP-DSS-AES-128-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA: &'static [u8; 20usize] = b"SRP-AES-256-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: &'static [u8; 24usize] =
    b"SRP-RSA-AES-256-CBC-SHA\0";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: &'static [u8; 24usize] =
    b"SRP-DSS-AES-256-CBC-SHA\0";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 16usize] = b"CAMELLIA128-SHA\0";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 23usize] =
    b"DH-DSS-CAMELLIA128-SHA\0";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 23usize] =
    b"DH-RSA-CAMELLIA128-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 24usize] =
    b"DHE-DSS-CAMELLIA128-SHA\0";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 24usize] =
    b"DHE-RSA-CAMELLIA128-SHA\0";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA: &'static [u8; 20usize] = b"ADH-CAMELLIA128-SHA\0";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 16usize] = b"CAMELLIA256-SHA\0";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 23usize] =
    b"DH-DSS-CAMELLIA256-SHA\0";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 23usize] =
    b"DH-RSA-CAMELLIA256-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 24usize] =
    b"DHE-DSS-CAMELLIA256-SHA\0";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 24usize] =
    b"DHE-RSA-CAMELLIA256-SHA\0";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA: &'static [u8; 20usize] = b"ADH-CAMELLIA256-SHA\0";
pub const TLS1_TXT_RSA_WITH_SEED_SHA: &'static [u8; 9usize] = b"SEED-SHA\0";
pub const TLS1_TXT_DH_DSS_WITH_SEED_SHA: &'static [u8; 16usize] = b"DH-DSS-SEED-SHA\0";
pub const TLS1_TXT_DH_RSA_WITH_SEED_SHA: &'static [u8; 16usize] = b"DH-RSA-SEED-SHA\0";
pub const TLS1_TXT_DHE_DSS_WITH_SEED_SHA: &'static [u8; 17usize] = b"DHE-DSS-SEED-SHA\0";
pub const TLS1_TXT_DHE_RSA_WITH_SEED_SHA: &'static [u8; 17usize] = b"DHE-RSA-SEED-SHA\0";
pub const TLS1_TXT_ADH_WITH_SEED_SHA: &'static [u8; 13usize] = b"ADH-SEED-SHA\0";
pub const TLS1_TXT_RSA_WITH_NULL_SHA256: &'static [u8; 12usize] = b"NULL-SHA256\0";
pub const TLS1_TXT_RSA_WITH_AES_128_SHA256: &'static [u8; 14usize] = b"AES128-SHA256\0";
pub const TLS1_TXT_RSA_WITH_AES_256_SHA256: &'static [u8; 14usize] = b"AES256-SHA256\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_SHA256: &'static [u8; 21usize] = b"DH-DSS-AES128-SHA256\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_SHA256: &'static [u8; 21usize] = b"DH-RSA-AES128-SHA256\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256: &'static [u8; 22usize] = b"DHE-DSS-AES128-SHA256\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256: &'static [u8; 22usize] = b"DHE-RSA-AES128-SHA256\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_SHA256: &'static [u8; 21usize] = b"DH-DSS-AES256-SHA256\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_SHA256: &'static [u8; 21usize] = b"DH-RSA-AES256-SHA256\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256: &'static [u8; 22usize] = b"DHE-DSS-AES256-SHA256\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256: &'static [u8; 22usize] = b"DHE-RSA-AES256-SHA256\0";
pub const TLS1_TXT_ADH_WITH_AES_128_SHA256: &'static [u8; 18usize] = b"ADH-AES128-SHA256\0";
pub const TLS1_TXT_ADH_WITH_AES_256_SHA256: &'static [u8; 18usize] = b"ADH-AES256-SHA256\0";
pub const TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256: &'static [u8; 18usize] = b"AES128-GCM-SHA256\0";
pub const TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384: &'static [u8; 18usize] = b"AES256-GCM-SHA384\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256: &'static [u8; 26usize] =
    b"DHE-RSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384: &'static [u8; 26usize] =
    b"DHE-RSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256: &'static [u8; 25usize] =
    b"DH-RSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384: &'static [u8; 25usize] =
    b"DH-RSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256: &'static [u8; 26usize] =
    b"DHE-DSS-AES128-GCM-SHA256\0";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384: &'static [u8; 26usize] =
    b"DHE-DSS-AES256-GCM-SHA384\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256: &'static [u8; 25usize] =
    b"DH-DSS-AES128-GCM-SHA256\0";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384: &'static [u8; 25usize] =
    b"DH-DSS-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256: &'static [u8; 22usize] = b"ADH-AES128-GCM-SHA256\0";
pub const TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384: &'static [u8; 22usize] = b"ADH-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256: &'static [u8; 26usize] =
    b"ECDHE-ECDSA-AES128-SHA256\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384: &'static [u8; 26usize] =
    b"ECDHE-ECDSA-AES256-SHA384\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256: &'static [u8; 25usize] =
    b"ECDH-ECDSA-AES128-SHA256\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384: &'static [u8; 25usize] =
    b"ECDH-ECDSA-AES256-SHA384\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256: &'static [u8; 24usize] =
    b"ECDHE-RSA-AES128-SHA256\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384: &'static [u8; 24usize] =
    b"ECDHE-RSA-AES256-SHA384\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256: &'static [u8; 23usize] =
    b"ECDH-RSA-AES128-SHA256\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384: &'static [u8; 23usize] =
    b"ECDH-RSA-AES256-SHA384\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: &'static [u8; 30usize] =
    b"ECDHE-ECDSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: &'static [u8; 30usize] =
    b"ECDHE-ECDSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: &'static [u8; 29usize] =
    b"ECDH-ECDSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: &'static [u8; 29usize] =
    b"ECDH-ECDSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256: &'static [u8; 28usize] =
    b"ECDHE-RSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384: &'static [u8; 28usize] =
    b"ECDHE-RSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256: &'static [u8; 27usize] =
    b"ECDH-RSA-AES128-GCM-SHA256\0";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384: &'static [u8; 27usize] =
    b"ECDH-RSA-AES256-GCM-SHA384\0";
pub const TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: &'static [u8; 28usize] =
    b"ECDHE-RSA-CHACHA20-POLY1305\0";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: &'static [u8; 30usize] =
    b"ECDHE-ECDSA-CHACHA20-POLY1305\0";
pub const TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: &'static [u8; 28usize] =
    b"ECDHE-PSK-CHACHA20-POLY1305\0";
pub const TLS1_TXT_AES_128_GCM_SHA256: &'static [u8; 23usize] = b"TLS_AES_128_GCM_SHA256\0";
pub const TLS1_TXT_AES_256_GCM_SHA384: &'static [u8; 23usize] = b"TLS_AES_256_GCM_SHA384\0";
pub const TLS1_TXT_CHACHA20_POLY1305_SHA256: &'static [u8; 29usize] =
    b"TLS_CHACHA20_POLY1305_SHA256\0";
pub const TLS_CT_RSA_SIGN: i32 = 1;
pub const TLS_CT_DSS_SIGN: i32 = 2;
pub const TLS_CT_RSA_FIXED_DH: i32 = 3;
pub const TLS_CT_DSS_FIXED_DH: i32 = 4;
pub const TLS_CT_ECDSA_SIGN: i32 = 64;
pub const TLS_CT_RSA_FIXED_ECDH: i32 = 65;
pub const TLS_CT_ECDSA_FIXED_ECDH: i32 = 66;
pub const TLS_MD_MAX_CONST_SIZE: i32 = 20;
pub const _SYS_TIME_H: i32 = 1;
pub const SSL_KEY_UPDATE_REQUESTED: i32 = 1;
pub const SSL_KEY_UPDATE_NOT_REQUESTED: i32 = 0;
pub const SSL_ERROR_NONE: i32 = 0;
pub const SSL_ERROR_SSL: i32 = 1;
pub const SSL_ERROR_WANT_READ: i32 = 2;
pub const SSL_ERROR_WANT_WRITE: i32 = 3;
pub const SSL_ERROR_WANT_X509_LOOKUP: i32 = 4;
pub const SSL_ERROR_SYSCALL: i32 = 5;
pub const SSL_ERROR_ZERO_RETURN: i32 = 6;
pub const SSL_ERROR_WANT_CONNECT: i32 = 7;
pub const SSL_ERROR_WANT_ACCEPT: i32 = 8;
pub const SSL_ERROR_WANT_CHANNEL_ID_LOOKUP: i32 = 9;
pub const SSL_ERROR_PENDING_SESSION: i32 = 11;
pub const SSL_ERROR_PENDING_CERTIFICATE: i32 = 12;
pub const SSL_ERROR_WANT_PRIVATE_KEY_OPERATION: i32 = 13;
pub const SSL_ERROR_PENDING_TICKET: i32 = 14;
pub const SSL_ERROR_EARLY_DATA_REJECTED: i32 = 15;
pub const SSL_ERROR_WANT_CERTIFICATE_VERIFY: i32 = 16;
pub const SSL_ERROR_HANDOFF: i32 = 17;
pub const SSL_ERROR_HANDBACK: i32 = 18;
pub const SSL_ERROR_WANT_RENEGOTIATE: i32 = 19;
pub const DTLS1_VERSION_MAJOR: i32 = 254;
pub const SSL3_VERSION_MAJOR: i32 = 3;
pub const SSL3_VERSION: i32 = 768;
pub const TLS1_VERSION: i32 = 769;
pub const TLS1_1_VERSION: i32 = 770;
pub const TLS1_2_VERSION: i32 = 771;
pub const TLS1_3_VERSION: i32 = 772;
pub const DTLS1_VERSION: i32 = 65279;
pub const DTLS1_2_VERSION: i32 = 65277;
pub const SSL_OP_NO_QUERY_MTU: i32 = 4096;
pub const SSL_OP_NO_TICKET: i32 = 16384;
pub const SSL_OP_CIPHER_SERVER_PREFERENCE: i32 = 4194304;
pub const SSL_OP_NO_TLSv1: i32 = 67108864;
pub const SSL_OP_NO_TLSv1_2: i32 = 134217728;
pub const SSL_OP_NO_TLSv1_1: i32 = 268435456;
pub const SSL_OP_NO_TLSv1_3: i32 = 536870912;
pub const SSL_OP_NO_DTLSv1: i32 = 67108864;
pub const SSL_OP_NO_DTLSv1_2: i32 = 134217728;
pub const SSL_MODE_ENABLE_PARTIAL_WRITE: i32 = 1;
pub const SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER: i32 = 2;
pub const SSL_MODE_NO_AUTO_CHAIN: i32 = 8;
pub const SSL_MODE_ENABLE_FALSE_START: i32 = 128;
pub const SSL_MODE_CBC_RECORD_SPLITTING: i32 = 256;
pub const SSL_MODE_NO_SESSION_CREATION: i32 = 512;
pub const SSL_MODE_SEND_FALLBACK_SCSV: i32 = 1024;
pub const SSL_SIGN_RSA_PKCS1_SHA1: i32 = 513;
pub const SSL_SIGN_RSA_PKCS1_SHA256: i32 = 1025;
pub const SSL_SIGN_RSA_PKCS1_SHA384: i32 = 1281;
pub const SSL_SIGN_RSA_PKCS1_SHA512: i32 = 1537;
pub const SSL_SIGN_ECDSA_SHA1: i32 = 515;
pub const SSL_SIGN_ECDSA_SECP256R1_SHA256: i32 = 1027;
pub const SSL_SIGN_ECDSA_SECP384R1_SHA384: i32 = 1283;
pub const SSL_SIGN_ECDSA_SECP521R1_SHA512: i32 = 1539;
pub const SSL_SIGN_RSA_PSS_RSAE_SHA256: i32 = 2052;
pub const SSL_SIGN_RSA_PSS_RSAE_SHA384: i32 = 2053;
pub const SSL_SIGN_RSA_PSS_RSAE_SHA512: i32 = 2054;
pub const SSL_SIGN_ED25519: i32 = 2055;
pub const SSL_SIGN_RSA_PKCS1_MD5_SHA1: i32 = 65281;
pub const SSL_FILETYPE_PEM: i32 = 1;
pub const SSL_FILETYPE_ASN1: i32 = 2;
pub const SSL_DEFAULT_CIPHER_LIST: &'static [u8; 4usize] = b"ALL\0";
pub const SSL_MAX_SSL_SESSION_ID_LENGTH: i32 = 32;
pub const SSL_MAX_MASTER_KEY_LENGTH: i32 = 48;
pub const SSL_SESS_CACHE_OFF: i32 = 0;
pub const SSL_SESS_CACHE_CLIENT: i32 = 1;
pub const SSL_SESS_CACHE_SERVER: i32 = 2;
pub const SSL_SESS_CACHE_BOTH: i32 = 3;
pub const SSL_SESS_CACHE_NO_AUTO_CLEAR: i32 = 128;
pub const SSL_SESS_CACHE_NO_INTERNAL_LOOKUP: i32 = 256;
pub const SSL_SESS_CACHE_NO_INTERNAL_STORE: i32 = 512;
pub const SSL_SESS_CACHE_NO_INTERNAL: i32 = 768;
pub const SSL_DEFAULT_SESSION_TIMEOUT: i32 = 7200;
pub const SSL_DEFAULT_SESSION_PSK_DHE_TIMEOUT: i32 = 172800;
pub const SSL_DEFAULT_SESSION_AUTH_TIMEOUT: i32 = 604800;
pub const SSL_MAX_SID_CTX_LENGTH: i32 = 32;
pub const SSL_SESSION_CACHE_MAX_SIZE_DEFAULT: i32 = 20480;
pub const SSL_DEFAULT_TICKET_KEY_ROTATION_INTERVAL: i32 = 172800;
pub const SSL_TICKET_KEY_NAME_LEN: i32 = 16;
pub const SSL_CURVE_SECP224R1: i32 = 21;
pub const SSL_CURVE_SECP256R1: i32 = 23;
pub const SSL_CURVE_SECP384R1: i32 = 24;
pub const SSL_CURVE_SECP521R1: i32 = 25;
pub const SSL_CURVE_X25519: i32 = 29;
pub const SSL_CURVE_CECPQ2: i32 = 16696;
pub const SSL_VERIFY_NONE: i32 = 0;
pub const SSL_VERIFY_PEER: i32 = 1;
pub const SSL_VERIFY_FAIL_IF_NO_PEER_CERT: i32 = 2;
pub const SSL_VERIFY_PEER_IF_NO_OBC: i32 = 4;
pub const TLSEXT_NAMETYPE_host_name: i32 = 0;
pub const SSL_TLSEXT_ERR_OK: i32 = 0;
pub const SSL_TLSEXT_ERR_ALERT_WARNING: i32 = 1;
pub const SSL_TLSEXT_ERR_ALERT_FATAL: i32 = 2;
pub const SSL_TLSEXT_ERR_NOACK: i32 = 3;
pub const OPENSSL_NPN_UNSUPPORTED: i32 = 0;
pub const OPENSSL_NPN_NEGOTIATED: i32 = 1;
pub const OPENSSL_NPN_NO_OVERLAP: i32 = 2;
pub const SRTP_AES128_CM_SHA1_80: i32 = 1;
pub const SRTP_AES128_CM_SHA1_32: i32 = 2;
pub const SRTP_AES128_F8_SHA1_80: i32 = 3;
pub const SRTP_AES128_F8_SHA1_32: i32 = 4;
pub const SRTP_NULL_SHA1_80: i32 = 5;
pub const SRTP_NULL_SHA1_32: i32 = 6;
pub const SRTP_AEAD_AES_128_GCM: i32 = 7;
pub const SRTP_AEAD_AES_256_GCM: i32 = 8;
pub const PSK_MAX_IDENTITY_LEN: i32 = 128;
pub const PSK_MAX_PSK_LEN: i32 = 256;
pub const SSL_AD_REASON_OFFSET: i32 = 1000;
pub const SSL_AD_CLOSE_NOTIFY: i32 = 0;
pub const SSL_AD_UNEXPECTED_MESSAGE: i32 = 10;
pub const SSL_AD_BAD_RECORD_MAC: i32 = 20;
pub const SSL_AD_DECRYPTION_FAILED: i32 = 21;
pub const SSL_AD_RECORD_OVERFLOW: i32 = 22;
pub const SSL_AD_DECOMPRESSION_FAILURE: i32 = 30;
pub const SSL_AD_HANDSHAKE_FAILURE: i32 = 40;
pub const SSL_AD_NO_CERTIFICATE: i32 = 41;
pub const SSL_AD_BAD_CERTIFICATE: i32 = 42;
pub const SSL_AD_UNSUPPORTED_CERTIFICATE: i32 = 43;
pub const SSL_AD_CERTIFICATE_REVOKED: i32 = 44;
pub const SSL_AD_CERTIFICATE_EXPIRED: i32 = 45;
pub const SSL_AD_CERTIFICATE_UNKNOWN: i32 = 46;
pub const SSL_AD_ILLEGAL_PARAMETER: i32 = 47;
pub const SSL_AD_UNKNOWN_CA: i32 = 48;
pub const SSL_AD_ACCESS_DENIED: i32 = 49;
pub const SSL_AD_DECODE_ERROR: i32 = 50;
pub const SSL_AD_DECRYPT_ERROR: i32 = 51;
pub const SSL_AD_EXPORT_RESTRICTION: i32 = 60;
pub const SSL_AD_PROTOCOL_VERSION: i32 = 70;
pub const SSL_AD_INSUFFICIENT_SECURITY: i32 = 71;
pub const SSL_AD_INTERNAL_ERROR: i32 = 80;
pub const SSL_AD_INAPPROPRIATE_FALLBACK: i32 = 86;
pub const SSL_AD_USER_CANCELLED: i32 = 90;
pub const SSL_AD_NO_RENEGOTIATION: i32 = 100;
pub const SSL_AD_MISSING_EXTENSION: i32 = 109;
pub const SSL_AD_UNSUPPORTED_EXTENSION: i32 = 110;
pub const SSL_AD_CERTIFICATE_UNOBTAINABLE: i32 = 111;
pub const SSL_AD_UNRECOGNIZED_NAME: i32 = 112;
pub const SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE: i32 = 113;
pub const SSL_AD_BAD_CERTIFICATE_HASH_VALUE: i32 = 114;
pub const SSL_AD_UNKNOWN_PSK_IDENTITY: i32 = 115;
pub const SSL_AD_CERTIFICATE_REQUIRED: i32 = 116;
pub const SSL_AD_NO_APPLICATION_PROTOCOL: i32 = 120;
pub const SSL_MAX_CERT_LIST_DEFAULT: i32 = 102400;
pub const SSL_ST_CONNECT: i32 = 4096;
pub const SSL_ST_ACCEPT: i32 = 8192;
pub const SSL_ST_MASK: i32 = 4095;
pub const SSL_ST_INIT: i32 = 12288;
pub const SSL_ST_OK: i32 = 3;
pub const SSL_ST_RENEGOTIATE: i32 = 12292;
pub const SSL_ST_BEFORE: i32 = 12293;
pub const TLS_ST_OK: i32 = 3;
pub const TLS_ST_BEFORE: i32 = 12293;
pub const SSL_CB_LOOP: i32 = 1;
pub const SSL_CB_EXIT: i32 = 2;
pub const SSL_CB_READ: i32 = 4;
pub const SSL_CB_WRITE: i32 = 8;
pub const SSL_CB_ALERT: i32 = 16384;
pub const SSL_CB_READ_ALERT: i32 = 16388;
pub const SSL_CB_WRITE_ALERT: i32 = 16392;
pub const SSL_CB_ACCEPT_LOOP: i32 = 8193;
pub const SSL_CB_ACCEPT_EXIT: i32 = 8194;
pub const SSL_CB_CONNECT_LOOP: i32 = 4097;
pub const SSL_CB_CONNECT_EXIT: i32 = 4098;
pub const SSL_CB_HANDSHAKE_START: i32 = 16;
pub const SSL_CB_HANDSHAKE_DONE: i32 = 32;
pub const SSL_SENT_SHUTDOWN: i32 = 1;
pub const SSL_RECEIVED_SHUTDOWN: i32 = 2;
pub const SSL_MODE_HANDSHAKE_CUTTHROUGH: i32 = 128;
pub const SSL_MODE_AUTO_RETRY: i32 = 0;
pub const SSL_MODE_RELEASE_BUFFERS: i32 = 0;
pub const SSL_MODE_SEND_CLIENTHELLO_TIME: i32 = 0;
pub const SSL_MODE_SEND_SERVERHELLO_TIME: i32 = 0;
pub const SSL_OP_ALL: i32 = 0;
pub const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: i32 = 0;
pub const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: i32 = 0;
pub const SSL_OP_EPHEMERAL_RSA: i32 = 0;
pub const SSL_OP_LEGACY_SERVER_CONNECT: i32 = 0;
pub const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: i32 = 0;
pub const SSL_OP_MICROSOFT_SESS_ID_BUG: i32 = 0;
pub const SSL_OP_MSIE_SSLV2_RSA_PADDING: i32 = 0;
pub const SSL_OP_NETSCAPE_CA_DN_BUG: i32 = 0;
pub const SSL_OP_NETSCAPE_CHALLENGE_BUG: i32 = 0;
pub const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: i32 = 0;
pub const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: i32 = 0;
pub const SSL_OP_NO_COMPRESSION: i32 = 0;
pub const SSL_OP_NO_RENEGOTIATION: i32 = 0;
pub const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: i32 = 0;
pub const SSL_OP_NO_SSLv2: i32 = 0;
pub const SSL_OP_NO_SSLv3: i32 = 0;
pub const SSL_OP_PKCS1_CHECK_1: i32 = 0;
pub const SSL_OP_PKCS1_CHECK_2: i32 = 0;
pub const SSL_OP_SINGLE_DH_USE: i32 = 0;
pub const SSL_OP_SINGLE_ECDH_USE: i32 = 0;
pub const SSL_OP_SSLEAY_080_CLIENT_DH_BUG: i32 = 0;
pub const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: i32 = 0;
pub const SSL_OP_TLS_BLOCK_PADDING_BUG: i32 = 0;
pub const SSL_OP_TLS_D5_BUG: i32 = 0;
pub const SSL_OP_TLS_ROLLBACK_BUG: i32 = 0;
pub const SSL_VERIFY_CLIENT_ONCE: i32 = 0;
pub const SSL_NOTHING: i32 = 0;
pub const SSL_WRITING: i32 = 3;
pub const SSL_READING: i32 = 2;
pub const SSL_TXT_MEDIUM: &'static [u8; 7usize] = b"MEDIUM\0";
pub const SSL_TXT_HIGH: &'static [u8; 5usize] = b"HIGH\0";
pub const SSL_TXT_FIPS: &'static [u8; 5usize] = b"FIPS\0";
pub const SSL_TXT_kRSA: &'static [u8; 5usize] = b"kRSA\0";
pub const SSL_TXT_kDHE: &'static [u8; 5usize] = b"kDHE\0";
pub const SSL_TXT_kEDH: &'static [u8; 5usize] = b"kEDH\0";
pub const SSL_TXT_kECDHE: &'static [u8; 7usize] = b"kECDHE\0";
pub const SSL_TXT_kEECDH: &'static [u8; 7usize] = b"kEECDH\0";
pub const SSL_TXT_kPSK: &'static [u8; 5usize] = b"kPSK\0";
pub const SSL_TXT_aRSA: &'static [u8; 5usize] = b"aRSA\0";
pub const SSL_TXT_aECDSA: &'static [u8; 7usize] = b"aECDSA\0";
pub const SSL_TXT_aPSK: &'static [u8; 5usize] = b"aPSK\0";
pub const SSL_TXT_DH: &'static [u8; 3usize] = b"DH\0";
pub const SSL_TXT_DHE: &'static [u8; 4usize] = b"DHE\0";
pub const SSL_TXT_EDH: &'static [u8; 4usize] = b"EDH\0";
pub const SSL_TXT_RSA: &'static [u8; 4usize] = b"RSA\0";
pub const SSL_TXT_ECDH: &'static [u8; 5usize] = b"ECDH\0";
pub const SSL_TXT_ECDHE: &'static [u8; 6usize] = b"ECDHE\0";
pub const SSL_TXT_EECDH: &'static [u8; 6usize] = b"EECDH\0";
pub const SSL_TXT_ECDSA: &'static [u8; 6usize] = b"ECDSA\0";
pub const SSL_TXT_PSK: &'static [u8; 4usize] = b"PSK\0";
pub const SSL_TXT_3DES: &'static [u8; 5usize] = b"3DES\0";
pub const SSL_TXT_RC4: &'static [u8; 4usize] = b"RC4\0";
pub const SSL_TXT_AES128: &'static [u8; 7usize] = b"AES128\0";
pub const SSL_TXT_AES256: &'static [u8; 7usize] = b"AES256\0";
pub const SSL_TXT_AES: &'static [u8; 4usize] = b"AES\0";
pub const SSL_TXT_AES_GCM: &'static [u8; 7usize] = b"AESGCM\0";
pub const SSL_TXT_CHACHA20: &'static [u8; 9usize] = b"CHACHA20\0";
pub const SSL_TXT_MD5: &'static [u8; 4usize] = b"MD5\0";
pub const SSL_TXT_SHA1: &'static [u8; 5usize] = b"SHA1\0";
pub const SSL_TXT_SHA: &'static [u8; 4usize] = b"SHA\0";
pub const SSL_TXT_SHA256: &'static [u8; 7usize] = b"SHA256\0";
pub const SSL_TXT_SHA384: &'static [u8; 7usize] = b"SHA384\0";
pub const SSL_TXT_SSLV3: &'static [u8; 6usize] = b"SSLv3\0";
pub const SSL_TXT_TLSV1: &'static [u8; 6usize] = b"TLSv1\0";
pub const SSL_TXT_TLSV1_1: &'static [u8; 8usize] = b"TLSv1.1\0";
pub const SSL_TXT_TLSV1_2: &'static [u8; 8usize] = b"TLSv1.2\0";
pub const SSL_TXT_TLSV1_3: &'static [u8; 8usize] = b"TLSv1.3\0";
pub const SSL_TXT_ALL: &'static [u8; 4usize] = b"ALL\0";
pub const SSL_TXT_CMPDEF: &'static [u8; 20usize] = b"COMPLEMENTOFDEFAULT\0";
pub const OPENSSL_INIT_NO_LOAD_SSL_STRINGS: i32 = 0;
pub const OPENSSL_INIT_LOAD_SSL_STRINGS: i32 = 0;
pub const OPENSSL_INIT_SSL_DEFAULT: i32 = 0;
pub const SSL_SIGN_RSA_PSS_SHA256: i32 = 2052;
pub const SSL_SIGN_RSA_PSS_SHA384: i32 = 2053;
pub const SSL_SIGN_RSA_PSS_SHA512: i32 = 2054;
pub const SSL_R_APP_DATA_IN_HANDSHAKE: i32 = 100;
pub const SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT: i32 = 101;
pub const SSL_R_BAD_ALERT: i32 = 102;
pub const SSL_R_BAD_CHANGE_CIPHER_SPEC: i32 = 103;
pub const SSL_R_BAD_DATA_RETURNED_BY_CALLBACK: i32 = 104;
pub const SSL_R_BAD_DH_P_LENGTH: i32 = 105;
pub const SSL_R_BAD_DIGEST_LENGTH: i32 = 106;
pub const SSL_R_BAD_ECC_CERT: i32 = 107;
pub const SSL_R_BAD_ECPOINT: i32 = 108;
pub const SSL_R_BAD_HANDSHAKE_RECORD: i32 = 109;
pub const SSL_R_BAD_HELLO_REQUEST: i32 = 110;
pub const SSL_R_BAD_LENGTH: i32 = 111;
pub const SSL_R_BAD_PACKET_LENGTH: i32 = 112;
pub const SSL_R_BAD_RSA_ENCRYPT: i32 = 113;
pub const SSL_R_BAD_SIGNATURE: i32 = 114;
pub const SSL_R_BAD_SRTP_MKI_VALUE: i32 = 115;
pub const SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST: i32 = 116;
pub const SSL_R_BAD_SSL_FILETYPE: i32 = 117;
pub const SSL_R_BAD_WRITE_RETRY: i32 = 118;
pub const SSL_R_BIO_NOT_SET: i32 = 119;
pub const SSL_R_BN_LIB: i32 = 120;
pub const SSL_R_BUFFER_TOO_SMALL: i32 = 121;
pub const SSL_R_CA_DN_LENGTH_MISMATCH: i32 = 122;
pub const SSL_R_CA_DN_TOO_LONG: i32 = 123;
pub const SSL_R_CCS_RECEIVED_EARLY: i32 = 124;
pub const SSL_R_CERTIFICATE_VERIFY_FAILED: i32 = 125;
pub const SSL_R_CERT_CB_ERROR: i32 = 126;
pub const SSL_R_CERT_LENGTH_MISMATCH: i32 = 127;
pub const SSL_R_CHANNEL_ID_NOT_P256: i32 = 128;
pub const SSL_R_CHANNEL_ID_SIGNATURE_INVALID: i32 = 129;
pub const SSL_R_CIPHER_OR_HASH_UNAVAILABLE: i32 = 130;
pub const SSL_R_CLIENTHELLO_PARSE_FAILED: i32 = 131;
pub const SSL_R_CLIENTHELLO_TLSEXT: i32 = 132;
pub const SSL_R_CONNECTION_REJECTED: i32 = 133;
pub const SSL_R_CONNECTION_TYPE_NOT_SET: i32 = 134;
pub const SSL_R_CUSTOM_EXTENSION_ERROR: i32 = 135;
pub const SSL_R_DATA_LENGTH_TOO_LONG: i32 = 136;
pub const SSL_R_DECODE_ERROR: i32 = 137;
pub const SSL_R_DECRYPTION_FAILED: i32 = 138;
pub const SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC: i32 = 139;
pub const SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG: i32 = 140;
pub const SSL_R_DH_P_TOO_LONG: i32 = 141;
pub const SSL_R_DIGEST_CHECK_FAILED: i32 = 142;
pub const SSL_R_DTLS_MESSAGE_TOO_BIG: i32 = 143;
pub const SSL_R_ECC_CERT_NOT_FOR_SIGNING: i32 = 144;
pub const SSL_R_EMS_STATE_INCONSISTENT: i32 = 145;
pub const SSL_R_ENCRYPTED_LENGTH_TOO_LONG: i32 = 146;
pub const SSL_R_ERROR_ADDING_EXTENSION: i32 = 147;
pub const SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST: i32 = 148;
pub const SSL_R_ERROR_PARSING_EXTENSION: i32 = 149;
pub const SSL_R_EXCESSIVE_MESSAGE_SIZE: i32 = 150;
pub const SSL_R_EXTRA_DATA_IN_MESSAGE: i32 = 151;
pub const SSL_R_FRAGMENT_MISMATCH: i32 = 152;
pub const SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION: i32 = 153;
pub const SSL_R_HANDSHAKE_FAILURE_ON_CLIENT_HELLO: i32 = 154;
pub const SSL_R_HTTPS_PROXY_REQUEST: i32 = 155;
pub const SSL_R_HTTP_REQUEST: i32 = 156;
pub const SSL_R_INAPPROPRIATE_FALLBACK: i32 = 157;
pub const SSL_R_INVALID_COMMAND: i32 = 158;
pub const SSL_R_INVALID_MESSAGE: i32 = 159;
pub const SSL_R_INVALID_SSL_SESSION: i32 = 160;
pub const SSL_R_INVALID_TICKET_KEYS_LENGTH: i32 = 161;
pub const SSL_R_LENGTH_MISMATCH: i32 = 162;
pub const SSL_R_MISSING_EXTENSION: i32 = 164;
pub const SSL_R_MISSING_RSA_CERTIFICATE: i32 = 165;
pub const SSL_R_MISSING_TMP_DH_KEY: i32 = 166;
pub const SSL_R_MISSING_TMP_ECDH_KEY: i32 = 167;
pub const SSL_R_MIXED_SPECIAL_OPERATOR_WITH_GROUPS: i32 = 168;
pub const SSL_R_MTU_TOO_SMALL: i32 = 169;
pub const SSL_R_NEGOTIATED_BOTH_NPN_AND_ALPN: i32 = 170;
pub const SSL_R_NESTED_GROUP: i32 = 171;
pub const SSL_R_NO_CERTIFICATES_RETURNED: i32 = 172;
pub const SSL_R_NO_CERTIFICATE_ASSIGNED: i32 = 173;
pub const SSL_R_NO_CERTIFICATE_SET: i32 = 174;
pub const SSL_R_NO_CIPHERS_AVAILABLE: i32 = 175;
pub const SSL_R_NO_CIPHERS_PASSED: i32 = 176;
pub const SSL_R_NO_CIPHER_MATCH: i32 = 177;
pub const SSL_R_NO_COMPRESSION_SPECIFIED: i32 = 178;
pub const SSL_R_NO_METHOD_SPECIFIED: i32 = 179;
pub const SSL_R_NO_P256_SUPPORT: i32 = 180;
pub const SSL_R_NO_PRIVATE_KEY_ASSIGNED: i32 = 181;
pub const SSL_R_NO_RENEGOTIATION: i32 = 182;
pub const SSL_R_NO_REQUIRED_DIGEST: i32 = 183;
pub const SSL_R_NO_SHARED_CIPHER: i32 = 184;
pub const SSL_R_NULL_SSL_CTX: i32 = 185;
pub const SSL_R_NULL_SSL_METHOD_PASSED: i32 = 186;
pub const SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED: i32 = 187;
pub const SSL_R_OLD_SESSION_VERSION_NOT_RETURNED: i32 = 188;
pub const SSL_R_OUTPUT_ALIASES_INPUT: i32 = 189;
pub const SSL_R_PARSE_TLSEXT: i32 = 190;
pub const SSL_R_PATH_TOO_LONG: i32 = 191;
pub const SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE: i32 = 192;
pub const SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE: i32 = 193;
pub const SSL_R_PROTOCOL_IS_SHUTDOWN: i32 = 194;
pub const SSL_R_PSK_IDENTITY_NOT_FOUND: i32 = 195;
pub const SSL_R_PSK_NO_CLIENT_CB: i32 = 196;
pub const SSL_R_PSK_NO_SERVER_CB: i32 = 197;
pub const SSL_R_READ_TIMEOUT_EXPIRED: i32 = 198;
pub const SSL_R_RECORD_LENGTH_MISMATCH: i32 = 199;
pub const SSL_R_RECORD_TOO_LARGE: i32 = 200;
pub const SSL_R_RENEGOTIATION_ENCODING_ERR: i32 = 201;
pub const SSL_R_RENEGOTIATION_MISMATCH: i32 = 202;
pub const SSL_R_REQUIRED_CIPHER_MISSING: i32 = 203;
pub const SSL_R_RESUMED_EMS_SESSION_WITHOUT_EMS_EXTENSION: i32 = 204;
pub const SSL_R_RESUMED_NON_EMS_SESSION_WITH_EMS_EXTENSION: i32 = 205;
pub const SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING: i32 = 206;
pub const SSL_R_SERVERHELLO_TLSEXT: i32 = 207;
pub const SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED: i32 = 208;
pub const SSL_R_SESSION_MAY_NOT_BE_CREATED: i32 = 209;
pub const SSL_R_SIGNATURE_ALGORITHMS_EXTENSION_SENT_BY_SERVER: i32 = 210;
pub const SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES: i32 = 211;
pub const SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE: i32 = 212;
pub const SSL_R_SSL3_EXT_INVALID_SERVERNAME: i32 = 213;
pub const SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION: i32 = 214;
pub const SSL_R_SSL_HANDSHAKE_FAILURE: i32 = 215;
pub const SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG: i32 = 216;
pub const SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST: i32 = 217;
pub const SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG: i32 = 218;
pub const SSL_R_TOO_MANY_EMPTY_FRAGMENTS: i32 = 219;
pub const SSL_R_TOO_MANY_WARNING_ALERTS: i32 = 220;
pub const SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS: i32 = 221;
pub const SSL_R_UNEXPECTED_EXTENSION: i32 = 222;
pub const SSL_R_UNEXPECTED_MESSAGE: i32 = 223;
pub const SSL_R_UNEXPECTED_OPERATOR_IN_GROUP: i32 = 224;
pub const SSL_R_UNEXPECTED_RECORD: i32 = 225;
pub const SSL_R_UNINITIALIZED: i32 = 226;
pub const SSL_R_UNKNOWN_ALERT_TYPE: i32 = 227;
pub const SSL_R_UNKNOWN_CERTIFICATE_TYPE: i32 = 228;
pub const SSL_R_UNKNOWN_CIPHER_RETURNED: i32 = 229;
pub const SSL_R_UNKNOWN_CIPHER_TYPE: i32 = 230;
pub const SSL_R_UNKNOWN_DIGEST: i32 = 231;
pub const SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE: i32 = 232;
pub const SSL_R_UNKNOWN_PROTOCOL: i32 = 233;
pub const SSL_R_UNKNOWN_SSL_VERSION: i32 = 234;
pub const SSL_R_UNKNOWN_STATE: i32 = 235;
pub const SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED: i32 = 236;
pub const SSL_R_UNSUPPORTED_CIPHER: i32 = 237;
pub const SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM: i32 = 238;
pub const SSL_R_UNSUPPORTED_ELLIPTIC_CURVE: i32 = 239;
pub const SSL_R_UNSUPPORTED_PROTOCOL: i32 = 240;
pub const SSL_R_WRONG_CERTIFICATE_TYPE: i32 = 241;
pub const SSL_R_WRONG_CIPHER_RETURNED: i32 = 242;
pub const SSL_R_WRONG_CURVE: i32 = 243;
pub const SSL_R_WRONG_MESSAGE_TYPE: i32 = 244;
pub const SSL_R_WRONG_SIGNATURE_TYPE: i32 = 245;
pub const SSL_R_WRONG_SSL_VERSION: i32 = 246;
pub const SSL_R_WRONG_VERSION_NUMBER: i32 = 247;
pub const SSL_R_X509_LIB: i32 = 248;
pub const SSL_R_X509_VERIFICATION_SETUP_PROBLEMS: i32 = 249;
pub const SSL_R_SHUTDOWN_WHILE_IN_INIT: i32 = 250;
pub const SSL_R_INVALID_OUTER_RECORD_TYPE: i32 = 251;
pub const SSL_R_UNSUPPORTED_PROTOCOL_FOR_CUSTOM_KEY: i32 = 252;
pub const SSL_R_NO_COMMON_SIGNATURE_ALGORITHMS: i32 = 253;
pub const SSL_R_DOWNGRADE_DETECTED: i32 = 254;
pub const SSL_R_EXCESS_HANDSHAKE_DATA: i32 = 255;
pub const SSL_R_INVALID_COMPRESSION_LIST: i32 = 256;
pub const SSL_R_DUPLICATE_EXTENSION: i32 = 257;
pub const SSL_R_MISSING_KEY_SHARE: i32 = 258;
pub const SSL_R_INVALID_ALPN_PROTOCOL: i32 = 259;
pub const SSL_R_TOO_MANY_KEY_UPDATES: i32 = 260;
pub const SSL_R_BLOCK_CIPHER_PAD_IS_WRONG: i32 = 261;
pub const SSL_R_NO_CIPHERS_SPECIFIED: i32 = 262;
pub const SSL_R_RENEGOTIATION_EMS_MISMATCH: i32 = 263;
pub const SSL_R_DUPLICATE_KEY_SHARE: i32 = 264;
pub const SSL_R_NO_GROUPS_SPECIFIED: i32 = 265;
pub const SSL_R_NO_SHARED_GROUP: i32 = 266;
pub const SSL_R_PRE_SHARED_KEY_MUST_BE_LAST: i32 = 267;
pub const SSL_R_OLD_SESSION_PRF_HASH_MISMATCH: i32 = 268;
pub const SSL_R_INVALID_SCT_LIST: i32 = 269;
pub const SSL_R_TOO_MUCH_SKIPPED_EARLY_DATA: i32 = 270;
pub const SSL_R_PSK_IDENTITY_BINDER_COUNT_MISMATCH: i32 = 271;
pub const SSL_R_CANNOT_PARSE_LEAF_CERT: i32 = 272;
pub const SSL_R_SERVER_CERT_CHANGED: i32 = 273;
pub const SSL_R_CERTIFICATE_AND_PRIVATE_KEY_MISMATCH: i32 = 274;
pub const SSL_R_CANNOT_HAVE_BOTH_PRIVKEY_AND_METHOD: i32 = 275;
pub const SSL_R_TICKET_ENCRYPTION_FAILED: i32 = 276;
pub const SSL_R_ALPN_MISMATCH_ON_EARLY_DATA: i32 = 277;
pub const SSL_R_WRONG_VERSION_ON_EARLY_DATA: i32 = 278;
pub const SSL_R_UNEXPECTED_EXTENSION_ON_EARLY_DATA: i32 = 279;
pub const SSL_R_NO_SUPPORTED_VERSIONS_ENABLED: i32 = 280;
pub const SSL_R_APPLICATION_DATA_INSTEAD_OF_HANDSHAKE: i32 = 281;
pub const SSL_R_EMPTY_HELLO_RETRY_REQUEST: i32 = 282;
pub const SSL_R_EARLY_DATA_NOT_IN_USE: i32 = 283;
pub const SSL_R_HANDSHAKE_NOT_COMPLETE: i32 = 284;
pub const SSL_R_NEGOTIATED_TB_WITHOUT_EMS_OR_RI: i32 = 285;
pub const SSL_R_SERVER_ECHOED_INVALID_SESSION_ID: i32 = 286;
pub const SSL_R_PRIVATE_KEY_OPERATION_FAILED: i32 = 287;
pub const SSL_R_SECOND_SERVERHELLO_VERSION_MISMATCH: i32 = 288;
pub const SSL_R_OCSP_CB_ERROR: i32 = 289;
pub const SSL_R_SSL_SESSION_ID_TOO_LONG: i32 = 290;
pub const SSL_R_APPLICATION_DATA_ON_SHUTDOWN: i32 = 291;
pub const SSL_R_CERT_DECOMPRESSION_FAILED: i32 = 292;
pub const SSL_R_UNCOMPRESSED_CERT_TOO_LARGE: i32 = 293;
pub const SSL_R_UNKNOWN_CERT_COMPRESSION_ALG: i32 = 294;
pub const SSL_R_INVALID_SIGNATURE_ALGORITHM: i32 = 295;
pub const SSL_R_DUPLICATE_SIGNATURE_ALGORITHM: i32 = 296;
pub const SSL_R_TLS13_DOWNGRADE: i32 = 297;
pub const SSL_R_QUIC_INTERNAL_ERROR: i32 = 298;
pub const SSL_R_WRONG_ENCRYPTION_LEVEL_RECEIVED: i32 = 299;
pub const SSL_R_TOO_MUCH_READ_EARLY_DATA: i32 = 300;
pub const SSL_R_INVALID_DELEGATED_CREDENTIAL: i32 = 301;
pub const SSL_R_KEY_USAGE_BIT_INCORRECT: i32 = 302;
pub const SSL_R_INCONSISTENT_CLIENT_HELLO: i32 = 303;
pub const SSL_R_CIPHER_MISMATCH_ON_EARLY_DATA: i32 = 304;
pub const SSL_R_QUIC_TRANSPORT_PARAMETERS_MISCONFIGURED: i32 = 305;
pub const SSL_R_UNEXPECTED_COMPATIBILITY_MODE: i32 = 306;
pub const SSL_R_MISSING_ALPN: i32 = 307;
pub const SSL_R_NEGOTIATED_ALPS_WITHOUT_ALPN: i32 = 308;
pub const SSL_R_ALPS_MISMATCH_ON_EARLY_DATA: i32 = 309;
pub const SSL_R_SSLV3_ALERT_CLOSE_NOTIFY: i32 = 1000;
pub const SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE: i32 = 1010;
pub const SSL_R_SSLV3_ALERT_BAD_RECORD_MAC: i32 = 1020;
pub const SSL_R_TLSV1_ALERT_DECRYPTION_FAILED: i32 = 1021;
pub const SSL_R_TLSV1_ALERT_RECORD_OVERFLOW: i32 = 1022;
pub const SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE: i32 = 1030;
pub const SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE: i32 = 1040;
pub const SSL_R_SSLV3_ALERT_NO_CERTIFICATE: i32 = 1041;
pub const SSL_R_SSLV3_ALERT_BAD_CERTIFICATE: i32 = 1042;
pub const SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE: i32 = 1043;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED: i32 = 1044;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED: i32 = 1045;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN: i32 = 1046;
pub const SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER: i32 = 1047;
pub const SSL_R_TLSV1_ALERT_UNKNOWN_CA: i32 = 1048;
pub const SSL_R_TLSV1_ALERT_ACCESS_DENIED: i32 = 1049;
pub const SSL_R_TLSV1_ALERT_DECODE_ERROR: i32 = 1050;
pub const SSL_R_TLSV1_ALERT_DECRYPT_ERROR: i32 = 1051;
pub const SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION: i32 = 1060;
pub const SSL_R_TLSV1_ALERT_PROTOCOL_VERSION: i32 = 1070;
pub const SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY: i32 = 1071;
pub const SSL_R_TLSV1_ALERT_INTERNAL_ERROR: i32 = 1080;
pub const SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK: i32 = 1086;
pub const SSL_R_TLSV1_ALERT_USER_CANCELLED: i32 = 1090;
pub const SSL_R_TLSV1_ALERT_NO_RENEGOTIATION: i32 = 1100;
pub const SSL_R_TLSV1_ALERT_UNSUPPORTED_EXTENSION: i32 = 1110;
pub const SSL_R_TLSV1_ALERT_CERTIFICATE_UNOBTAINABLE: i32 = 1111;
pub const SSL_R_TLSV1_ALERT_UNRECOGNIZED_NAME: i32 = 1112;
pub const SSL_R_TLSV1_ALERT_BAD_CERTIFICATE_STATUS_RESPONSE: i32 = 1113;
pub const SSL_R_TLSV1_ALERT_BAD_CERTIFICATE_HASH_VALUE: i32 = 1114;
pub const SSL_R_TLSV1_ALERT_UNKNOWN_PSK_IDENTITY: i32 = 1115;
pub const SSL_R_TLSV1_ALERT_CERTIFICATE_REQUIRED: i32 = 1116;
pub const SSL_R_TLSV1_ALERT_NO_APPLICATION_PROTOCOL: i32 = 1120;
pub const TRUST_TOKEN_MAX_PRIVATE_KEY_SIZE: i32 = 512;
pub const TRUST_TOKEN_MAX_PUBLIC_KEY_SIZE: i32 = 512;
pub const TRUST_TOKEN_R_KEYGEN_FAILURE: i32 = 100;
pub const TRUST_TOKEN_R_BUFFER_TOO_SMALL: i32 = 101;
pub const TRUST_TOKEN_R_OVER_BATCHSIZE: i32 = 102;
pub const TRUST_TOKEN_R_DECODE_ERROR: i32 = 103;
pub const TRUST_TOKEN_R_SRR_SIGNATURE_ERROR: i32 = 104;
pub const TRUST_TOKEN_R_DECODE_FAILURE: i32 = 105;
pub const TRUST_TOKEN_R_INVALID_METADATA: i32 = 106;
pub const TRUST_TOKEN_R_TOO_MANY_KEYS: i32 = 107;
pub const TRUST_TOKEN_R_NO_KEYS_CONFIGURED: i32 = 108;
pub const TRUST_TOKEN_R_INVALID_KEY_ID: i32 = 109;
pub const TRUST_TOKEN_R_INVALID_TOKEN: i32 = 110;
pub const TRUST_TOKEN_R_BAD_VALIDITY_CHECK: i32 = 111;
pub const TRUST_TOKEN_R_NO_SRR_KEY_CONFIGURED: i32 = 112;
pub const TRUST_TOKEN_R_INVALID_METADATA_KEY: i32 = 113;
pub const TRUST_TOKEN_R_INVALID_PROOF: i32 = 114;
pub const CONF_MFLAGS_DEFAULT_SECTION: i32 = 0;
pub const CONF_MFLAGS_IGNORE_MISSING_FILE: i32 = 0;
pub const CONF_R_LIST_CANNOT_BE_NULL: i32 = 100;
pub const CONF_R_MISSING_CLOSE_SQUARE_BRACKET: i32 = 101;
pub const CONF_R_MISSING_EQUAL_SIGN: i32 = 102;
pub const CONF_R_NO_CLOSE_BRACE: i32 = 103;
pub const CONF_R_UNABLE_TO_CREATE_NEW_SECTION: i32 = 104;
pub const CONF_R_VARIABLE_HAS_NO_VALUE: i32 = 105;
pub const CONF_R_VARIABLE_EXPANSION_TOO_LONG: i32 = 106;
pub const CTX_TEST: i32 = 1;
pub const X509V3_EXT_DYNAMIC: i32 = 1;
pub const X509V3_EXT_CTX_DEP: i32 = 2;
pub const X509V3_EXT_MULTILINE: i32 = 4;
pub const GEN_OTHERNAME: i32 = 0;
pub const GEN_EMAIL: i32 = 1;
pub const GEN_DNS: i32 = 2;
pub const GEN_X400: i32 = 3;
pub const GEN_DIRNAME: i32 = 4;
pub const GEN_EDIPARTY: i32 = 5;
pub const GEN_URI: i32 = 6;
pub const GEN_IPADD: i32 = 7;
pub const GEN_RID: i32 = 8;
pub const CRLDP_ALL_REASONS: i32 = 32895;
pub const CRL_REASON_NONE: i32 = -1;
pub const CRL_REASON_UNSPECIFIED: i32 = 0;
pub const CRL_REASON_KEY_COMPROMISE: i32 = 1;
pub const CRL_REASON_CA_COMPROMISE: i32 = 2;
pub const CRL_REASON_AFFILIATION_CHANGED: i32 = 3;
pub const CRL_REASON_SUPERSEDED: i32 = 4;
pub const CRL_REASON_CESSATION_OF_OPERATION: i32 = 5;
pub const CRL_REASON_CERTIFICATE_HOLD: i32 = 6;
pub const CRL_REASON_REMOVE_FROM_CRL: i32 = 8;
pub const CRL_REASON_PRIVILEGE_WITHDRAWN: i32 = 9;
pub const CRL_REASON_AA_COMPROMISE: i32 = 10;
pub const IDP_PRESENT: i32 = 1;
pub const IDP_INVALID: i32 = 2;
pub const IDP_ONLYUSER: i32 = 4;
pub const IDP_ONLYCA: i32 = 8;
pub const IDP_ONLYATTR: i32 = 16;
pub const IDP_INDIRECT: i32 = 32;
pub const IDP_REASONS: i32 = 64;
pub const EXFLAG_BCONS: i32 = 1;
pub const EXFLAG_KUSAGE: i32 = 2;
pub const EXFLAG_XKUSAGE: i32 = 4;
pub const EXFLAG_NSCERT: i32 = 8;
pub const EXFLAG_CA: i32 = 16;
pub const EXFLAG_SI: i32 = 32;
pub const EXFLAG_V1: i32 = 64;
pub const EXFLAG_INVALID: i32 = 128;
pub const EXFLAG_SET: i32 = 256;
pub const EXFLAG_CRITICAL: i32 = 512;
pub const EXFLAG_PROXY: i32 = 1024;
pub const EXFLAG_INVALID_POLICY: i32 = 2048;
pub const EXFLAG_FRESHEST: i32 = 4096;
pub const EXFLAG_SS: i32 = 8192;
pub const KU_DIGITAL_SIGNATURE: i32 = 128;
pub const KU_NON_REPUDIATION: i32 = 64;
pub const KU_KEY_ENCIPHERMENT: i32 = 32;
pub const KU_DATA_ENCIPHERMENT: i32 = 16;
pub const KU_KEY_AGREEMENT: i32 = 8;
pub const KU_KEY_CERT_SIGN: i32 = 4;
pub const KU_CRL_SIGN: i32 = 2;
pub const KU_ENCIPHER_ONLY: i32 = 1;
pub const KU_DECIPHER_ONLY: i32 = 32768;
pub const NS_SSL_CLIENT: i32 = 128;
pub const NS_SSL_SERVER: i32 = 64;
pub const NS_SMIME: i32 = 32;
pub const NS_OBJSIGN: i32 = 16;
pub const NS_SSL_CA: i32 = 4;
pub const NS_SMIME_CA: i32 = 2;
pub const NS_OBJSIGN_CA: i32 = 1;
pub const NS_ANY_CA: i32 = 7;
pub const XKU_SSL_SERVER: i32 = 1;
pub const XKU_SSL_CLIENT: i32 = 2;
pub const XKU_SMIME: i32 = 4;
pub const XKU_CODE_SIGN: i32 = 8;
pub const XKU_SGC: i32 = 16;
pub const XKU_OCSP_SIGN: i32 = 32;
pub const XKU_TIMESTAMP: i32 = 64;
pub const XKU_DVCS: i32 = 128;
pub const XKU_ANYEKU: i32 = 256;
pub const X509_PURPOSE_DYNAMIC: i32 = 1;
pub const X509_PURPOSE_DYNAMIC_NAME: i32 = 2;
pub const X509_PURPOSE_SSL_CLIENT: i32 = 1;
pub const X509_PURPOSE_SSL_SERVER: i32 = 2;
pub const X509_PURPOSE_NS_SSL_SERVER: i32 = 3;
pub const X509_PURPOSE_SMIME_SIGN: i32 = 4;
pub const X509_PURPOSE_SMIME_ENCRYPT: i32 = 5;
pub const X509_PURPOSE_CRL_SIGN: i32 = 6;
pub const X509_PURPOSE_ANY: i32 = 7;
pub const X509_PURPOSE_OCSP_HELPER: i32 = 8;
pub const X509_PURPOSE_TIMESTAMP_SIGN: i32 = 9;
pub const X509_PURPOSE_MIN: i32 = 1;
pub const X509_PURPOSE_MAX: i32 = 9;
pub const X509V3_ADD_OP_MASK: i32 = 15;
pub const X509V3_ADD_DEFAULT: i32 = 0;
pub const X509V3_ADD_APPEND: i32 = 1;
pub const X509V3_ADD_REPLACE: i32 = 2;
pub const X509V3_ADD_REPLACE_EXISTING: i32 = 3;
pub const X509V3_ADD_KEEP_EXISTING: i32 = 4;
pub const X509V3_ADD_DELETE: i32 = 5;
pub const X509V3_ADD_SILENT: i32 = 16;
pub const X509V3_EXT_UNKNOWN_MASK: i32 = 983040;
pub const X509V3_EXT_DEFAULT: i32 = 0;
pub const X509V3_EXT_ERROR_UNKNOWN: i32 = 65536;
pub const X509V3_EXT_PARSE_UNKNOWN: i32 = 131072;
pub const X509V3_EXT_DUMP_UNKNOWN: i32 = 196608;
pub const X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT: i32 = 0;
pub const X509_CHECK_FLAG_NO_WILDCARDS: i32 = 2;
pub const X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS: i32 = 4;
pub const X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS: i32 = 8;
pub const X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS: i32 = 16;
pub const X509_CHECK_FLAG_NEVER_CHECK_SUBJECT: i32 = 32;
pub const _X509_CHECK_FLAG_DOT_SUBDOMAINS: i32 = 32768;
pub const X509V3_R_BAD_IP_ADDRESS: i32 = 100;
pub const X509V3_R_BAD_OBJECT: i32 = 101;
pub const X509V3_R_BN_DEC2BN_ERROR: i32 = 102;
pub const X509V3_R_BN_TO_ASN1_INTEGER_ERROR: i32 = 103;
pub const X509V3_R_CANNOT_FIND_FREE_FUNCTION: i32 = 104;
pub const X509V3_R_DIRNAME_ERROR: i32 = 105;
pub const X509V3_R_DISTPOINT_ALREADY_SET: i32 = 106;
pub const X509V3_R_DUPLICATE_ZONE_ID: i32 = 107;
pub const X509V3_R_ERROR_CONVERTING_ZONE: i32 = 108;
pub const X509V3_R_ERROR_CREATING_EXTENSION: i32 = 109;
pub const X509V3_R_ERROR_IN_EXTENSION: i32 = 110;
pub const X509V3_R_EXPECTED_A_SECTION_NAME: i32 = 111;
pub const X509V3_R_EXTENSION_EXISTS: i32 = 112;
pub const X509V3_R_EXTENSION_NAME_ERROR: i32 = 113;
pub const X509V3_R_EXTENSION_NOT_FOUND: i32 = 114;
pub const X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED: i32 = 115;
pub const X509V3_R_EXTENSION_VALUE_ERROR: i32 = 116;
pub const X509V3_R_ILLEGAL_EMPTY_EXTENSION: i32 = 117;
pub const X509V3_R_ILLEGAL_HEX_DIGIT: i32 = 118;
pub const X509V3_R_INCORRECT_POLICY_SYNTAX_TAG: i32 = 119;
pub const X509V3_R_INVALID_BOOLEAN_STRING: i32 = 120;
pub const X509V3_R_INVALID_EXTENSION_STRING: i32 = 121;
pub const X509V3_R_INVALID_MULTIPLE_RDNS: i32 = 122;
pub const X509V3_R_INVALID_NAME: i32 = 123;
pub const X509V3_R_INVALID_NULL_ARGUMENT: i32 = 124;
pub const X509V3_R_INVALID_NULL_NAME: i32 = 125;
pub const X509V3_R_INVALID_NULL_VALUE: i32 = 126;
pub const X509V3_R_INVALID_NUMBER: i32 = 127;
pub const X509V3_R_INVALID_NUMBERS: i32 = 128;
pub const X509V3_R_INVALID_OBJECT_IDENTIFIER: i32 = 129;
pub const X509V3_R_INVALID_OPTION: i32 = 130;
pub const X509V3_R_INVALID_POLICY_IDENTIFIER: i32 = 131;
pub const X509V3_R_INVALID_PROXY_POLICY_SETTING: i32 = 132;
pub const X509V3_R_INVALID_PURPOSE: i32 = 133;
pub const X509V3_R_INVALID_SECTION: i32 = 134;
pub const X509V3_R_INVALID_SYNTAX: i32 = 135;
pub const X509V3_R_ISSUER_DECODE_ERROR: i32 = 136;
pub const X509V3_R_MISSING_VALUE: i32 = 137;
pub const X509V3_R_NEED_ORGANIZATION_AND_NUMBERS: i32 = 138;
pub const X509V3_R_NO_CONFIG_DATABASE: i32 = 139;
pub const X509V3_R_NO_ISSUER_CERTIFICATE: i32 = 140;
pub const X509V3_R_NO_ISSUER_DETAILS: i32 = 141;
pub const X509V3_R_NO_POLICY_IDENTIFIER: i32 = 142;
pub const X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED: i32 = 143;
pub const X509V3_R_NO_PUBLIC_KEY: i32 = 144;
pub const X509V3_R_NO_SUBJECT_DETAILS: i32 = 145;
pub const X509V3_R_ODD_NUMBER_OF_DIGITS: i32 = 146;
pub const X509V3_R_OPERATION_NOT_DEFINED: i32 = 147;
pub const X509V3_R_OTHERNAME_ERROR: i32 = 148;
pub const X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED: i32 = 149;
pub const X509V3_R_POLICY_PATH_LENGTH: i32 = 150;
pub const X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED: i32 = 151;
pub const X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY: i32 = 152;
pub const X509V3_R_SECTION_NOT_FOUND: i32 = 153;
pub const X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS: i32 = 154;
pub const X509V3_R_UNABLE_TO_GET_ISSUER_KEYID: i32 = 155;
pub const X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT: i32 = 156;
pub const X509V3_R_UNKNOWN_EXTENSION: i32 = 157;
pub const X509V3_R_UNKNOWN_EXTENSION_NAME: i32 = 158;
pub const X509V3_R_UNKNOWN_OPTION: i32 = 159;
pub const X509V3_R_UNSUPPORTED_OPTION: i32 = 160;
pub const X509V3_R_UNSUPPORTED_TYPE: i32 = 161;
pub const X509V3_R_USER_TOO_LONG: i32 = 162;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CRYPTO_THREADID = ::std::os::raw::c_int;
pub type ASN1_BOOLEAN = ::std::os::raw::c_int;
pub type ASN1_NULL = ::std::os::raw::c_int;
pub type ASN1_ITEM = ASN1_ITEM_st;
pub type ASN1_OBJECT = asn1_object_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_pctx_st {
    _unused: [u8; 0],
}
pub type ASN1_PCTX = asn1_pctx_st;
pub type ASN1_BIT_STRING = asn1_string_st;
pub type ASN1_BMPSTRING = asn1_string_st;
pub type ASN1_ENUMERATED = asn1_string_st;
pub type ASN1_GENERALIZEDTIME = asn1_string_st;
pub type ASN1_GENERALSTRING = asn1_string_st;
pub type ASN1_IA5STRING = asn1_string_st;
pub type ASN1_INTEGER = asn1_string_st;
pub type ASN1_OCTET_STRING = asn1_string_st;
pub type ASN1_PRINTABLESTRING = asn1_string_st;
pub type ASN1_STRING = asn1_string_st;
pub type ASN1_T61STRING = asn1_string_st;
pub type ASN1_TIME = asn1_string_st;
pub type ASN1_UNIVERSALSTRING = asn1_string_st;
pub type ASN1_UTCTIME = asn1_string_st;
pub type ASN1_UTF8STRING = asn1_string_st;
pub type ASN1_VISIBLESTRING = asn1_string_st;
pub type ASN1_TYPE = asn1_type_st;
pub type AUTHORITY_KEYID = AUTHORITY_KEYID_st;
pub type BASIC_CONSTRAINTS = BASIC_CONSTRAINTS_st;
pub type DIST_POINT = DIST_POINT_st;
pub type DSA_SIG = DSA_SIG_st;
pub type ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;
pub type NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
pub type NETSCAPE_SPKAC = Netscape_spkac_st;
pub type NETSCAPE_SPKI = Netscape_spki_st;
pub type RIPEMD160_CTX = RIPEMD160state_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_CACHE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_CACHE = X509_POLICY_CACHE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_LEVEL_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_NODE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_NODE = X509_POLICY_NODE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_TREE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_TREE = X509_POLICY_TREE_st;
pub type X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;
pub type X509_ALGOR = X509_algor_st;
pub type X509_CRL_INFO = X509_crl_info_st;
pub type X509_CRL = X509_crl_st;
pub type X509_EXTENSION = X509_extension_st;
pub type X509_INFO = X509_info_st;
pub type X509_NAME_ENTRY = X509_name_entry_st;
pub type X509_NAME = X509_name_st;
pub type X509_PUBKEY = X509_pubkey_st;
pub type X509_REQ_INFO = X509_req_info_st;
pub type X509_REQ = X509_req_st;
pub type X509_SIG = X509_sig_st;
pub type X509_VAL = X509_val_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bignum_ctx {
    _unused: [u8; 0],
}
pub type BN_CTX = bignum_ctx;
pub type BIGNUM = bignum_st;
pub type BIO_METHOD = bio_method_st;
pub type BIO = bio_st;
pub type BLAKE2B_CTX = blake2b_state_st;
pub type BN_GENCB = bn_gencb_st;
pub type BN_MONT_CTX = bn_mont_ctx_st;
pub type BUF_MEM = buf_mem_st;
pub type CBB = cbb_st;
pub type CBS = cbs_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmac_ctx_st {
    _unused: [u8; 0],
}
pub type CMAC_CTX = cmac_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_st {
    _unused: [u8; 0],
}
pub type CONF = conf_st;
pub type CONF_VALUE = conf_value_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_buffer_pool_st {
    _unused: [u8; 0],
}
pub type CRYPTO_BUFFER_POOL = crypto_buffer_pool_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_buffer_st {
    _unused: [u8; 0],
}
pub type CRYPTO_BUFFER = crypto_buffer_st;
pub type DH = dh_st;
pub type DSA = dsa_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_group_st {
    _unused: [u8; 0],
}
pub type EC_GROUP = ec_group_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_st {
    _unused: [u8; 0],
}
pub type EC_KEY = ec_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_point_st {
    _unused: [u8; 0],
}
pub type EC_POINT = ec_point_st;
pub type ECDSA_METHOD = ecdsa_method_st;
pub type ECDSA_SIG = ecdsa_sig_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engine_st {
    _unused: [u8; 0],
}
pub type ENGINE = engine_st;
pub type EVP_MD_CTX = env_md_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct env_md_st {
    _unused: [u8; 0],
}
pub type EVP_MD = env_md_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_aead_st {
    _unused: [u8; 0],
}
pub type EVP_AEAD = evp_aead_st;
pub type EVP_CIPHER_CTX = evp_cipher_ctx_st;
pub type EVP_CIPHER = evp_cipher_st;
pub type EVP_ENCODE_CTX = evp_encode_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_asn1_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_CTX = evp_pkey_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_METHOD = evp_pkey_method_st;
pub type EVP_PKEY = evp_pkey_st;
pub type HMAC_CTX = hmac_ctx_st;
pub type MD4_CTX = md4_state_st;
pub type MD5_CTX = md5_state_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_init_settings_st {
    _unused: [u8; 0],
}
pub type OPENSSL_INIT_SETTINGS = ossl_init_settings_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs12_st {
    _unused: [u8; 0],
}
pub type PKCS12 = pkcs12_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs8_priv_key_info_st {
    _unused: [u8; 0],
}
pub type PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
pub type X509_PKEY = private_key_st;
pub type RAND_METHOD = rand_meth_st;
pub type RC4_KEY = rc4_key_st;
pub type RSA_METHOD = rsa_meth_st;
pub type RSA = rsa_st;
pub type SHA256_CTX = sha256_state_st;
pub type SHA512_CTX = sha512_state_st;
pub type SHA_CTX = sha_state_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spake2_ctx_st {
    _unused: [u8; 0],
}
pub type SPAKE2_CTX = spake2_ctx_st;
pub type SRTP_PROTECTION_PROFILE = srtp_protection_profile_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_cipher_st {
    _unused: [u8; 0],
}
pub type SSL_CIPHER = ssl_cipher_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_ctx_st {
    _unused: [u8; 0],
}
pub type SSL_CTX = ssl_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_method_st {
    _unused: [u8; 0],
}
pub type SSL_METHOD = ssl_method_st;
pub type SSL_PRIVATE_KEY_METHOD = ssl_private_key_method_st;
pub type SSL_QUIC_METHOD = ssl_quic_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_session_st {
    _unused: [u8; 0],
}
pub type SSL_SESSION = ssl_session_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_st {
    _unused: [u8; 0],
}
pub type SSL = ssl_st;
pub type SSL_TICKET_AEAD_METHOD = ssl_ticket_aead_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ERR_FNS {
    _unused: [u8; 0],
}
pub type ERR_FNS = st_ERR_FNS;
pub type TRUST_TOKEN = trust_token_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trust_token_client_st {
    _unused: [u8; 0],
}
pub type TRUST_TOKEN_CLIENT = trust_token_client_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trust_token_issuer_st {
    _unused: [u8; 0],
}
pub type TRUST_TOKEN_ISSUER = trust_token_issuer_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trust_token_method_st {
    _unused: [u8; 0],
}
pub type TRUST_TOKEN_METHOD = trust_token_method_st;
pub type X509V3_CTX = v3_ext_ctx;
pub type X509_ATTRIBUTE = x509_attributes_st;
pub type X509_CERT_AUX = x509_cert_aux_st;
pub type X509_CINF = x509_cinf_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_crl_method_st {
    _unused: [u8; 0],
}
pub type X509_CRL_METHOD = x509_crl_method_st;
pub type X509_LOOKUP = x509_lookup_st;
pub type X509_REVOKED = x509_revoked_st;
pub type X509 = x509_st;
pub type X509_STORE_CTX = x509_store_ctx_st;
pub type X509_STORE = x509_store_st;
pub type X509_TRUST = x509_trust_st;
pub type OPENSSL_BLOCK = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aes_key_st {
    pub rd_key: [u32; 60usize],
    pub rounds: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_aes_key_st() {
    assert_eq!(
        ::std::mem::size_of::<aes_key_st>(),
        244usize,
        concat!("Size of: ", stringify!(aes_key_st))
    );
    assert_eq!(
        ::std::mem::align_of::<aes_key_st>(),
        4usize,
        concat!("Alignment of ", stringify!(aes_key_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aes_key_st>())).rd_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aes_key_st),
            "::",
            stringify!(rd_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aes_key_st>())).rounds as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(aes_key_st),
            "::",
            stringify!(rounds)
        )
    );
}
impl Default for aes_key_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AES_KEY = aes_key_st;
extern "C" {
    pub fn AES_set_encrypt_key(
        key: *const u8,
        bits: ::std::os::raw::c_uint,
        aeskey: *mut AES_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AES_set_decrypt_key(
        key: *const u8,
        bits: ::std::os::raw::c_uint,
        aeskey: *mut AES_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AES_encrypt(in_: *const u8, out: *mut u8, key: *const AES_KEY);
}
extern "C" {
    pub fn AES_decrypt(in_: *const u8, out: *mut u8, key: *const AES_KEY);
}
extern "C" {
    pub fn AES_ctr128_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const AES_KEY,
        ivec: *mut u8,
        ecount_buf: *mut u8,
        num: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn AES_ecb_encrypt(
        in_: *const u8,
        out: *mut u8,
        key: *const AES_KEY,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AES_cbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const AES_KEY,
        ivec: *mut u8,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AES_ofb128_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const AES_KEY,
        ivec: *mut u8,
        num: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AES_cfb128_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const AES_KEY,
        ivec: *mut u8,
        num: *mut ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AES_wrap_key(
        key: *const AES_KEY,
        iv: *const u8,
        out: *mut u8,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AES_unwrap_key(
        key: *const AES_KEY,
        iv: *const u8,
        out: *mut u8,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AES_wrap_key_padded(
        key: *const AES_KEY,
        out: *mut u8,
        out_len: *mut usize,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AES_unwrap_key_padded(
        key: *const AES_KEY,
        out: *mut u8,
        out_len: *mut usize,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct buf_mem_st {
    pub length: usize,
    pub data: *mut ::std::os::raw::c_char,
    pub max: usize,
}
#[test]
fn bindgen_test_layout_buf_mem_st() {
    assert_eq!(
        ::std::mem::size_of::<buf_mem_st>(),
        24usize,
        concat!("Size of: ", stringify!(buf_mem_st))
    );
    assert_eq!(
        ::std::mem::align_of::<buf_mem_st>(),
        8usize,
        concat!("Alignment of ", stringify!(buf_mem_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buf_mem_st>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buf_mem_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buf_mem_st>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(buf_mem_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buf_mem_st>())).max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buf_mem_st),
            "::",
            stringify!(max)
        )
    );
}
impl Default for buf_mem_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn BUF_MEM_new() -> *mut BUF_MEM;
}
extern "C" {
    pub fn BUF_MEM_free(buf: *mut BUF_MEM);
}
extern "C" {
    pub fn BUF_MEM_reserve(buf: *mut BUF_MEM, cap: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BUF_MEM_grow(buf: *mut BUF_MEM, len: usize) -> usize;
}
extern "C" {
    pub fn BUF_MEM_grow_clean(buf: *mut BUF_MEM, len: usize) -> usize;
}
extern "C" {
    pub fn BUF_MEM_append(
        buf: *mut BUF_MEM,
        in_: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BUF_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BUF_strnlen(str_: *const ::std::os::raw::c_char, max_len: usize) -> usize;
}
extern "C" {
    pub fn BUF_strndup(
        str_: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BUF_memdup(
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BUF_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn BUF_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn ERR_load_BIO_strings();
}
extern "C" {
    pub fn ERR_load_ERR_strings();
}
extern "C" {
    pub fn ERR_load_crypto_strings();
}
extern "C" {
    pub fn ERR_load_RAND_strings();
}
extern "C" {
    pub fn ERR_free_strings();
}
extern "C" {
    pub fn ERR_get_error() -> u32;
}
extern "C" {
    pub fn ERR_get_error_line(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_get_error_line_data(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
        data: *mut *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_peek_error() -> u32;
}
extern "C" {
    pub fn ERR_peek_error_line(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_peek_error_line_data(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
        data: *mut *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_peek_last_error() -> u32;
}
extern "C" {
    pub fn ERR_peek_last_error_line(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_peek_last_error_line_data(
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_int,
        data: *mut *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn ERR_error_string_n(
        packed_error: u32,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ERR_lib_error_string(packed_error: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ERR_reason_error_string(packed_error: u32) -> *const ::std::os::raw::c_char;
}
pub type ERR_print_errors_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        str_: *const ::std::os::raw::c_char,
        len: usize,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ERR_print_errors_cb(
        callback: ERR_print_errors_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ERR_print_errors_fp(file: *mut FILE);
}
extern "C" {
    pub fn ERR_clear_error();
}
extern "C" {
    pub fn ERR_set_mark() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ERR_pop_to_mark() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ERR_get_next_error_library() -> ::std::os::raw::c_int;
}
pub const ERR_LIB_NONE: _bindgen_ty_1 = _bindgen_ty_1(1);
pub const ERR_LIB_SYS: _bindgen_ty_1 = _bindgen_ty_1(2);
pub const ERR_LIB_BN: _bindgen_ty_1 = _bindgen_ty_1(3);
pub const ERR_LIB_RSA: _bindgen_ty_1 = _bindgen_ty_1(4);
pub const ERR_LIB_DH: _bindgen_ty_1 = _bindgen_ty_1(5);
pub const ERR_LIB_EVP: _bindgen_ty_1 = _bindgen_ty_1(6);
pub const ERR_LIB_BUF: _bindgen_ty_1 = _bindgen_ty_1(7);
pub const ERR_LIB_OBJ: _bindgen_ty_1 = _bindgen_ty_1(8);
pub const ERR_LIB_PEM: _bindgen_ty_1 = _bindgen_ty_1(9);
pub const ERR_LIB_DSA: _bindgen_ty_1 = _bindgen_ty_1(10);
pub const ERR_LIB_X509: _bindgen_ty_1 = _bindgen_ty_1(11);
pub const ERR_LIB_ASN1: _bindgen_ty_1 = _bindgen_ty_1(12);
pub const ERR_LIB_CONF: _bindgen_ty_1 = _bindgen_ty_1(13);
pub const ERR_LIB_CRYPTO: _bindgen_ty_1 = _bindgen_ty_1(14);
pub const ERR_LIB_EC: _bindgen_ty_1 = _bindgen_ty_1(15);
pub const ERR_LIB_SSL: _bindgen_ty_1 = _bindgen_ty_1(16);
pub const ERR_LIB_BIO: _bindgen_ty_1 = _bindgen_ty_1(17);
pub const ERR_LIB_PKCS7: _bindgen_ty_1 = _bindgen_ty_1(18);
pub const ERR_LIB_PKCS8: _bindgen_ty_1 = _bindgen_ty_1(19);
pub const ERR_LIB_X509V3: _bindgen_ty_1 = _bindgen_ty_1(20);
pub const ERR_LIB_RAND: _bindgen_ty_1 = _bindgen_ty_1(21);
pub const ERR_LIB_ENGINE: _bindgen_ty_1 = _bindgen_ty_1(22);
pub const ERR_LIB_OCSP: _bindgen_ty_1 = _bindgen_ty_1(23);
pub const ERR_LIB_UI: _bindgen_ty_1 = _bindgen_ty_1(24);
pub const ERR_LIB_COMP: _bindgen_ty_1 = _bindgen_ty_1(25);
pub const ERR_LIB_ECDSA: _bindgen_ty_1 = _bindgen_ty_1(26);
pub const ERR_LIB_ECDH: _bindgen_ty_1 = _bindgen_ty_1(27);
pub const ERR_LIB_HMAC: _bindgen_ty_1 = _bindgen_ty_1(28);
pub const ERR_LIB_DIGEST: _bindgen_ty_1 = _bindgen_ty_1(29);
pub const ERR_LIB_CIPHER: _bindgen_ty_1 = _bindgen_ty_1(30);
pub const ERR_LIB_HKDF: _bindgen_ty_1 = _bindgen_ty_1(31);
pub const ERR_LIB_TRUST_TOKEN: _bindgen_ty_1 = _bindgen_ty_1(32);
pub const ERR_LIB_USER: _bindgen_ty_1 = _bindgen_ty_1(33);
pub const ERR_NUM_LIBS: _bindgen_ty_1 = _bindgen_ty_1(34);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _bindgen_ty_1(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn ERR_remove_state(pid: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ERR_remove_thread_state(tid: *const CRYPTO_THREADID);
}
extern "C" {
    pub fn ERR_func_error_string(packed_error: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ERR_error_string(
        packed_error: u32,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ERR_clear_system_error();
}
extern "C" {
    pub fn ERR_put_error(
        library: ::std::os::raw::c_int,
        unused: ::std::os::raw::c_int,
        reason: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn ERR_add_error_data(count: ::std::os::raw::c_uint, ...);
}
extern "C" {
    pub fn ERR_add_error_dataf(format: *const ::std::os::raw::c_char, ...);
}
pub type stack_free_func =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type stack_copy_func = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type stack_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ::std::os::raw::c_void,
        b: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct stack_st {
    pub num: usize,
    pub data: *mut *mut ::std::os::raw::c_void,
    pub sorted: ::std::os::raw::c_int,
    pub num_alloc: usize,
    pub comp: stack_cmp_func,
}
#[test]
fn bindgen_test_layout_stack_st() {
    assert_eq!(
        ::std::mem::size_of::<stack_st>(),
        40usize,
        concat!("Size of: ", stringify!(stack_st))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_st>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_st>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_st),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_st>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_st>())).sorted as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_st),
            "::",
            stringify!(sorted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_st>())).num_alloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_st),
            "::",
            stringify!(num_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_st>())).comp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_st),
            "::",
            stringify!(comp)
        )
    );
}
impl Default for stack_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _STACK = stack_st;
extern "C" {
    pub fn sk_new(comp: stack_cmp_func) -> *mut _STACK;
}
extern "C" {
    pub fn sk_new_null() -> *mut _STACK;
}
extern "C" {
    pub fn sk_num(sk: *const _STACK) -> usize;
}
extern "C" {
    pub fn sk_zero(sk: *mut _STACK);
}
extern "C" {
    pub fn sk_value(sk: *const _STACK, i: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_set(
        sk: *mut _STACK,
        i: usize,
        p: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_free(sk: *mut _STACK);
}
extern "C" {
    pub fn sk_pop_free_ex(
        sk: *mut _STACK,
        call_free_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: stack_free_func, arg2: *mut ::std::os::raw::c_void),
        >,
        free_func: stack_free_func,
    );
}
extern "C" {
    pub fn sk_insert(sk: *mut _STACK, p: *mut ::std::os::raw::c_void, where_: usize) -> usize;
}
extern "C" {
    pub fn sk_delete(sk: *mut _STACK, where_: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_delete_ptr(
        sk: *mut _STACK,
        p: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_find(
        sk: *const _STACK,
        out_index: *mut usize,
        p: *const ::std::os::raw::c_void,
        call_cmp_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: stack_cmp_func,
                arg2: *mut *const ::std::os::raw::c_void,
                arg3: *mut *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sk_shift(sk: *mut _STACK) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_push(sk: *mut _STACK, p: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn sk_pop(sk: *mut _STACK) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sk_dup(sk: *const _STACK) -> *mut _STACK;
}
extern "C" {
    pub fn sk_sort(sk: *mut _STACK);
}
extern "C" {
    pub fn sk_is_sorted(sk: *const _STACK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sk_set_cmp_func(sk: *mut _STACK, comp: stack_cmp_func) -> stack_cmp_func;
}
extern "C" {
    pub fn sk_deep_copy(
        sk: *const _STACK,
        call_copy_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: stack_copy_func,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        copy_func: stack_copy_func,
        call_free_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: stack_free_func, arg2: *mut ::std::os::raw::c_void),
        >,
        free_func: stack_free_func,
    ) -> *mut _STACK;
}
extern "C" {
    pub fn sk_pop_free(sk: *mut _STACK, free_func: stack_free_func);
}
pub type OPENSSL_STRING = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_void {
    _unused: [u8; 0],
}
pub type stack_void_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type stack_void_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type stack_void_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ::std::os::raw::c_void,
        b: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_OPENSSL_STRING {
    _unused: [u8; 0],
}
pub type stack_OPENSSL_STRING_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: OPENSSL_STRING)>;
pub type stack_OPENSSL_STRING_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: OPENSSL_STRING) -> OPENSSL_STRING>;
pub type stack_OPENSSL_STRING_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const OPENSSL_STRING,
        b: *const OPENSSL_STRING,
    ) -> ::std::os::raw::c_int,
>;
pub type CRYPTO_EX_DATA = crypto_ex_data_st;
pub type CRYPTO_EX_free = ::std::option::Option<
    unsafe extern "C" fn(
        parent: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        ad: *mut CRYPTO_EX_DATA,
        index: ::std::os::raw::c_int,
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CRYPTO_cleanup_all_ex_data();
}
pub type CRYPTO_EX_dup = ::std::option::Option<
    unsafe extern "C" fn(
        to: *mut CRYPTO_EX_DATA,
        from: *const CRYPTO_EX_DATA,
        from_d: *mut *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CRYPTO_EX_unused = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct crypto_ex_data_st {
    pub sk: *mut stack_st_void,
}
#[test]
fn bindgen_test_layout_crypto_ex_data_st() {
    assert_eq!(
        ::std::mem::size_of::<crypto_ex_data_st>(),
        8usize,
        concat!("Size of: ", stringify!(crypto_ex_data_st))
    );
    assert_eq!(
        ::std::mem::align_of::<crypto_ex_data_st>(),
        8usize,
        concat!("Alignment of ", stringify!(crypto_ex_data_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypto_ex_data_st>())).sk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypto_ex_data_st),
            "::",
            stringify!(sk)
        )
    );
}
impl Default for crypto_ex_data_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union crypto_mutex_st {
    pub alignment: f64,
    pub padding: [u8; 56usize],
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_crypto_mutex_st() {
    assert_eq!(
        ::std::mem::size_of::<crypto_mutex_st>(),
        56usize,
        concat!("Size of: ", stringify!(crypto_mutex_st))
    );
    assert_eq!(
        ::std::mem::align_of::<crypto_mutex_st>(),
        8usize,
        concat!("Alignment of ", stringify!(crypto_mutex_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypto_mutex_st>())).alignment as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypto_mutex_st),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypto_mutex_st>())).padding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypto_mutex_st),
            "::",
            stringify!(padding)
        )
    );
}
impl Default for crypto_mutex_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CRYPTO_MUTEX = crypto_mutex_st;
pub type CRYPTO_refcount_t = u32;
extern "C" {
    pub fn CRYPTO_num_locks() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CRYPTO_set_locking_callback(
        func: ::std::option::Option<
            unsafe extern "C" fn(
                mode: ::std::os::raw::c_int,
                lock_num: ::std::os::raw::c_int,
                file: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn CRYPTO_set_add_lock_callback(
        func: ::std::option::Option<
            unsafe extern "C" fn(
                num: *mut ::std::os::raw::c_int,
                amount: ::std::os::raw::c_int,
                lock_num: ::std::os::raw::c_int,
                file: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn CRYPTO_get_locking_callback() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub fn CRYPTO_get_lock_name(lock_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CRYPTO_THREADID_set_callback(
        threadid_func: ::std::option::Option<unsafe extern "C" fn(threadid: *mut CRYPTO_THREADID)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CRYPTO_THREADID_set_numeric(id: *mut CRYPTO_THREADID, val: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn CRYPTO_THREADID_set_pointer(id: *mut CRYPTO_THREADID, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CRYPTO_THREADID_current(id: *mut CRYPTO_THREADID);
}
extern "C" {
    pub fn CRYPTO_set_id_callback(
        func: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct CRYPTO_dynlock {
    pub references: ::std::os::raw::c_int,
    pub data: *mut CRYPTO_dynlock_value,
}
#[test]
fn bindgen_test_layout_CRYPTO_dynlock() {
    assert_eq!(
        ::std::mem::size_of::<CRYPTO_dynlock>(),
        16usize,
        concat!("Size of: ", stringify!(CRYPTO_dynlock))
    );
    assert_eq!(
        ::std::mem::align_of::<CRYPTO_dynlock>(),
        8usize,
        concat!("Alignment of ", stringify!(CRYPTO_dynlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CRYPTO_dynlock>())).references as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_dynlock),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CRYPTO_dynlock>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_dynlock),
            "::",
            stringify!(data)
        )
    );
}
impl Default for CRYPTO_dynlock {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CRYPTO_set_dynlock_create_callback(
        dyn_create_function: ::std::option::Option<
            unsafe extern "C" fn(
                file: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
            ) -> *mut CRYPTO_dynlock_value,
        >,
    );
}
extern "C" {
    pub fn CRYPTO_set_dynlock_lock_callback(
        dyn_lock_function: ::std::option::Option<
            unsafe extern "C" fn(
                mode: ::std::os::raw::c_int,
                l: *mut CRYPTO_dynlock_value,
                file: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn CRYPTO_set_dynlock_destroy_callback(
        dyn_destroy_function: ::std::option::Option<
            unsafe extern "C" fn(
                l: *mut CRYPTO_dynlock_value,
                file: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn CRYPTO_get_dynlock_create_callback() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *mut CRYPTO_dynlock_value,
    >;
}
extern "C" {
    pub fn CRYPTO_get_dynlock_lock_callback() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut CRYPTO_dynlock_value,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub fn CRYPTO_get_dynlock_destroy_callback() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut CRYPTO_dynlock_value,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_BIO {
    _unused: [u8; 0],
}
pub type stack_BIO_free_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO)>;
pub type stack_BIO_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO) -> *mut BIO>;
pub type stack_BIO_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(a: *mut *const BIO, b: *mut *const BIO) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn BIO_new(method: *const BIO_METHOD) -> *mut BIO;
}
extern "C" {
    pub fn BIO_free(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_vfree(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_up_ref(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_read(
        bio: *mut BIO,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_gets(
        bio: *mut BIO,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_write(
        bio: *mut BIO,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_write_all(
        bio: *mut BIO,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_puts(bio: *mut BIO, buf: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_flush(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_ctrl(
        bio: *mut BIO,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
        parg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BIO_ptr_ctrl(
        bp: *mut BIO,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BIO_int_ctrl(
        bp: *mut BIO,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
        iarg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BIO_reset(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_eof(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_flags(bio: *mut BIO, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BIO_test_flags(bio: *const BIO, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_should_read(bio: *const BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_should_write(bio: *const BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_should_retry(bio: *const BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_should_io_special(bio: *const BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_get_retry_reason(bio: *const BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_retry_reason(bio: *mut BIO, reason: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BIO_clear_flags(bio: *mut BIO, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BIO_set_retry_read(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_set_retry_write(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_get_retry_flags(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_clear_retry_flags(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_method_type(bio: *const BIO) -> ::std::os::raw::c_int;
}
pub type bio_info_cb = ::std::option::Option<
    unsafe extern "C" fn(
        bio: *mut BIO,
        event: ::std::os::raw::c_int,
        parg: *const ::std::os::raw::c_char,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
        return_value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long,
>;
extern "C" {
    pub fn BIO_callback_ctrl(
        bio: *mut BIO,
        cmd: ::std::os::raw::c_int,
        fp: bio_info_cb,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BIO_pending(bio: *const BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_pending(bio: *const BIO) -> usize;
}
extern "C" {
    pub fn BIO_wpending(bio: *const BIO) -> usize;
}
extern "C" {
    pub fn BIO_set_close(bio: *mut BIO, close_flag: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_number_read(bio: *const BIO) -> usize;
}
extern "C" {
    pub fn BIO_number_written(bio: *const BIO) -> usize;
}
extern "C" {
    pub fn BIO_push(bio: *mut BIO, appended_bio: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_pop(bio: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_next(bio: *mut BIO) -> *mut BIO;
}
extern "C" {
    pub fn BIO_free_all(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_find_type(bio: *mut BIO, type_: ::std::os::raw::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_copy_next_retry(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_printf(
        bio: *mut BIO,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_indent(
        bio: *mut BIO,
        indent: ::std::os::raw::c_uint,
        max_indent: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_hexdump(
        bio: *mut BIO,
        data: *const u8,
        len: usize,
        indent: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ERR_print_errors(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_read_asn1(
        bio: *mut BIO,
        out: *mut *mut u8,
        out_len: *mut usize,
        max_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_s_mem() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_mem_buf(
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut BIO;
}
extern "C" {
    pub fn BIO_mem_contents(
        bio: *const BIO,
        out_contents: *mut *const u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_get_mem_data(
        bio: *mut BIO,
        contents: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BIO_get_mem_ptr(bio: *mut BIO, out: *mut *mut BUF_MEM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_mem_buf(
        bio: *mut BIO,
        b: *mut BUF_MEM,
        take_ownership: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_mem_eof_return(
        bio: *mut BIO,
        eof_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_s_fd() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_fd(fd: ::std::os::raw::c_int, close_flag: ::std::os::raw::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_set_fd(
        bio: *mut BIO,
        fd: ::std::os::raw::c_int,
        close_flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_get_fd(bio: *mut BIO, out_fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_s_file() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_file(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut BIO;
}
extern "C" {
    pub fn BIO_new_fp(stream: *mut FILE, close_flag: ::std::os::raw::c_int) -> *mut BIO;
}
extern "C" {
    pub fn BIO_get_fp(bio: *mut BIO, out_file: *mut *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_fp(
        bio: *mut BIO,
        file: *mut FILE,
        close_flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_read_filename(
        bio: *mut BIO,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_write_filename(
        bio: *mut BIO,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_append_filename(
        bio: *mut BIO,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_rw_filename(
        bio: *mut BIO,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_s_socket() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_socket(fd: ::std::os::raw::c_int, close_flag: ::std::os::raw::c_int)
        -> *mut BIO;
}
extern "C" {
    pub fn BIO_s_connect() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_new_connect(host_and_optional_port: *const ::std::os::raw::c_char) -> *mut BIO;
}
extern "C" {
    pub fn BIO_set_conn_hostname(
        bio: *mut BIO,
        host_and_optional_port: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_conn_port(
        bio: *mut BIO,
        port_str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_conn_int_port(
        bio: *mut BIO,
        port: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_nbio(bio: *mut BIO, on: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_do_connect(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_new_bio_pair(
        out1: *mut *mut BIO,
        writebuf1: usize,
        out2: *mut *mut BIO,
        writebuf2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_ctrl_get_read_request(bio: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_ctrl_get_write_guarantee(bio: *mut BIO) -> usize;
}
extern "C" {
    pub fn BIO_shutdown_wr(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_get_new_index() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_new(
        type_: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *mut BIO_METHOD;
}
extern "C" {
    pub fn BIO_meth_free(method: *mut BIO_METHOD);
}
extern "C" {
    pub fn BIO_meth_set_create(
        method: *mut BIO_METHOD,
        create: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut BIO) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_destroy(
        method: *mut BIO_METHOD,
        destroy: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut BIO) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_write(
        method: *mut BIO_METHOD,
        write: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_read(
        method: *mut BIO_METHOD,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_gets(
        method: *mut BIO_METHOD,
        gets: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_ctrl(
        method: *mut BIO_METHOD,
        ctrl: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_long,
                arg4: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_long,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_data(bio: *mut BIO, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn BIO_get_data(bio: *mut BIO) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn BIO_set_init(bio: *mut BIO, init: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BIO_get_init(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_f_base64() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_set_retry_special(bio: *mut BIO);
}
extern "C" {
    pub fn BIO_set_write_buffer_size(
        bio: *mut BIO,
        buffer_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_set_shutdown(bio: *mut BIO, shutdown: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BIO_get_shutdown(bio: *mut BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_meth_set_puts(
        method: *mut BIO_METHOD,
        puts: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut BIO,
                arg2: *const ::std::os::raw::c_char,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bio_method_st {
    pub type_: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub bwrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub bread: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub bputs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub bgets: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_long,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_long,
    >,
    pub create:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO) -> ::std::os::raw::c_int>,
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO) -> ::std::os::raw::c_int>,
    pub callback_ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut BIO,
            arg2: ::std::os::raw::c_int,
            arg3: bio_info_cb,
        ) -> ::std::os::raw::c_long,
    >,
}
#[test]
fn bindgen_test_layout_bio_method_st() {
    assert_eq!(
        ::std::mem::size_of::<bio_method_st>(),
        80usize,
        concat!("Size of: ", stringify!(bio_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bio_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(bio_method_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).bwrite as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(bwrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).bread as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(bread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).bputs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(bputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).bgets as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(bgets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).ctrl as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(ctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).create as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).destroy as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_method_st>())).callback_ctrl as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_method_st),
            "::",
            stringify!(callback_ctrl)
        )
    );
}
impl Default for bio_method_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bio_st {
    pub method: *const BIO_METHOD,
    pub init: ::std::os::raw::c_int,
    pub shutdown: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub retry_reason: ::std::os::raw::c_int,
    pub num: ::std::os::raw::c_int,
    pub references: CRYPTO_refcount_t,
    pub ptr: *mut ::std::os::raw::c_void,
    pub next_bio: *mut BIO,
    pub num_read: usize,
    pub num_write: usize,
}
#[test]
fn bindgen_test_layout_bio_st() {
    assert_eq!(
        ::std::mem::size_of::<bio_st>(),
        64usize,
        concat!("Size of: ", stringify!(bio_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bio_st>(),
        8usize,
        concat!("Alignment of ", stringify!(bio_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).shutdown as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).retry_reason as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(retry_reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).num as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).references as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).next_bio as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(next_bio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).num_read as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(num_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bio_st>())).num_write as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bio_st),
            "::",
            stringify!(num_write)
        )
    );
}
impl Default for bio_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn BN_new() -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_init(bn: *mut BIGNUM);
}
extern "C" {
    pub fn BN_free(bn: *mut BIGNUM);
}
extern "C" {
    pub fn BN_clear_free(bn: *mut BIGNUM);
}
extern "C" {
    pub fn BN_dup(src: *const BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_copy(dest: *mut BIGNUM, src: *const BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_clear(bn: *mut BIGNUM);
}
extern "C" {
    pub fn BN_value_one() -> *const BIGNUM;
}
extern "C" {
    pub fn BN_num_bits(bn: *const BIGNUM) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn BN_num_bytes(bn: *const BIGNUM) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn BN_zero(bn: *mut BIGNUM);
}
extern "C" {
    pub fn BN_one(bn: *mut BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_set_word(bn: *mut BIGNUM, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_set_u64(bn: *mut BIGNUM, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_set_negative(bn: *mut BIGNUM, sign: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BN_is_negative(bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bin2bn(in_: *const u8, len: usize, ret: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2bin(in_: *const BIGNUM, out: *mut u8) -> usize;
}
extern "C" {
    pub fn BN_le2bn(in_: *const u8, len: usize, ret: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_bn2le_padded(out: *mut u8, len: usize, in_: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2bin_padded(out: *mut u8, len: usize, in_: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2cbb_padded(out: *mut CBB, len: usize, in_: *const BIGNUM)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2hex(bn: *const BIGNUM) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BN_hex2bn(
        outp: *mut *mut BIGNUM,
        in_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2dec(a: *const BIGNUM) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BN_dec2bn(
        outp: *mut *mut BIGNUM,
        in_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_asc2bn(
        outp: *mut *mut BIGNUM,
        in_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_print(bio: *mut BIO, a: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_print_fp(fp: *mut FILE, a: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_get_word(bn: *const BIGNUM) -> u64;
}
extern "C" {
    pub fn BN_get_u64(bn: *const BIGNUM, out: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_parse_asn1_unsigned(cbs: *mut CBS, ret: *mut BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_marshal_asn1(cbb: *mut CBB, bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_CTX_new() -> *mut BN_CTX;
}
extern "C" {
    pub fn BN_CTX_free(ctx: *mut BN_CTX);
}
extern "C" {
    pub fn BN_CTX_start(ctx: *mut BN_CTX);
}
extern "C" {
    pub fn BN_CTX_get(ctx: *mut BN_CTX) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_CTX_end(ctx: *mut BN_CTX);
}
extern "C" {
    pub fn BN_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_uadd(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_add_word(a: *mut BIGNUM, w: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_sub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_usub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_sub_word(a: *mut BIGNUM, w: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mul(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mul_word(bn: *mut BIGNUM, w: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_sqr(r: *mut BIGNUM, a: *const BIGNUM, ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_div(
        quotient: *mut BIGNUM,
        rem: *mut BIGNUM,
        numerator: *const BIGNUM,
        divisor: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_div_word(numerator: *mut BIGNUM, divisor: u64) -> u64;
}
extern "C" {
    pub fn BN_sqrt(
        out_sqrt: *mut BIGNUM,
        in_: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_cmp(a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_cmp_word(a: *const BIGNUM, b: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_ucmp(a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_equal_consttime(a: *const BIGNUM, b: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_abs_is_word(bn: *const BIGNUM, w: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_zero(bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_one(bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_word(bn: *const BIGNUM, w: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_odd(bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_pow2(a: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_lshift(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_lshift1(r: *mut BIGNUM, a: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_rshift(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_rshift1(r: *mut BIGNUM, a: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_set_bit(a: *mut BIGNUM, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_clear_bit(a: *mut BIGNUM, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_bit_set(a: *const BIGNUM, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mask_bits(a: *mut BIGNUM, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_count_low_zero_bits(bn: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_word(a: *const BIGNUM, w: u64) -> u64;
}
extern "C" {
    pub fn BN_mod_pow2(r: *mut BIGNUM, a: *const BIGNUM, e: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_nnmod_pow2(r: *mut BIGNUM, a: *const BIGNUM, e: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_nnmod(
        rem: *mut BIGNUM,
        numerator: *const BIGNUM,
        divisor: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_add(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_add_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_sub(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_sub_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_mul(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_sqr(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_lshift(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::std::os::raw::c_int,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_lshift_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        n: ::std::os::raw::c_int,
        m: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_lshift1(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_lshift1_quick(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        m: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_sqrt(
        in_: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_rand(
        rnd: *mut BIGNUM,
        bits: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_pseudo_rand(
        rnd: *mut BIGNUM,
        bits: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_rand_range_ex(
        r: *mut BIGNUM,
        min_inclusive: u64,
        max_exclusive: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_pseudo_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bn_gencb_st {
    pub arg: *mut ::std::os::raw::c_void,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            event: ::std::os::raw::c_int,
            n: ::std::os::raw::c_int,
            arg1: *mut bn_gencb_st,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_bn_gencb_st() {
    assert_eq!(
        ::std::mem::size_of::<bn_gencb_st>(),
        16usize,
        concat!("Size of: ", stringify!(bn_gencb_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bn_gencb_st>(),
        8usize,
        concat!("Alignment of ", stringify!(bn_gencb_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bn_gencb_st>())).arg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bn_gencb_st),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bn_gencb_st>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bn_gencb_st),
            "::",
            stringify!(callback)
        )
    );
}
impl Default for bn_gencb_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn BN_GENCB_set(
        callback: *mut BN_GENCB,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                event: ::std::os::raw::c_int,
                n: ::std::os::raw::c_int,
                arg1: *mut BN_GENCB,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn BN_GENCB_call(
        callback: *mut BN_GENCB,
        event: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_generate_prime_ex(
        ret: *mut BIGNUM,
        bits: ::std::os::raw::c_int,
        safe: ::std::os::raw::c_int,
        add: *const BIGNUM,
        rem: *const BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
impl bn_primality_result_t {
    pub const bn_probably_prime: bn_primality_result_t = bn_primality_result_t(0);
}
impl bn_primality_result_t {
    pub const bn_composite: bn_primality_result_t = bn_primality_result_t(1);
}
impl bn_primality_result_t {
    pub const bn_non_prime_power_composite: bn_primality_result_t = bn_primality_result_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct bn_primality_result_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn BN_enhanced_miller_rabin_primality_test(
        out_result: *mut bn_primality_result_t,
        w: *const BIGNUM,
        checks: ::std::os::raw::c_int,
        ctx: *mut BN_CTX,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_primality_test(
        is_probably_prime: *mut ::std::os::raw::c_int,
        candidate: *const BIGNUM,
        checks: ::std::os::raw::c_int,
        ctx: *mut BN_CTX,
        do_trial_division: ::std::os::raw::c_int,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_prime_fasttest_ex(
        candidate: *const BIGNUM,
        checks: ::std::os::raw::c_int,
        ctx: *mut BN_CTX,
        do_trial_division: ::std::os::raw::c_int,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_is_prime_ex(
        candidate: *const BIGNUM,
        checks: ::std::os::raw::c_int,
        ctx: *mut BN_CTX,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_gcd(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_inverse(
        out: *mut BIGNUM,
        a: *const BIGNUM,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_mod_inverse_blinded(
        out: *mut BIGNUM,
        out_no_inverse: *mut ::std::os::raw::c_int,
        a: *const BIGNUM,
        mont: *const BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_inverse_odd(
        out: *mut BIGNUM,
        out_no_inverse: *mut ::std::os::raw::c_int,
        a: *const BIGNUM,
        n: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_MONT_CTX_new_for_modulus(mod_: *const BIGNUM, ctx: *mut BN_CTX) -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_MONT_CTX_new_consttime(mod_: *const BIGNUM, ctx: *mut BN_CTX) -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_MONT_CTX_free(mont: *mut BN_MONT_CTX);
}
extern "C" {
    pub fn BN_MONT_CTX_copy(to: *mut BN_MONT_CTX, from: *const BN_MONT_CTX) -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_MONT_CTX_set_locked(
        pmont: *mut *mut BN_MONT_CTX,
        lock: *mut CRYPTO_MUTEX,
        mod_: *const BIGNUM,
        bn_ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_to_montgomery(
        ret: *mut BIGNUM,
        a: *const BIGNUM,
        mont: *const BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_from_montgomery(
        ret: *mut BIGNUM,
        a: *const BIGNUM,
        mont: *const BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_mul_montgomery(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        mont: *const BN_MONT_CTX,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_exp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_exp(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont(
        r: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        mont: *const BN_MONT_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_exp_mont_consttime(
        rr: *mut BIGNUM,
        a: *const BIGNUM,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        mont: *const BN_MONT_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2mpi(in_: *const BIGNUM, out: *mut u8) -> usize;
}
extern "C" {
    pub fn BN_mpi2bn(in_: *const u8, len: usize, out: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn BN_mod_exp_mont_word(
        r: *mut BIGNUM,
        a: u64,
        p: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        mont: *const BN_MONT_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_mod_exp2_mont(
        r: *mut BIGNUM,
        a1: *const BIGNUM,
        p1: *const BIGNUM,
        a2: *const BIGNUM,
        p2: *const BIGNUM,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
        mont: *const BN_MONT_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_MONT_CTX_new() -> *mut BN_MONT_CTX;
}
extern "C" {
    pub fn BN_MONT_CTX_set(
        mont: *mut BN_MONT_CTX,
        mod_: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_bn2binpad(
        in_: *const BIGNUM,
        out: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bignum_st {
    pub d: *mut u64,
    pub width: ::std::os::raw::c_int,
    pub dmax: ::std::os::raw::c_int,
    pub neg: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bignum_st() {
    assert_eq!(
        ::std::mem::size_of::<bignum_st>(),
        24usize,
        concat!("Size of: ", stringify!(bignum_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bignum_st>(),
        8usize,
        concat!("Alignment of ", stringify!(bignum_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bignum_st>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bignum_st),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bignum_st>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bignum_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bignum_st>())).dmax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bignum_st),
            "::",
            stringify!(dmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bignum_st>())).neg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bignum_st),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bignum_st>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bignum_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for bignum_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bn_mont_ctx_st {
    pub RR: BIGNUM,
    pub N: BIGNUM,
    pub n0: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_bn_mont_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<bn_mont_ctx_st>(),
        64usize,
        concat!("Size of: ", stringify!(bn_mont_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bn_mont_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(bn_mont_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bn_mont_ctx_st>())).RR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bn_mont_ctx_st),
            "::",
            stringify!(RR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bn_mont_ctx_st>())).N as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bn_mont_ctx_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bn_mont_ctx_st>())).n0 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bn_mont_ctx_st),
            "::",
            stringify!(n0)
        )
    );
}
impl Default for bn_mont_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn BN_num_bits_word(l: u64) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct asn1_string_st {
    pub length: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_asn1_string_st() {
    assert_eq!(
        ::std::mem::size_of::<asn1_string_st>(),
        24usize,
        concat!("Size of: ", stringify!(asn1_string_st))
    );
    assert_eq!(
        ::std::mem::align_of::<asn1_string_st>(),
        8usize,
        concat!("Alignment of ", stringify!(asn1_string_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_st>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_st>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_st>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_st>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for asn1_string_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn ASN1_STRING_type_new(type_: ::std::os::raw::c_int) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_free(str_: *mut ASN1_STRING);
}
extern "C" {
    pub fn ASN1_STRING_copy(
        dst: *mut ASN1_STRING,
        str_: *const ASN1_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_dup(str_: *const ASN1_STRING) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_type(str_: *const ASN1_STRING) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_get0_data(str_: *const ASN1_STRING) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ASN1_STRING_data(str_: *mut ASN1_STRING) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ASN1_STRING_length(str_: *const ASN1_STRING) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_cmp(a: *const ASN1_STRING, b: *const ASN1_STRING) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set(
        str_: *mut ASN1_STRING,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set0(
        str_: *mut ASN1_STRING,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct asn1_object_st {
    pub sn: *const ::std::os::raw::c_char,
    pub ln: *const ::std::os::raw::c_char,
    pub nid: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_asn1_object_st() {
    assert_eq!(
        ::std::mem::size_of::<asn1_object_st>(),
        40usize,
        concat!("Size of: ", stringify!(asn1_object_st))
    );
    assert_eq!(
        ::std::mem::align_of::<asn1_object_st>(),
        8usize,
        concat!("Alignment of ", stringify!(asn1_object_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).sn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).ln as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(ln)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).nid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(nid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_object_st>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_object_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for asn1_object_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_OBJECT {
    _unused: [u8; 0],
}
pub type stack_ASN1_OBJECT_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_OBJECT)>;
pub type stack_ASN1_OBJECT_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_OBJECT) -> *mut ASN1_OBJECT>;
pub type stack_ASN1_OBJECT_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ASN1_OBJECT,
        b: *mut *const ASN1_OBJECT,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_ENCODING_st {
    pub enc: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_long,
    pub modified: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_ASN1_ENCODING_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_ENCODING_st>(),
        24usize,
        concat!("Size of: ", stringify!(ASN1_ENCODING_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_ENCODING_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_ENCODING_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ENCODING_st>())).enc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ENCODING_st),
            "::",
            stringify!(enc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ENCODING_st>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ENCODING_st),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ENCODING_st>())).modified as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ENCODING_st),
            "::",
            stringify!(modified)
        )
    );
}
impl Default for ASN1_ENCODING_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ASN1_ENCODING_st {
    #[inline]
    pub fn alias_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alias_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alias_only_on_next_parse(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alias_only_on_next_parse(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        alias_only: ::std::os::raw::c_uint,
        alias_only_on_next_parse: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let alias_only: u32 = unsafe { ::std::mem::transmute(alias_only) };
            alias_only as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let alias_only_on_next_parse: u32 =
                unsafe { ::std::mem::transmute(alias_only_on_next_parse) };
            alias_only_on_next_parse as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ASN1_ENCODING = ASN1_ENCODING_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct asn1_string_table_st {
    pub nid: ::std::os::raw::c_int,
    pub minsize: ::std::os::raw::c_long,
    pub maxsize: ::std::os::raw::c_long,
    pub mask: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_asn1_string_table_st() {
    assert_eq!(
        ::std::mem::size_of::<asn1_string_table_st>(),
        40usize,
        concat!("Size of: ", stringify!(asn1_string_table_st))
    );
    assert_eq!(
        ::std::mem::align_of::<asn1_string_table_st>(),
        8usize,
        concat!("Alignment of ", stringify!(asn1_string_table_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_table_st>())).nid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_table_st),
            "::",
            stringify!(nid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_table_st>())).minsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_table_st),
            "::",
            stringify!(minsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_table_st>())).maxsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_table_st),
            "::",
            stringify!(maxsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_table_st>())).mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_table_st),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_string_table_st>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_string_table_st),
            "::",
            stringify!(flags)
        )
    );
}
pub type ASN1_STRING_TABLE = asn1_string_table_st;
pub type ASN1_TEMPLATE = ASN1_TEMPLATE_st;
pub type ASN1_TLC = ASN1_TLC_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_VALUE_st {
    _unused: [u8; 0],
}
pub type ASN1_VALUE = ASN1_VALUE_st;
pub type d2i_of_void = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type i2d_of_void = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type ASN1_ITEM_EXP = ASN1_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_INTEGER {
    _unused: [u8; 0],
}
pub type stack_ASN1_INTEGER_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_INTEGER)>;
pub type stack_ASN1_INTEGER_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_INTEGER) -> *mut ASN1_INTEGER>;
pub type stack_ASN1_INTEGER_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ASN1_INTEGER,
        b: *mut *const ASN1_INTEGER,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct asn1_type_st {
    pub type_: ::std::os::raw::c_int,
    pub value: asn1_type_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union asn1_type_st__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub boolean: ASN1_BOOLEAN,
    pub asn1_string: *mut ASN1_STRING,
    pub object: *mut ASN1_OBJECT,
    pub integer: *mut ASN1_INTEGER,
    pub enumerated: *mut ASN1_ENUMERATED,
    pub bit_string: *mut ASN1_BIT_STRING,
    pub octet_string: *mut ASN1_OCTET_STRING,
    pub printablestring: *mut ASN1_PRINTABLESTRING,
    pub t61string: *mut ASN1_T61STRING,
    pub ia5string: *mut ASN1_IA5STRING,
    pub generalstring: *mut ASN1_GENERALSTRING,
    pub bmpstring: *mut ASN1_BMPSTRING,
    pub universalstring: *mut ASN1_UNIVERSALSTRING,
    pub utctime: *mut ASN1_UTCTIME,
    pub generalizedtime: *mut ASN1_GENERALIZEDTIME,
    pub visiblestring: *mut ASN1_VISIBLESTRING,
    pub utf8string: *mut ASN1_UTF8STRING,
    pub set: *mut ASN1_STRING,
    pub sequence: *mut ASN1_STRING,
    pub asn1_value: *mut ASN1_VALUE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_asn1_type_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<asn1_type_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(asn1_type_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<asn1_type_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(asn1_type_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).boolean as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).asn1_string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(asn1_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).integer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).enumerated as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(enumerated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).bit_string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(bit_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).octet_string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(octet_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).printablestring as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(printablestring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).t61string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(t61string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).ia5string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(ia5string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).generalstring as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(generalstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).bmpstring as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(bmpstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).universalstring as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(universalstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).utctime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(utctime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).generalizedtime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(generalizedtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).visiblestring as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(visiblestring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).utf8string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(utf8string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).sequence as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn1_type_st__bindgen_ty_1>())).asn1_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st__bindgen_ty_1),
            "::",
            stringify!(asn1_value)
        )
    );
}
impl Default for asn1_type_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_asn1_type_st() {
    assert_eq!(
        ::std::mem::size_of::<asn1_type_st>(),
        16usize,
        concat!("Size of: ", stringify!(asn1_type_st))
    );
    assert_eq!(
        ::std::mem::align_of::<asn1_type_st>(),
        8usize,
        concat!("Alignment of ", stringify!(asn1_type_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_type_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn1_type_st>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn1_type_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for asn1_type_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_TYPE {
    _unused: [u8; 0],
}
pub type stack_ASN1_TYPE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_TYPE)>;
pub type stack_ASN1_TYPE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_TYPE) -> *mut ASN1_TYPE>;
pub type stack_ASN1_TYPE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ASN1_TYPE,
        b: *mut *const ASN1_TYPE,
    ) -> ::std::os::raw::c_int,
>;
pub type ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;
extern "C" {
    pub fn d2i_ASN1_SEQUENCE_ANY(
        a: *mut *mut ASN1_SEQUENCE_ANY,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_SEQUENCE_ANY;
}
extern "C" {
    pub fn i2d_ASN1_SEQUENCE_ANY(
        a: *const ASN1_SEQUENCE_ANY,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_SEQUENCE_ANY_it: ASN1_ITEM;
}
extern "C" {
    pub fn d2i_ASN1_SET_ANY(
        a: *mut *mut ASN1_SEQUENCE_ANY,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_SEQUENCE_ANY;
}
extern "C" {
    pub fn i2d_ASN1_SET_ANY(
        a: *const ASN1_SEQUENCE_ANY,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_SET_ANY_it: ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_algor_st {
    pub algorithm: *mut ASN1_OBJECT,
    pub parameter: *mut ASN1_TYPE,
}
#[test]
fn bindgen_test_layout_X509_algor_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_algor_st>(),
        16usize,
        concat!("Size of: ", stringify!(X509_algor_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_algor_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_algor_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_algor_st>())).algorithm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_algor_st),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_algor_st>())).parameter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_algor_st),
            "::",
            stringify!(parameter)
        )
    );
}
impl Default for X509_algor_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn X509_ALGOR_new() -> *mut X509_ALGOR;
}
extern "C" {
    pub fn X509_ALGOR_free(a: *mut X509_ALGOR);
}
extern "C" {
    pub fn d2i_X509_ALGOR(
        a: *mut *mut X509_ALGOR,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn i2d_X509_ALGOR(
        a: *mut X509_ALGOR,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_ALGOR_it: ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct BIT_STRING_BITNAME_st {
    pub bitnum: ::std::os::raw::c_int,
    pub lname: *const ::std::os::raw::c_char,
    pub sname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BIT_STRING_BITNAME_st() {
    assert_eq!(
        ::std::mem::size_of::<BIT_STRING_BITNAME_st>(),
        24usize,
        concat!("Size of: ", stringify!(BIT_STRING_BITNAME_st))
    );
    assert_eq!(
        ::std::mem::align_of::<BIT_STRING_BITNAME_st>(),
        8usize,
        concat!("Alignment of ", stringify!(BIT_STRING_BITNAME_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_BITNAME_st>())).bitnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_BITNAME_st),
            "::",
            stringify!(bitnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_BITNAME_st>())).lname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_BITNAME_st),
            "::",
            stringify!(lname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_BITNAME_st>())).sname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_BITNAME_st),
            "::",
            stringify!(sname)
        )
    );
}
impl Default for BIT_STRING_BITNAME_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
extern "C" {
    pub fn ASN1_TYPE_new() -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_TYPE_free(a: *mut ASN1_TYPE);
}
extern "C" {
    pub fn d2i_ASN1_TYPE(
        a: *mut *mut ASN1_TYPE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn i2d_ASN1_TYPE(
        a: *mut ASN1_TYPE,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_ANY_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TYPE_get(a: *const ASN1_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_set(
        a: *mut ASN1_TYPE,
        type_: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ASN1_TYPE_set1(
        a: *mut ASN1_TYPE,
        type_: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_TYPE_cmp(a: *const ASN1_TYPE, b: *const ASN1_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_OBJECT_new() -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn ASN1_OBJECT_free(a: *mut ASN1_OBJECT);
}
extern "C" {
    pub fn i2d_ASN1_OBJECT(
        a: *const ASN1_OBJECT,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c2i_ASN1_OBJECT(
        a: *mut *mut ASN1_OBJECT,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn d2i_ASN1_OBJECT(
        a: *mut *mut ASN1_OBJECT,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub static ASN1_OBJECT_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_BIT_STRING_new() -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn ASN1_BIT_STRING_free(a: *mut ASN1_BIT_STRING);
}
extern "C" {
    pub fn d2i_ASN1_BIT_STRING(
        a: *mut *mut ASN1_BIT_STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn i2d_ASN1_BIT_STRING(
        a: *mut ASN1_BIT_STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_BIT_STRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn i2c_ASN1_BIT_STRING(
        a: *const ASN1_BIT_STRING,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c2i_ASN1_BIT_STRING(
        a: *mut *mut ASN1_BIT_STRING,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn ASN1_BIT_STRING_set(
        a: *mut ASN1_BIT_STRING,
        d: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_set_bit(
        a: *mut ASN1_BIT_STRING,
        n: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_get_bit(
        a: *const ASN1_BIT_STRING,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_BIT_STRING_check(
        a: *const ASN1_BIT_STRING,
        flags: *mut ::std::os::raw::c_uchar,
        flags_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_ASN1_BOOLEAN(
        a: ::std::os::raw::c_int,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_ASN1_BOOLEAN(
        a: *mut ::std::os::raw::c_int,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_new() -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_free(a: *mut ASN1_INTEGER);
}
extern "C" {
    pub fn d2i_ASN1_INTEGER(
        a: *mut *mut ASN1_INTEGER,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn i2d_ASN1_INTEGER(
        a: *mut ASN1_INTEGER,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_INTEGER_it: ASN1_ITEM;
}
extern "C" {
    pub fn i2c_ASN1_INTEGER(
        a: *const ASN1_INTEGER,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c2i_ASN1_INTEGER(
        a: *mut *mut ASN1_INTEGER,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_dup(x: *const ASN1_INTEGER) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_cmp(
        x: *const ASN1_INTEGER,
        y: *const ASN1_INTEGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_new() -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn ASN1_ENUMERATED_free(a: *mut ASN1_ENUMERATED);
}
extern "C" {
    pub fn d2i_ASN1_ENUMERATED(
        a: *mut *mut ASN1_ENUMERATED,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn i2d_ASN1_ENUMERATED(
        a: *mut ASN1_ENUMERATED,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_ENUMERATED_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTCTIME_check(a: *const ASN1_UTCTIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_set(s: *mut ASN1_UTCTIME, t: time_t) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_adj(
        s: *mut ASN1_UTCTIME,
        t: time_t,
        offset_day: ::std::os::raw::c_int,
        offset_sec: ::std::os::raw::c_long,
    ) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_set_string(
        s: *mut ASN1_UTCTIME,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_cmp_time_t(s: *const ASN1_UTCTIME, t: time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_check(a: *const ASN1_GENERALIZEDTIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_set(
        s: *mut ASN1_GENERALIZEDTIME,
        t: time_t,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_adj(
        s: *mut ASN1_GENERALIZEDTIME,
        t: time_t,
        offset_day: ::std::os::raw::c_int,
        offset_sec: ::std::os::raw::c_long,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_set_string(
        s: *mut ASN1_GENERALIZEDTIME,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_TIME_diff(
        pday: *mut ::std::os::raw::c_int,
        psec: *mut ::std::os::raw::c_int,
        from: *const ASN1_TIME,
        to: *const ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_new() -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_free(a: *mut ASN1_OCTET_STRING);
}
extern "C" {
    pub fn d2i_ASN1_OCTET_STRING(
        a: *mut *mut ASN1_OCTET_STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn i2d_ASN1_OCTET_STRING(
        a: *mut ASN1_OCTET_STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_OCTET_STRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_dup(a: *const ASN1_OCTET_STRING) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_cmp(
        a: *const ASN1_OCTET_STRING,
        b: *const ASN1_OCTET_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_OCTET_STRING_set(
        str_: *mut ASN1_OCTET_STRING,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_VISIBLESTRING_new() -> *mut ASN1_VISIBLESTRING;
}
extern "C" {
    pub fn ASN1_VISIBLESTRING_free(a: *mut ASN1_VISIBLESTRING);
}
extern "C" {
    pub fn d2i_ASN1_VISIBLESTRING(
        a: *mut *mut ASN1_VISIBLESTRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_VISIBLESTRING;
}
extern "C" {
    pub fn i2d_ASN1_VISIBLESTRING(
        a: *mut ASN1_VISIBLESTRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_VISIBLESTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_new() -> *mut ASN1_UNIVERSALSTRING;
}
extern "C" {
    pub fn ASN1_UNIVERSALSTRING_free(a: *mut ASN1_UNIVERSALSTRING);
}
extern "C" {
    pub fn d2i_ASN1_UNIVERSALSTRING(
        a: *mut *mut ASN1_UNIVERSALSTRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_UNIVERSALSTRING;
}
extern "C" {
    pub fn i2d_ASN1_UNIVERSALSTRING(
        a: *mut ASN1_UNIVERSALSTRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_UNIVERSALSTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTF8STRING_new() -> *mut ASN1_UTF8STRING;
}
extern "C" {
    pub fn ASN1_UTF8STRING_free(a: *mut ASN1_UTF8STRING);
}
extern "C" {
    pub fn d2i_ASN1_UTF8STRING(
        a: *mut *mut ASN1_UTF8STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_UTF8STRING;
}
extern "C" {
    pub fn i2d_ASN1_UTF8STRING(
        a: *mut ASN1_UTF8STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_UTF8STRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_NULL_new() -> *mut ASN1_NULL;
}
extern "C" {
    pub fn ASN1_NULL_free(a: *mut ASN1_NULL);
}
extern "C" {
    pub fn d2i_ASN1_NULL(
        a: *mut *mut ASN1_NULL,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_NULL;
}
extern "C" {
    pub fn i2d_ASN1_NULL(
        a: *mut ASN1_NULL,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_NULL_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_BMPSTRING_new() -> *mut ASN1_BMPSTRING;
}
extern "C" {
    pub fn ASN1_BMPSTRING_free(a: *mut ASN1_BMPSTRING);
}
extern "C" {
    pub fn d2i_ASN1_BMPSTRING(
        a: *mut *mut ASN1_BMPSTRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_BMPSTRING;
}
extern "C" {
    pub fn i2d_ASN1_BMPSTRING(
        a: *mut ASN1_BMPSTRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_BMPSTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_PRINTABLE_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_PRINTABLE_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_ASN1_PRINTABLE(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_ASN1_PRINTABLE(
        a: *mut ASN1_STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_PRINTABLE_it: ASN1_ITEM;
}
extern "C" {
    pub fn DIRECTORYSTRING_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn DIRECTORYSTRING_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_DIRECTORYSTRING(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_DIRECTORYSTRING(
        a: *mut ASN1_STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static DIRECTORYSTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn DISPLAYTEXT_new() -> *mut ASN1_STRING;
}
extern "C" {
    pub fn DISPLAYTEXT_free(a: *mut ASN1_STRING);
}
extern "C" {
    pub fn d2i_DISPLAYTEXT(
        a: *mut *mut ASN1_STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn i2d_DISPLAYTEXT(
        a: *mut ASN1_STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static DISPLAYTEXT_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_PRINTABLESTRING_new() -> *mut ASN1_PRINTABLESTRING;
}
extern "C" {
    pub fn ASN1_PRINTABLESTRING_free(a: *mut ASN1_PRINTABLESTRING);
}
extern "C" {
    pub fn d2i_ASN1_PRINTABLESTRING(
        a: *mut *mut ASN1_PRINTABLESTRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_PRINTABLESTRING;
}
extern "C" {
    pub fn i2d_ASN1_PRINTABLESTRING(
        a: *mut ASN1_PRINTABLESTRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_PRINTABLESTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_T61STRING_new() -> *mut ASN1_T61STRING;
}
extern "C" {
    pub fn ASN1_T61STRING_free(a: *mut ASN1_T61STRING);
}
extern "C" {
    pub fn d2i_ASN1_T61STRING(
        a: *mut *mut ASN1_T61STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_T61STRING;
}
extern "C" {
    pub fn i2d_ASN1_T61STRING(
        a: *mut ASN1_T61STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_T61STRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_IA5STRING_new() -> *mut ASN1_IA5STRING;
}
extern "C" {
    pub fn ASN1_IA5STRING_free(a: *mut ASN1_IA5STRING);
}
extern "C" {
    pub fn d2i_ASN1_IA5STRING(
        a: *mut *mut ASN1_IA5STRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_IA5STRING;
}
extern "C" {
    pub fn i2d_ASN1_IA5STRING(
        a: *mut ASN1_IA5STRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_IA5STRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_GENERALSTRING_new() -> *mut ASN1_GENERALSTRING;
}
extern "C" {
    pub fn ASN1_GENERALSTRING_free(a: *mut ASN1_GENERALSTRING);
}
extern "C" {
    pub fn d2i_ASN1_GENERALSTRING(
        a: *mut *mut ASN1_GENERALSTRING,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_GENERALSTRING;
}
extern "C" {
    pub fn i2d_ASN1_GENERALSTRING(
        a: *mut ASN1_GENERALSTRING,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_GENERALSTRING_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_UTCTIME_new() -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn ASN1_UTCTIME_free(a: *mut ASN1_UTCTIME);
}
extern "C" {
    pub fn d2i_ASN1_UTCTIME(
        a: *mut *mut ASN1_UTCTIME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_UTCTIME;
}
extern "C" {
    pub fn i2d_ASN1_UTCTIME(
        a: *mut ASN1_UTCTIME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_UTCTIME_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_new() -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_free(a: *mut ASN1_GENERALIZEDTIME);
}
extern "C" {
    pub fn d2i_ASN1_GENERALIZEDTIME(
        a: *mut *mut ASN1_GENERALIZEDTIME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn i2d_ASN1_GENERALIZEDTIME(
        a: *mut ASN1_GENERALIZEDTIME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_GENERALIZEDTIME_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TIME_new() -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_free(a: *mut ASN1_TIME);
}
extern "C" {
    pub fn d2i_ASN1_TIME(
        a: *mut *mut ASN1_TIME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn i2d_ASN1_TIME(
        a: *mut ASN1_TIME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ASN1_TIME_it: ASN1_ITEM;
}
extern "C" {
    pub fn ASN1_TIME_set(s: *mut ASN1_TIME, t: time_t) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_adj(
        s: *mut ASN1_TIME,
        t: time_t,
        offset_day: ::std::os::raw::c_int,
        offset_sec: ::std::os::raw::c_long,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn ASN1_TIME_check(t: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_TIME_to_generalizedtime(
        t: *const ASN1_TIME,
        out: *mut *mut ASN1_GENERALIZEDTIME,
    ) -> *mut ASN1_GENERALIZEDTIME;
}
extern "C" {
    pub fn ASN1_TIME_set_string(
        s: *mut ASN1_TIME,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2a_ASN1_INTEGER(bp: *mut BIO, a: *const ASN1_INTEGER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2a_ASN1_ENUMERATED(bp: *mut BIO, a: *const ASN1_ENUMERATED) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2a_ASN1_OBJECT(bp: *mut BIO, a: *const ASN1_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2a_ASN1_STRING(
        bp: *mut BIO,
        a: *const ASN1_STRING,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2t_ASN1_OBJECT(
        buf: *mut ::std::os::raw::c_char,
        buf_len: ::std::os::raw::c_int,
        a: *const ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_OBJECT_create(
        nid: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        sn: *const ::std::os::raw::c_char,
        ln: *const ::std::os::raw::c_char,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn ASN1_INTEGER_set(
        a: *mut ASN1_INTEGER,
        v: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_set_uint64(out: *mut ASN1_INTEGER, v: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_INTEGER_get(a: *const ASN1_INTEGER) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BN_to_ASN1_INTEGER(bn: *const BIGNUM, ai: *mut ASN1_INTEGER) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn ASN1_INTEGER_to_BN(ai: *const ASN1_INTEGER, bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn ASN1_ENUMERATED_set(
        a: *mut ASN1_ENUMERATED,
        v: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_ENUMERATED_get(a: *const ASN1_ENUMERATED) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn BN_to_ASN1_ENUMERATED(
        bn: *const BIGNUM,
        ai: *mut ASN1_ENUMERATED,
    ) -> *mut ASN1_ENUMERATED;
}
extern "C" {
    pub fn ASN1_ENUMERATED_to_BN(ai: *const ASN1_ENUMERATED, bn: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn ASN1_PRINTABLE_type(
        s: *const ::std::os::raw::c_uchar,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_tag2bit(tag: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ASN1_get_object(
        pp: *mut *const ::std::os::raw::c_uchar,
        plength: *mut ::std::os::raw::c_long,
        ptag: *mut ::std::os::raw::c_int,
        pclass: *mut ::std::os::raw::c_int,
        omax: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_put_object(
        pp: *mut *mut ::std::os::raw::c_uchar,
        constructed: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        xclass: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ASN1_put_eoc(pp: *mut *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_object_size(
        constructed: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_dup(
        it: *const ASN1_ITEM,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ASN1_item_d2i_fp(
        it: *const ASN1_ITEM,
        in_: *mut FILE,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ASN1_item_i2d_fp(
        it: *const ASN1_ITEM,
        out: *mut FILE,
        x: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print_ex_fp(
        fp: *mut FILE,
        str_: *const ASN1_STRING,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_to_UTF8(
        out: *mut *mut ::std::os::raw::c_uchar,
        in_: *mut ASN1_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_d2i_bio(
        it: *const ASN1_ITEM,
        in_: *mut BIO,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ASN1_item_i2d_bio(
        it: *const ASN1_ITEM,
        out: *mut BIO,
        x: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_UTCTIME_print(fp: *mut BIO, a: *const ASN1_UTCTIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_GENERALIZEDTIME_print(
        fp: *mut BIO,
        a: *const ASN1_GENERALIZEDTIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_TIME_print(fp: *mut BIO, a: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print(bp: *mut BIO, v: *const ASN1_STRING) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_print_ex(
        out: *mut BIO,
        str_: *const ASN1_STRING,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_tag2str(tag: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ASN1_item_unpack(
        oct: *const ASN1_STRING,
        it: *const ASN1_ITEM,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ASN1_item_pack(
        obj: *mut ::std::os::raw::c_void,
        it: *const ASN1_ITEM,
        oct: *mut *mut ASN1_OCTET_STRING,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_set_default_mask(mask: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ASN1_STRING_set_default_mask_asc(
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_get_default_mask() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ASN1_mbstring_copy(
        out: *mut *mut ASN1_STRING,
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        inform: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_mbstring_ncopy(
        out: *mut *mut ASN1_STRING,
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        inform: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_ulong,
        minsize: ::std::os::raw::c_long,
        maxsize: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_set_by_NID(
        out: *mut *mut ASN1_STRING,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        inform: ::std::os::raw::c_int,
        nid: ::std::os::raw::c_int,
    ) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_get(nid: ::std::os::raw::c_int) -> *mut ASN1_STRING_TABLE;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_add(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_STRING_TABLE_cleanup();
}
extern "C" {
    pub fn ASN1_item_new(it: *const ASN1_ITEM) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_free(val: *mut ASN1_VALUE, it: *const ASN1_ITEM);
}
extern "C" {
    pub fn ASN1_item_d2i(
        val: *mut *mut ASN1_VALUE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        it: *const ASN1_ITEM,
    ) -> *mut ASN1_VALUE;
}
extern "C" {
    pub fn ASN1_item_i2d(
        val: *mut ASN1_VALUE,
        out: *mut *mut ::std::os::raw::c_uchar,
        it: *const ASN1_ITEM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_generate_nconf(
        str_: *const ::std::os::raw::c_char,
        nconf: *mut CONF,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn ASN1_generate_v3(
        str_: *const ::std::os::raw::c_char,
        cnf: *mut X509V3_CTX,
    ) -> *mut ASN1_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_TEMPLATE_st {
    pub flags: ::std::os::raw::c_ulong,
    pub tag: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_ulong,
    pub field_name: *const ::std::os::raw::c_char,
    pub item: *mut ASN1_ITEM_EXP,
}
#[test]
fn bindgen_test_layout_ASN1_TEMPLATE_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_TEMPLATE_st>(),
        40usize,
        concat!("Size of: ", stringify!(ASN1_TEMPLATE_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_TEMPLATE_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_TEMPLATE_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TEMPLATE_st>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TEMPLATE_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TEMPLATE_st>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TEMPLATE_st),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TEMPLATE_st>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TEMPLATE_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TEMPLATE_st>())).field_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TEMPLATE_st),
            "::",
            stringify!(field_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TEMPLATE_st>())).item as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TEMPLATE_st),
            "::",
            stringify!(item)
        )
    );
}
impl Default for ASN1_TEMPLATE_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ASN1_ADB_TABLE = ASN1_ADB_TABLE_st;
pub type ASN1_ADB = ASN1_ADB_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_must_be_null_st {
    _unused: [u8; 0],
}
pub type ASN1_MUST_BE_NULL = asn1_must_be_null_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_ADB_st {
    pub flags: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
    pub unused: *mut ASN1_MUST_BE_NULL,
    pub tbl: *const ASN1_ADB_TABLE,
    pub tblcount: ::std::os::raw::c_long,
    pub default_tt: *const ASN1_TEMPLATE,
    pub null_tt: *const ASN1_TEMPLATE,
}
#[test]
fn bindgen_test_layout_ASN1_ADB_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_ADB_st>(),
        56usize,
        concat!("Size of: ", stringify!(ASN1_ADB_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_ADB_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_ADB_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).unused as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).tbl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).tblcount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(tblcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).default_tt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(default_tt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_st>())).null_tt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_st),
            "::",
            stringify!(null_tt)
        )
    );
}
impl Default for ASN1_ADB_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_ADB_TABLE_st {
    pub value: ::std::os::raw::c_long,
    pub tt: ASN1_TEMPLATE,
}
#[test]
fn bindgen_test_layout_ASN1_ADB_TABLE_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_ADB_TABLE_st>(),
        48usize,
        concat!("Size of: ", stringify!(ASN1_ADB_TABLE_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_ADB_TABLE_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_ADB_TABLE_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_TABLE_st>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_TABLE_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ADB_TABLE_st>())).tt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ADB_TABLE_st),
            "::",
            stringify!(tt)
        )
    );
}
impl Default for ASN1_ADB_TABLE_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_ITEM_st {
    pub itype: ::std::os::raw::c_char,
    pub utype: ::std::os::raw::c_long,
    pub templates: *const ASN1_TEMPLATE,
    pub tcount: ::std::os::raw::c_long,
    pub funcs: *const ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_long,
    pub sname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ASN1_ITEM_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_ITEM_st>(),
        56usize,
        concat!("Size of: ", stringify!(ASN1_ITEM_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_ITEM_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_ITEM_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).itype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).utype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(utype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).templates as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(templates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).tcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(tcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).funcs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_ITEM_st>())).sname as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_ITEM_st),
            "::",
            stringify!(sname)
        )
    );
}
impl Default for ASN1_ITEM_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_TLC_st {
    pub valid: ::std::os::raw::c_char,
    pub ret: ::std::os::raw::c_int,
    pub plen: ::std::os::raw::c_long,
    pub ptag: ::std::os::raw::c_int,
    pub pclass: ::std::os::raw::c_int,
    pub hdrlen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ASN1_TLC_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_TLC_st>(),
        32usize,
        concat!("Size of: ", stringify!(ASN1_TLC_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_TLC_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_TLC_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).ret as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).plen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(plen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).ptag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(ptag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).pclass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(pclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_TLC_st>())).hdrlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_TLC_st),
            "::",
            stringify!(hdrlen)
        )
    );
}
pub type ASN1_new_func = ::std::option::Option<unsafe extern "C" fn() -> *mut ASN1_VALUE>;
pub type ASN1_free_func = ::std::option::Option<unsafe extern "C" fn(a: *mut ASN1_VALUE)>;
pub type ASN1_d2i_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *mut ASN1_VALUE,
        in_: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut ASN1_VALUE,
>;
pub type ASN1_i2d_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut ASN1_VALUE,
        in_: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type ASN1_ex_d2i = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        it: *const ASN1_ITEM,
        tag: ::std::os::raw::c_int,
        aclass: ::std::os::raw::c_int,
        opt: ::std::os::raw::c_char,
        ctx: *mut ASN1_TLC,
    ) -> ::std::os::raw::c_int,
>;
pub type ASN1_ex_i2d = ::std::option::Option<
    unsafe extern "C" fn(
        pval: *mut *mut ASN1_VALUE,
        out: *mut *mut ::std::os::raw::c_uchar,
        it: *const ASN1_ITEM,
        tag: ::std::os::raw::c_int,
        aclass: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type ASN1_ex_new_func = ::std::option::Option<
    unsafe extern "C" fn(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM) -> ::std::os::raw::c_int,
>;
pub type ASN1_ex_free_func =
    ::std::option::Option<unsafe extern "C" fn(pval: *mut *mut ASN1_VALUE, it: *const ASN1_ITEM)>;
pub type ASN1_ex_print_func = ::std::option::Option<
    unsafe extern "C" fn(
        out: *mut BIO,
        pval: *mut *mut ASN1_VALUE,
        indent: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
        pctx: *const ASN1_PCTX,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_EXTERN_FUNCS_st {
    pub app_data: *mut ::std::os::raw::c_void,
    pub asn1_ex_new: ASN1_ex_new_func,
    pub asn1_ex_free: ASN1_ex_free_func,
    pub asn1_ex_clear: ASN1_ex_free_func,
    pub asn1_ex_d2i: ASN1_ex_d2i,
    pub asn1_ex_i2d: ASN1_ex_i2d,
    pub asn1_ex_print: ASN1_ex_print_func,
}
#[test]
fn bindgen_test_layout_ASN1_EXTERN_FUNCS_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_EXTERN_FUNCS_st>(),
        56usize,
        concat!("Size of: ", stringify!(ASN1_EXTERN_FUNCS_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_EXTERN_FUNCS_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_EXTERN_FUNCS_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).app_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_new as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_free as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_clear as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_d2i as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_d2i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_i2d as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_i2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ASN1_EXTERN_FUNCS_st>())).asn1_ex_print as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_EXTERN_FUNCS_st),
            "::",
            stringify!(asn1_ex_print)
        )
    );
}
impl Default for ASN1_EXTERN_FUNCS_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ASN1_EXTERN_FUNCS = ASN1_EXTERN_FUNCS_st;
pub type ASN1_aux_cb = ::std::option::Option<
    unsafe extern "C" fn(
        operation: ::std::os::raw::c_int,
        in_: *mut *mut ASN1_VALUE,
        it: *const ASN1_ITEM,
        exarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ASN1_AUX_st {
    pub app_data: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_int,
    pub ref_offset: ::std::os::raw::c_int,
    pub asn1_cb: ASN1_aux_cb,
    pub enc_offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ASN1_AUX_st() {
    assert_eq!(
        ::std::mem::size_of::<ASN1_AUX_st>(),
        32usize,
        concat!("Size of: ", stringify!(ASN1_AUX_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN1_AUX_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN1_AUX_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_AUX_st>())).app_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_AUX_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_AUX_st>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_AUX_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_AUX_st>())).ref_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_AUX_st),
            "::",
            stringify!(ref_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_AUX_st>())).asn1_cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_AUX_st),
            "::",
            stringify!(asn1_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN1_AUX_st>())).enc_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN1_AUX_st),
            "::",
            stringify!(enc_offset)
        )
    );
}
impl Default for ASN1_AUX_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ASN1_AUX = ASN1_AUX_st;
extern "C" {
    pub static ASN1_BOOLEAN_it: ASN1_ITEM;
}
extern "C" {
    pub static ASN1_TBOOLEAN_it: ASN1_ITEM;
}
extern "C" {
    pub static ASN1_FBOOLEAN_it: ASN1_ITEM;
}
extern "C" {
    pub static ASN1_SEQUENCE_it: ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ASN1_VALUE {
    _unused: [u8; 0],
}
pub type stack_ASN1_VALUE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_VALUE)>;
pub type stack_ASN1_VALUE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ASN1_VALUE) -> *mut ASN1_VALUE>;
pub type stack_ASN1_VALUE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ASN1_VALUE,
        b: *mut *const ASN1_VALUE,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2b_state_st {
    pub h: [u64; 8usize],
    pub t_low: u64,
    pub t_high: u64,
    pub block: blake2b_state_st__bindgen_ty_1,
    pub block_used: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union blake2b_state_st__bindgen_ty_1 {
    pub bytes: [u8; 128usize],
    pub words: [u64; 16usize],
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout_blake2b_state_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<blake2b_state_st__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(blake2b_state_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<blake2b_state_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(blake2b_state_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blake2b_state_st__bindgen_ty_1>())).bytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<blake2b_state_st__bindgen_ty_1>())).words as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st__bindgen_ty_1),
            "::",
            stringify!(words)
        )
    );
}
impl Default for blake2b_state_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_blake2b_state_st() {
    assert_eq!(
        ::std::mem::size_of::<blake2b_state_st>(),
        216usize,
        concat!("Size of: ", stringify!(blake2b_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<blake2b_state_st>(),
        8usize,
        concat!("Alignment of ", stringify!(blake2b_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blake2b_state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blake2b_state_st>())).t_low as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st),
            "::",
            stringify!(t_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blake2b_state_st>())).t_high as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st),
            "::",
            stringify!(t_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blake2b_state_st>())).block as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blake2b_state_st>())).block_used as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(blake2b_state_st),
            "::",
            stringify!(block_used)
        )
    );
}
impl Default for blake2b_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn BLAKE2B256_Init(b2b: *mut BLAKE2B_CTX);
}
extern "C" {
    pub fn BLAKE2B256_Update(
        b2b: *mut BLAKE2B_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    );
}
extern "C" {
    pub fn BLAKE2B256_Final(out: *mut u8, b2b: *mut BLAKE2B_CTX);
}
extern "C" {
    pub fn BLAKE2B256(data: *const u8, len: usize, out: *mut u8);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bf_key_st {
    pub P: [u32; 18usize],
    pub S: [u32; 1024usize],
}
#[test]
fn bindgen_test_layout_bf_key_st() {
    assert_eq!(
        ::std::mem::size_of::<bf_key_st>(),
        4168usize,
        concat!("Size of: ", stringify!(bf_key_st))
    );
    assert_eq!(
        ::std::mem::align_of::<bf_key_st>(),
        4usize,
        concat!("Alignment of ", stringify!(bf_key_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bf_key_st>())).P as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bf_key_st),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bf_key_st>())).S as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bf_key_st),
            "::",
            stringify!(S)
        )
    );
}
impl Default for bf_key_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type BF_KEY = bf_key_st;
extern "C" {
    pub fn BF_set_key(key: *mut BF_KEY, len: usize, data: *const u8);
}
extern "C" {
    pub fn BF_encrypt(data: *mut u32, key: *const BF_KEY);
}
extern "C" {
    pub fn BF_decrypt(data: *mut u32, key: *const BF_KEY);
}
extern "C" {
    pub fn BF_ecb_encrypt(
        in_: *const u8,
        out: *mut u8,
        key: *const BF_KEY,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BF_cbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        length: usize,
        schedule: *const BF_KEY,
        ivec: *mut u8,
        enc: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct cast_key_st {
    pub data: [u32; 32usize],
    pub short_key: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cast_key_st() {
    assert_eq!(
        ::std::mem::size_of::<cast_key_st>(),
        132usize,
        concat!("Size of: ", stringify!(cast_key_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cast_key_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cast_key_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cast_key_st>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cast_key_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cast_key_st>())).short_key as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cast_key_st),
            "::",
            stringify!(short_key)
        )
    );
}
pub type CAST_KEY = cast_key_st;
extern "C" {
    pub fn CAST_set_key(key: *mut CAST_KEY, len: usize, data: *const u8);
}
extern "C" {
    pub fn CAST_ecb_encrypt(
        in_: *const u8,
        out: *mut u8,
        key: *const CAST_KEY,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CAST_encrypt(data: *mut u32, key: *const CAST_KEY);
}
extern "C" {
    pub fn CAST_decrypt(data: *mut u32, key: *const CAST_KEY);
}
extern "C" {
    pub fn CAST_cbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        length: usize,
        ks: *const CAST_KEY,
        iv: *mut u8,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CAST_cfb64_encrypt(
        in_: *const u8,
        out: *mut u8,
        length: usize,
        schedule: *const CAST_KEY,
        ivec: *mut u8,
        num: *mut ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CRYPTO_chacha_20(
        out: *mut u8,
        in_: *const u8,
        in_len: usize,
        key: *const u8,
        nonce: *const u8,
        counter: u32,
    );
}
extern "C" {
    pub fn AES_CMAC(
        out: *mut u8,
        key: *const u8,
        key_len: usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CMAC_CTX_new() -> *mut CMAC_CTX;
}
extern "C" {
    pub fn CMAC_CTX_free(ctx: *mut CMAC_CTX);
}
extern "C" {
    pub fn CMAC_CTX_copy(out: *mut CMAC_CTX, in_: *const CMAC_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CMAC_Init(
        ctx: *mut CMAC_CTX,
        key: *const ::std::os::raw::c_void,
        key_len: usize,
        cipher: *const EVP_CIPHER,
        engine: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CMAC_Reset(ctx: *mut CMAC_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CMAC_Update(ctx: *mut CMAC_CTX, in_: *const u8, in_len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CMAC_Final(
        ctx: *mut CMAC_CTX,
        out: *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut OPENSSL_ia32cap_P: [u32; 4usize];
}
extern "C" {
    pub fn X25519_keypair(out_public_value: *mut u8, out_private_key: *mut u8);
}
extern "C" {
    pub fn X25519(
        out_shared_key: *mut u8,
        private_key: *const u8,
        peer_public_value: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X25519_public_from_private(out_public_value: *mut u8, private_key: *const u8);
}
extern "C" {
    pub fn ED25519_keypair(out_public_key: *mut u8, out_private_key: *mut u8);
}
extern "C" {
    pub fn ED25519_sign(
        out_sig: *mut u8,
        message: *const u8,
        message_len: usize,
        private_key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ED25519_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        public_key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ED25519_keypair_from_seed(
        out_public_key: *mut u8,
        out_private_key: *mut u8,
        seed: *const u8,
    );
}
impl spake2_role_t {
    pub const spake2_role_alice: spake2_role_t = spake2_role_t(0);
}
impl spake2_role_t {
    pub const spake2_role_bob: spake2_role_t = spake2_role_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct spake2_role_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn SPAKE2_CTX_new(
        my_role: spake2_role_t,
        my_name: *const u8,
        my_name_len: usize,
        their_name: *const u8,
        their_name_len: usize,
    ) -> *mut SPAKE2_CTX;
}
extern "C" {
    pub fn SPAKE2_CTX_free(ctx: *mut SPAKE2_CTX);
}
extern "C" {
    pub fn SPAKE2_generate_msg(
        ctx: *mut SPAKE2_CTX,
        out: *mut u8,
        out_len: *mut usize,
        max_out_len: usize,
        password: *const u8,
        password_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPAKE2_process_msg(
        ctx: *mut SPAKE2_CTX,
        out_key: *mut u8,
        out_key_len: *mut usize,
        max_out_key_len: usize,
        their_msg: *const u8,
        their_msg_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct DES_cblock_st {
    pub bytes: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_DES_cblock_st() {
    assert_eq!(
        ::std::mem::size_of::<DES_cblock_st>(),
        8usize,
        concat!("Size of: ", stringify!(DES_cblock_st))
    );
    assert_eq!(
        ::std::mem::align_of::<DES_cblock_st>(),
        1usize,
        concat!("Alignment of ", stringify!(DES_cblock_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DES_cblock_st>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DES_cblock_st),
            "::",
            stringify!(bytes)
        )
    );
}
pub type DES_cblock = DES_cblock_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct DES_ks {
    pub subkeys: [[u32; 2usize]; 16usize],
}
#[test]
fn bindgen_test_layout_DES_ks() {
    assert_eq!(
        ::std::mem::size_of::<DES_ks>(),
        128usize,
        concat!("Size of: ", stringify!(DES_ks))
    );
    assert_eq!(
        ::std::mem::align_of::<DES_ks>(),
        4usize,
        concat!("Alignment of ", stringify!(DES_ks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DES_ks>())).subkeys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DES_ks),
            "::",
            stringify!(subkeys)
        )
    );
}
pub type DES_key_schedule = DES_ks;
extern "C" {
    pub fn DES_set_key(key: *const DES_cblock, schedule: *mut DES_key_schedule);
}
extern "C" {
    pub fn DES_set_odd_parity(key: *mut DES_cblock);
}
extern "C" {
    pub fn DES_ecb_encrypt(
        in_: *const DES_cblock,
        out: *mut DES_cblock,
        schedule: *const DES_key_schedule,
        is_encrypt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_ncbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        schedule: *const DES_key_schedule,
        ivec: *mut DES_cblock,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_ecb3_encrypt(
        input: *const DES_cblock,
        output: *mut DES_cblock,
        ks1: *const DES_key_schedule,
        ks2: *const DES_key_schedule,
        ks3: *const DES_key_schedule,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_ede3_cbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        ks1: *const DES_key_schedule,
        ks2: *const DES_key_schedule,
        ks3: *const DES_key_schedule,
        ivec: *mut DES_cblock,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_ede2_cbc_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        ks1: *const DES_key_schedule,
        ks2: *const DES_key_schedule,
        ivec: *mut DES_cblock,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_set_key_unchecked(key: *const DES_cblock, schedule: *mut DES_key_schedule);
}
extern "C" {
    pub fn DES_ede3_cfb64_encrypt(
        in_: *const u8,
        out: *mut u8,
        length: ::std::os::raw::c_long,
        ks1: *mut DES_key_schedule,
        ks2: *mut DES_key_schedule,
        ks3: *mut DES_key_schedule,
        ivec: *mut DES_cblock,
        num: *mut ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_ede3_cfb_encrypt(
        in_: *const u8,
        out: *mut u8,
        numbits: ::std::os::raw::c_int,
        length: ::std::os::raw::c_long,
        ks1: *mut DES_key_schedule,
        ks2: *mut DES_key_schedule,
        ks3: *mut DES_key_schedule,
        ivec: *mut DES_cblock,
        enc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DES_decrypt3(
        data: *mut u32,
        ks1: *const DES_key_schedule,
        ks2: *const DES_key_schedule,
        ks3: *const DES_key_schedule,
    );
}
extern "C" {
    pub fn DES_encrypt3(
        data: *mut u32,
        ks1: *const DES_key_schedule,
        ks2: *const DES_key_schedule,
        ks3: *const DES_key_schedule,
    );
}
extern "C" {
    pub fn HKDF(
        out_key: *mut u8,
        out_len: usize,
        digest: *const EVP_MD,
        secret: *const u8,
        secret_len: usize,
        salt: *const u8,
        salt_len: usize,
        info: *const u8,
        info_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HKDF_extract(
        out_key: *mut u8,
        out_len: *mut usize,
        digest: *const EVP_MD,
        secret: *const u8,
        secret_len: usize,
        salt: *const u8,
        salt_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HKDF_expand(
        out_key: *mut u8,
        out_len: usize,
        digest: *const EVP_MD,
        prk: *const u8,
        prk_len: usize,
        info: *const u8,
        info_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HRSS_private_key {
    pub opaque: [u8; 1808usize],
}
#[test]
fn bindgen_test_layout_HRSS_private_key() {
    assert_eq!(
        ::std::mem::size_of::<HRSS_private_key>(),
        1808usize,
        concat!("Size of: ", stringify!(HRSS_private_key))
    );
    assert_eq!(
        ::std::mem::align_of::<HRSS_private_key>(),
        1usize,
        concat!("Alignment of ", stringify!(HRSS_private_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HRSS_private_key>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRSS_private_key),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for HRSS_private_key {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HRSS_public_key {
    pub opaque: [u8; 1424usize],
}
#[test]
fn bindgen_test_layout_HRSS_public_key() {
    assert_eq!(
        ::std::mem::size_of::<HRSS_public_key>(),
        1424usize,
        concat!("Size of: ", stringify!(HRSS_public_key))
    );
    assert_eq!(
        ::std::mem::align_of::<HRSS_public_key>(),
        1usize,
        concat!("Alignment of ", stringify!(HRSS_public_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HRSS_public_key>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HRSS_public_key),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for HRSS_public_key {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn HRSS_generate_key(
        out_pub: *mut HRSS_public_key,
        out_priv: *mut HRSS_private_key,
        input: *const u8,
    );
}
extern "C" {
    pub fn HRSS_encap(
        out_ciphertext: *mut u8,
        out_shared_key: *mut u8,
        in_pub: *const HRSS_public_key,
        in_: *const u8,
    );
}
extern "C" {
    pub fn HRSS_decap(
        out_shared_key: *mut u8,
        in_priv: *const HRSS_private_key,
        ciphertext: *const u8,
        ciphertext_len: usize,
    );
}
extern "C" {
    pub fn HRSS_marshal_public_key(out: *mut u8, in_pub: *const HRSS_public_key);
}
extern "C" {
    pub fn HRSS_parse_public_key(
        out: *mut HRSS_public_key,
        in_: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD4_Init(md4: *mut MD4_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD4_Update(
        md4: *mut MD4_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD4_Final(out: *mut u8, md4: *mut MD4_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD4(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn MD4_Transform(md4: *mut MD4_CTX, block: *const u8);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct md4_state_st {
    pub h: [u32; 4usize],
    pub Nl: u32,
    pub Nh: u32,
    pub data: [u8; 64usize],
    pub num: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_md4_state_st() {
    assert_eq!(
        ::std::mem::size_of::<md4_state_st>(),
        92usize,
        concat!("Size of: ", stringify!(md4_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<md4_state_st>(),
        4usize,
        concat!("Alignment of ", stringify!(md4_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md4_state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(md4_state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md4_state_st>())).Nl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(md4_state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md4_state_st>())).Nh as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(md4_state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md4_state_st>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(md4_state_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md4_state_st>())).num as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(md4_state_st),
            "::",
            stringify!(num)
        )
    );
}
impl Default for md4_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn MD5_Init(md5: *mut MD5_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD5_Update(
        md5: *mut MD5_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD5_Final(out: *mut u8, md5: *mut MD5_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MD5(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn MD5_Transform(md5: *mut MD5_CTX, block: *const u8);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct md5_state_st {
    pub h: [u32; 4usize],
    pub Nl: u32,
    pub Nh: u32,
    pub data: [u8; 64usize],
    pub num: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_md5_state_st() {
    assert_eq!(
        ::std::mem::size_of::<md5_state_st>(),
        92usize,
        concat!("Size of: ", stringify!(md5_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<md5_state_st>(),
        4usize,
        concat!("Alignment of ", stringify!(md5_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md5_state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(md5_state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md5_state_st>())).Nl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(md5_state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md5_state_st>())).Nh as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(md5_state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md5_state_st>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(md5_state_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<md5_state_st>())).num as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(md5_state_st),
            "::",
            stringify!(num)
        )
    );
}
impl Default for md5_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct cbs_st {
    pub data: *const u8,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_cbs_st() {
    assert_eq!(
        ::std::mem::size_of::<cbs_st>(),
        16usize,
        concat!("Size of: ", stringify!(cbs_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cbs_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cbs_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbs_st>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbs_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbs_st>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cbs_st),
            "::",
            stringify!(len)
        )
    );
}
impl Default for cbs_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CBS_init(cbs: *mut CBS, data: *const u8, len: usize);
}
extern "C" {
    pub fn CBS_skip(cbs: *mut CBS, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_data(cbs: *const CBS) -> *const u8;
}
extern "C" {
    pub fn CBS_len(cbs: *const CBS) -> usize;
}
extern "C" {
    pub fn CBS_stow(
        cbs: *const CBS,
        out_ptr: *mut *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_strdup(
        cbs: *const CBS,
        out_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_contains_zero_byte(cbs: *const CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_mem_equal(cbs: *const CBS, data: *const u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u8(cbs: *mut CBS, out: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u16(cbs: *mut CBS, out: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u16le(cbs: *mut CBS, out: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u24(cbs: *mut CBS, out: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u32(cbs: *mut CBS, out: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u32le(cbs: *mut CBS, out: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u64(cbs: *mut CBS, out: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u64le(cbs: *mut CBS, out: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_last_u8(cbs: *mut CBS, out: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_bytes(cbs: *mut CBS, out: *mut CBS, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_copy_bytes(cbs: *mut CBS, out: *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u8_length_prefixed(cbs: *mut CBS, out: *mut CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u16_length_prefixed(cbs: *mut CBS, out: *mut CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_u24_length_prefixed(cbs: *mut CBS, out: *mut CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_asn1(
        cbs: *mut CBS,
        out: *mut CBS,
        tag_value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_asn1_element(
        cbs: *mut CBS,
        out: *mut CBS,
        tag_value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_peek_asn1_tag(
        cbs: *const CBS,
        tag_value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_any_asn1(
        cbs: *mut CBS,
        out: *mut CBS,
        out_tag: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_any_asn1_element(
        cbs: *mut CBS,
        out: *mut CBS,
        out_tag: *mut ::std::os::raw::c_uint,
        out_header_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_any_ber_asn1_element(
        cbs: *mut CBS,
        out: *mut CBS,
        out_tag: *mut ::std::os::raw::c_uint,
        out_header_len: *mut usize,
        out_ber_found: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_asn1_uint64(cbs: *mut CBS, out: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_asn1_int64(cbs: *mut CBS, out: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_asn1_bool(
        cbs: *mut CBS,
        out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_optional_asn1(
        cbs: *mut CBS,
        out: *mut CBS,
        out_present: *mut ::std::os::raw::c_int,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_optional_asn1_octet_string(
        cbs: *mut CBS,
        out: *mut CBS,
        out_present: *mut ::std::os::raw::c_int,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_optional_asn1_uint64(
        cbs: *mut CBS,
        out: *mut u64,
        tag: ::std::os::raw::c_uint,
        default_value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_get_optional_asn1_bool(
        cbs: *mut CBS,
        out: *mut ::std::os::raw::c_int,
        tag: ::std::os::raw::c_uint,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_is_valid_asn1_bitstring(cbs: *const CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_asn1_bitstring_has_bit(
        cbs: *const CBS,
        bit: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_is_valid_asn1_integer(
        cbs: *const CBS,
        out_is_negative: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_is_unsigned_asn1_integer(cbs: *const CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBS_asn1_oid_to_text(cbs: *const CBS) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct cbb_buffer_st {
    pub buf: *mut u8,
    pub len: usize,
    pub cap: usize,
    pub can_resize: ::std::os::raw::c_char,
    pub error: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cbb_buffer_st() {
    assert_eq!(
        ::std::mem::size_of::<cbb_buffer_st>(),
        32usize,
        concat!("Size of: ", stringify!(cbb_buffer_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cbb_buffer_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cbb_buffer_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_buffer_st>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_buffer_st),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_buffer_st>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_buffer_st),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_buffer_st>())).cap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_buffer_st),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_buffer_st>())).can_resize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_buffer_st),
            "::",
            stringify!(can_resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_buffer_st>())).error as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_buffer_st),
            "::",
            stringify!(error)
        )
    );
}
impl Default for cbb_buffer_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct cbb_st {
    pub base: *mut cbb_buffer_st,
    pub child: *mut CBB,
    pub offset: usize,
    pub pending_len_len: u8,
    pub pending_is_asn1: ::std::os::raw::c_char,
    pub is_child: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cbb_st() {
    assert_eq!(
        ::std::mem::size_of::<cbb_st>(),
        32usize,
        concat!("Size of: ", stringify!(cbb_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cbb_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cbb_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).pending_len_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(pending_len_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).pending_is_asn1 as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(pending_is_asn1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbb_st>())).is_child as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cbb_st),
            "::",
            stringify!(is_child)
        )
    );
}
impl Default for cbb_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CBB_zero(cbb: *mut CBB);
}
extern "C" {
    pub fn CBB_init(cbb: *mut CBB, initial_capacity: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_init_fixed(cbb: *mut CBB, buf: *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_cleanup(cbb: *mut CBB);
}
extern "C" {
    pub fn CBB_finish(
        cbb: *mut CBB,
        out_data: *mut *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_flush(cbb: *mut CBB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_data(cbb: *const CBB) -> *const u8;
}
extern "C" {
    pub fn CBB_len(cbb: *const CBB) -> usize;
}
extern "C" {
    pub fn CBB_add_u8_length_prefixed(
        cbb: *mut CBB,
        out_contents: *mut CBB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u16_length_prefixed(
        cbb: *mut CBB,
        out_contents: *mut CBB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u24_length_prefixed(
        cbb: *mut CBB,
        out_contents: *mut CBB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_asn1(
        cbb: *mut CBB,
        out_contents: *mut CBB,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_bytes(cbb: *mut CBB, data: *const u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_space(
        cbb: *mut CBB,
        out_data: *mut *mut u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_reserve(cbb: *mut CBB, out_data: *mut *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_did_write(cbb: *mut CBB, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u8(cbb: *mut CBB, value: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u16(cbb: *mut CBB, value: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u16le(cbb: *mut CBB, value: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u24(cbb: *mut CBB, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u32(cbb: *mut CBB, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u32le(cbb: *mut CBB, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u64(cbb: *mut CBB, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_u64le(cbb: *mut CBB, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_discard_child(cbb: *mut CBB);
}
extern "C" {
    pub fn CBB_add_asn1_uint64(cbb: *mut CBB, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_asn1_int64(cbb: *mut CBB, value: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_asn1_octet_string(
        cbb: *mut CBB,
        data: *const u8,
        data_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_asn1_bool(cbb: *mut CBB, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_add_asn1_oid_from_text(
        cbb: *mut CBB,
        text: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CBB_flush_asn1_set_of(cbb: *mut CBB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_dup(obj: *const ASN1_OBJECT) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_cmp(a: *const ASN1_OBJECT, b: *const ASN1_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_get0_data(obj: *const ASN1_OBJECT) -> *const u8;
}
extern "C" {
    pub fn OBJ_length(obj: *const ASN1_OBJECT) -> usize;
}
extern "C" {
    pub fn OBJ_obj2nid(obj: *const ASN1_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_cbs2nid(cbs: *const CBS) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_sn2nid(short_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_ln2nid(long_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_txt2nid(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_nid2obj(nid: ::std::os::raw::c_int) -> *const ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_nid2sn(nid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OBJ_nid2ln(nid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OBJ_nid2cbb(out: *mut CBB, nid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_txt2obj(
        s: *const ::std::os::raw::c_char,
        dont_search_names: ::std::os::raw::c_int,
    ) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn OBJ_obj2txt(
        out: *mut ::std::os::raw::c_char,
        out_len: ::std::os::raw::c_int,
        obj: *const ASN1_OBJECT,
        always_return_oid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_create(
        oid: *const ::std::os::raw::c_char,
        short_name: *const ::std::os::raw::c_char,
        long_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_find_sigid_algs(
        sign_nid: ::std::os::raw::c_int,
        out_digest_nid: *mut ::std::os::raw::c_int,
        out_pkey_nid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OBJ_find_sigid_by_algs(
        out_sign_nid: *mut ::std::os::raw::c_int,
        digest_nid: ::std::os::raw::c_int,
        pkey_nid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct obj_name_st {
    pub type_: ::std::os::raw::c_int,
    pub alias: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_obj_name_st() {
    assert_eq!(
        ::std::mem::size_of::<obj_name_st>(),
        24usize,
        concat!("Size of: ", stringify!(obj_name_st))
    );
    assert_eq!(
        ::std::mem::align_of::<obj_name_st>(),
        8usize,
        concat!("Alignment of ", stringify!(obj_name_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_name_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_name_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_name_st>())).alias as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_name_st),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_name_st>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_name_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_name_st>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_name_st),
            "::",
            stringify!(data)
        )
    );
}
impl Default for obj_name_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type OBJ_NAME = obj_name_st;
extern "C" {
    pub fn OBJ_NAME_do_all_sorted(
        type_: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const OBJ_NAME, arg: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn OBJ_NAME_do_all(
        type_: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const OBJ_NAME, arg: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn OBJ_cleanup();
}
extern "C" {
    pub fn SHA1_Init(sha: *mut SHA_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA1_Update(
        sha: *mut SHA_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA1_Final(out: *mut u8, sha: *mut SHA_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA1(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn SHA1_Transform(sha: *mut SHA_CTX, block: *const u8);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sha_state_st {
    pub __bindgen_anon_1: sha_state_st__bindgen_ty_1,
    pub Nl: u32,
    pub Nh: u32,
    pub data: [u8; 64usize],
    pub num: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sha_state_st__bindgen_ty_1 {
    pub h: [u32; 5usize],
    pub __bindgen_anon_1: sha_state_st__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sha_state_st__bindgen_ty_1__bindgen_ty_1 {
    pub h0: u32,
    pub h1: u32,
    pub h2: u32,
    pub h3: u32,
    pub h4: u32,
}
#[test]
fn bindgen_test_layout_sha_state_st__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sha_state_st__bindgen_ty_1__bindgen_ty_1>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sha_state_st__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1__bindgen_ty_1>())).h0 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1__bindgen_ty_1>())).h1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1__bindgen_ty_1>())).h2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1__bindgen_ty_1>())).h3 as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1__bindgen_ty_1>())).h4 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h4)
        )
    );
}
#[test]
fn bindgen_test_layout_sha_state_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sha_state_st__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(sha_state_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sha_state_st__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sha_state_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha_state_st__bindgen_ty_1>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
}
impl Default for sha_state_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sha_state_st() {
    assert_eq!(
        ::std::mem::size_of::<sha_state_st>(),
        96usize,
        concat!("Size of: ", stringify!(sha_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<sha_state_st>(),
        4usize,
        concat!("Alignment of ", stringify!(sha_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha_state_st>())).Nl as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha_state_st>())).Nh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha_state_st>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha_state_st>())).num as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sha_state_st),
            "::",
            stringify!(num)
        )
    );
}
impl Default for sha_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn SHA224_Init(sha: *mut SHA256_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA224_Update(
        sha: *mut SHA256_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA224_Final(out: *mut u8, sha: *mut SHA256_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA224(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn SHA256_Init(sha: *mut SHA256_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA256_Update(
        sha: *mut SHA256_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA256_Final(out: *mut u8, sha: *mut SHA256_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA256(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn SHA256_Transform(sha: *mut SHA256_CTX, block: *const u8);
}
extern "C" {
    pub fn SHA256_TransformBlocks(state: *mut u32, data: *const u8, num_blocks: usize);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sha256_state_st {
    pub h: [u32; 8usize],
    pub Nl: u32,
    pub Nh: u32,
    pub data: [u8; 64usize],
    pub num: ::std::os::raw::c_uint,
    pub md_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sha256_state_st() {
    assert_eq!(
        ::std::mem::size_of::<sha256_state_st>(),
        112usize,
        concat!("Size of: ", stringify!(sha256_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<sha256_state_st>(),
        4usize,
        concat!("Alignment of ", stringify!(sha256_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).Nl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).Nh as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).num as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha256_state_st>())).md_len as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sha256_state_st),
            "::",
            stringify!(md_len)
        )
    );
}
impl Default for sha256_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn SHA384_Init(sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA384_Update(
        sha: *mut SHA512_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA384_Final(out: *mut u8, sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA384(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn SHA512_Init(sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512_Update(
        sha: *mut SHA512_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512_Final(out: *mut u8, sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn SHA512_Transform(sha: *mut SHA512_CTX, block: *const u8);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sha512_state_st {
    pub h: [u64; 8usize],
    pub Nl: u64,
    pub Nh: u64,
    pub p: [u8; 128usize],
    pub num: ::std::os::raw::c_uint,
    pub md_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sha512_state_st() {
    assert_eq!(
        ::std::mem::size_of::<sha512_state_st>(),
        216usize,
        concat!("Size of: ", stringify!(sha512_state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<sha512_state_st>(),
        8usize,
        concat!("Alignment of ", stringify!(sha512_state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).Nl as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).Nh as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).p as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).num as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sha512_state_st>())).md_len as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_state_st),
            "::",
            stringify!(md_len)
        )
    );
}
impl Default for sha512_state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn SHA512_256_Init(sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512_256_Update(
        sha: *mut SHA512_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512_256_Final(out: *mut u8, sha: *mut SHA512_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHA512_256(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
impl idtype_t {
    pub const P_ALL: idtype_t = idtype_t(0);
}
impl idtype_t {
    pub const P_PID: idtype_t = idtype_t(1);
}
impl idtype_t {
    pub const P_PGID: idtype_t = idtype_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct idtype_t(pub ::std::os::raw::c_uint);
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OPENSSL_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn OPENSSL_realloc(
        ptr: *mut ::std::os::raw::c_void,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OPENSSL_cleanse(ptr: *mut ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn CRYPTO_memcmp(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_hash32(ptr: *const ::std::os::raw::c_void, len: usize) -> u32;
}
extern "C" {
    pub fn OPENSSL_strdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OPENSSL_strnlen(s: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    pub fn OPENSSL_tolower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_strcasecmp(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_strncasecmp(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_snprintf(
        buf: *mut ::std::os::raw::c_char,
        n: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_vsnprintf(
        buf: *mut ::std::os::raw::c_char,
        n: usize,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_strndup(
        str_: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OPENSSL_memdup(
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OPENSSL_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn OPENSSL_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn OPENSSL_clear_free(ptr: *mut ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn CRYPTO_library_init();
}
extern "C" {
    pub fn CRYPTO_is_confidential_build() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CRYPTO_has_asm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FIPS_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BORINGSSL_self_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CRYPTO_pre_sandbox_init();
}
extern "C" {
    pub fn OpenSSL_version(which: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSLeay_version(which: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSLeay() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn OpenSSL_version_num() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CRYPTO_malloc_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_malloc_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ENGINE_load_builtin_engines();
}
extern "C" {
    pub fn ENGINE_register_all_complete() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_load_builtin_modules();
}
extern "C" {
    pub fn OPENSSL_init_crypto(
        opts: u64,
        settings: *const OPENSSL_INIT_SETTINGS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OPENSSL_cleanup();
}
extern "C" {
    pub fn FIPS_mode_set(on: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_rc4() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_xts() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_enc_null() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_rc2_40_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_get_cipherbynid(nid: ::std::os::raw::c_int) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_init(ctx: *mut EVP_CIPHER_CTX);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_new() -> *mut EVP_CIPHER_CTX;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_cleanup(ctx: *mut EVP_CIPHER_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_free(ctx: *mut EVP_CIPHER_CTX);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_copy(
        out: *mut EVP_CIPHER_CTX,
        in_: *const EVP_CIPHER_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_reset(ctx: *mut EVP_CIPHER_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CipherInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        engine: *mut ENGINE,
        key: *const u8,
        iv: *const u8,
        enc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncryptInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        impl_: *mut ENGINE,
        key: *const u8,
        iv: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecryptInit_ex(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        impl_: *mut ENGINE,
        key: *const u8,
        iv: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncryptUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
        in_: *const u8,
        in_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncryptFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecryptUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
        in_: *const u8,
        in_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecryptFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut ::std::os::raw::c_uchar,
        out_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_Cipher(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CipherUpdate(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
        in_: *const u8,
        in_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CipherFinal_ex(
        ctx: *mut EVP_CIPHER_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_cipher(ctx: *const EVP_CIPHER_CTX) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_nid(ctx: *const EVP_CIPHER_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_encrypting(ctx: *const EVP_CIPHER_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_block_size(ctx: *const EVP_CIPHER_CTX) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_key_length(ctx: *const EVP_CIPHER_CTX) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_iv_length(ctx: *const EVP_CIPHER_CTX) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_get_app_data(ctx: *const EVP_CIPHER_CTX) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_app_data(ctx: *mut EVP_CIPHER_CTX, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn EVP_CIPHER_CTX_flags(ctx: *const EVP_CIPHER_CTX) -> u32;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_mode(ctx: *const EVP_CIPHER_CTX) -> u32;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_ctrl(
        ctx: *mut EVP_CIPHER_CTX,
        command: ::std::os::raw::c_int,
        arg: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_padding(
        ctx: *mut EVP_CIPHER_CTX,
        pad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_key_length(
        ctx: *mut EVP_CIPHER_CTX,
        key_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_nid(cipher: *const EVP_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CIPHER_block_size(cipher: *const EVP_CIPHER) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_key_length(cipher: *const EVP_CIPHER) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_iv_length(cipher: *const EVP_CIPHER) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EVP_CIPHER_flags(cipher: *const EVP_CIPHER) -> u32;
}
extern "C" {
    pub fn EVP_CIPHER_mode(cipher: *const EVP_CIPHER) -> u32;
}
extern "C" {
    pub fn EVP_BytesToKey(
        type_: *const EVP_CIPHER,
        md: *const EVP_MD,
        salt: *const u8,
        data: *const u8,
        data_len: usize,
        count: ::std::os::raw::c_uint,
        key: *mut u8,
        iv: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_CipherInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const u8,
        iv: *const u8,
        enc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncryptInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const u8,
        iv: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecryptInit(
        ctx: *mut EVP_CIPHER_CTX,
        cipher: *const EVP_CIPHER,
        key: *const u8,
        iv: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_add_cipher_alias(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_get_cipherbyname(name: *const ::std::os::raw::c_char) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ctr() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_gcm() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_ofb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_des_ede3_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_128_cfb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_192_cfb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cfb128() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_aes_256_cfb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_bf_cfb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_ecb() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_cast5_cbc() -> *const EVP_CIPHER;
}
extern "C" {
    pub fn EVP_CIPHER_CTX_set_flags(ctx: *const EVP_CIPHER_CTX, flags: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct evp_cipher_ctx_st {
    pub cipher: *const EVP_CIPHER,
    pub app_data: *mut ::std::os::raw::c_void,
    pub cipher_data: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_uint,
    pub encrypt: ::std::os::raw::c_int,
    pub flags: u32,
    pub oiv: [u8; 16usize],
    pub iv: [u8; 16usize],
    pub buf: [u8; 32usize],
    pub buf_len: ::std::os::raw::c_int,
    pub num: ::std::os::raw::c_uint,
    pub final_used: ::std::os::raw::c_int,
    pub block_mask: ::std::os::raw::c_int,
    pub final_: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_evp_cipher_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_cipher_ctx_st>(),
        152usize,
        concat!("Size of: ", stringify!(evp_cipher_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_cipher_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_cipher_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).cipher as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).app_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).cipher_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(cipher_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).key_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).encrypt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(encrypt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).oiv as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(oiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).iv as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).buf as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).buf_len as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(buf_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).num as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).final_used as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(final_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).block_mask as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(block_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_ctx_st>())).final_ as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_ctx_st),
            "::",
            stringify!(final_)
        )
    );
}
impl Default for evp_cipher_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct evp_cipher_info_st {
    pub cipher: *const EVP_CIPHER,
    pub iv: [::std::os::raw::c_uchar; 16usize],
}
#[test]
fn bindgen_test_layout_evp_cipher_info_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_cipher_info_st>(),
        24usize,
        concat!("Size of: ", stringify!(evp_cipher_info_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_cipher_info_st>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_cipher_info_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_info_st>())).cipher as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_info_st),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_info_st>())).iv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_info_st),
            "::",
            stringify!(iv)
        )
    );
}
impl Default for evp_cipher_info_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EVP_CIPHER_INFO = evp_cipher_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct evp_cipher_st {
    pub nid: ::std::os::raw::c_int,
    pub block_size: ::std::os::raw::c_uint,
    pub key_len: ::std::os::raw::c_uint,
    pub iv_len: ::std::os::raw::c_uint,
    pub ctx_size: ::std::os::raw::c_uint,
    pub flags: u32,
    pub app_data: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_CIPHER_CTX,
            key: *const u8,
            iv: *const u8,
            enc: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub cipher: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut EVP_CIPHER_CTX,
            out: *mut u8,
            in_: *const u8,
            inl: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EVP_CIPHER_CTX)>,
    pub ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut EVP_CIPHER_CTX,
            type_: ::std::os::raw::c_int,
            arg: ::std::os::raw::c_int,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_evp_cipher_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_cipher_st>(),
        64usize,
        concat!("Size of: ", stringify!(evp_cipher_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_cipher_st>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_cipher_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).nid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(nid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).block_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).key_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).iv_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(iv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).ctx_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(ctx_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).app_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).init as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).cipher as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).cleanup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_cipher_st>())).ctrl as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_cipher_st),
            "::",
            stringify!(ctrl)
        )
    );
}
impl Default for evp_cipher_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn DH_new() -> *mut DH;
}
extern "C" {
    pub fn DH_free(dh: *mut DH);
}
extern "C" {
    pub fn DH_up_ref(dh: *mut DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_get0_pub_key(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_priv_key(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_p(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_q(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_g(dh: *const DH) -> *const BIGNUM;
}
extern "C" {
    pub fn DH_get0_key(
        dh: *const DH,
        out_pub_key: *mut *const BIGNUM,
        out_priv_key: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DH_set0_key(
        dh: *mut DH,
        pub_key: *mut BIGNUM,
        priv_key: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_get0_pqg(
        dh: *const DH,
        out_p: *mut *const BIGNUM,
        out_q: *mut *const BIGNUM,
        out_g: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DH_set0_pqg(
        dh: *mut DH,
        p: *mut BIGNUM,
        q: *mut BIGNUM,
        g: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_set_length(dh: *mut DH, priv_length: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BN_get_rfc3526_prime_1536(ret: *mut BIGNUM) -> *mut BIGNUM;
}
extern "C" {
    pub fn DH_get_rfc7919_2048() -> *mut DH;
}
extern "C" {
    pub fn DH_generate_parameters_ex(
        dh: *mut DH,
        prime_bits: ::std::os::raw::c_int,
        generator: ::std::os::raw::c_int,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_generate_key(dh: *mut DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_compute_key_padded(
        out: *mut u8,
        peers_key: *const BIGNUM,
        dh: *mut DH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_compute_key_hashed(
        dh: *mut DH,
        out: *mut u8,
        out_len: *mut usize,
        max_out_len: usize,
        peers_key: *const BIGNUM,
        digest: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_size(dh: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_num_bits(dh: *const DH) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DH_check(dh: *const DH, out_flags: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_check_pub_key(
        dh: *const DH,
        pub_key: *const BIGNUM,
        out_flags: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DHparams_dup(dh: *const DH) -> *mut DH;
}
extern "C" {
    pub fn DH_parse_parameters(cbs: *mut CBS) -> *mut DH;
}
extern "C" {
    pub fn DH_marshal_parameters(cbb: *mut CBB, dh: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_generate_parameters(
        prime_len: ::std::os::raw::c_int,
        generator: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        cb_arg: *mut ::std::os::raw::c_void,
    ) -> *mut DH;
}
extern "C" {
    pub fn d2i_DHparams(
        ret: *mut *mut DH,
        inp: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut DH;
}
extern "C" {
    pub fn i2d_DHparams(
        in_: *const DH,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DH_compute_key(
        out: *mut u8,
        peers_key: *const BIGNUM,
        dh: *mut DH,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dh_st {
    pub p: *mut BIGNUM,
    pub g: *mut BIGNUM,
    pub pub_key: *mut BIGNUM,
    pub priv_key: *mut BIGNUM,
    pub priv_length: ::std::os::raw::c_uint,
    pub method_mont_p_lock: CRYPTO_MUTEX,
    pub method_mont_p: *mut BN_MONT_CTX,
    pub q: *mut BIGNUM,
    pub j: *mut BIGNUM,
    pub seed: *mut ::std::os::raw::c_uchar,
    pub seedlen: ::std::os::raw::c_int,
    pub counter: *mut BIGNUM,
    pub flags: ::std::os::raw::c_int,
    pub references: CRYPTO_refcount_t,
}
#[test]
fn bindgen_test_layout_dh_st() {
    assert_eq!(
        ::std::mem::size_of::<dh_st>(),
        152usize,
        concat!("Size of: ", stringify!(dh_st))
    );
    assert_eq!(
        ::std::mem::align_of::<dh_st>(),
        8usize,
        concat!("Alignment of ", stringify!(dh_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).p as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dh_st), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).g as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dh_st), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).pub_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(pub_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).priv_key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(priv_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).priv_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(priv_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).method_mont_p_lock as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(method_mont_p_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).method_mont_p as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(method_mont_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).q as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(dh_st), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).j as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(dh_st), "::", stringify!(j))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).seed as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).seedlen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(seedlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).counter as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).flags as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dh_st>())).references as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(dh_st),
            "::",
            stringify!(references)
        )
    );
}
impl Default for dh_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn ENGINE_new() -> *mut ENGINE;
}
extern "C" {
    pub fn ENGINE_free(engine: *mut ENGINE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ENGINE_set_RSA_method(
        engine: *mut ENGINE,
        method: *const RSA_METHOD,
        method_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ENGINE_get_RSA_method(engine: *const ENGINE) -> *mut RSA_METHOD;
}
extern "C" {
    pub fn ENGINE_set_ECDSA_method(
        engine: *mut ENGINE,
        method: *const ECDSA_METHOD,
        method_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ENGINE_get_ECDSA_method(engine: *const ENGINE) -> *mut ECDSA_METHOD;
}
extern "C" {
    pub fn METHOD_ref(method: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn METHOD_unref(method: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct openssl_method_common_st {
    pub references: ::std::os::raw::c_int,
    pub is_static: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_openssl_method_common_st() {
    assert_eq!(
        ::std::mem::size_of::<openssl_method_common_st>(),
        8usize,
        concat!("Size of: ", stringify!(openssl_method_common_st))
    );
    assert_eq!(
        ::std::mem::align_of::<openssl_method_common_st>(),
        4usize,
        concat!("Alignment of ", stringify!(openssl_method_common_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openssl_method_common_st>())).references as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(openssl_method_common_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<openssl_method_common_st>())).is_static as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(openssl_method_common_st),
            "::",
            stringify!(is_static)
        )
    );
}
extern "C" {
    pub fn DSA_new() -> *mut DSA;
}
extern "C" {
    pub fn DSA_free(dsa: *mut DSA);
}
extern "C" {
    pub fn DSA_up_ref(dsa: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_get0_pub_key(dsa: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_priv_key(dsa: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_p(dsa: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_q(dsa: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_g(dsa: *const DSA) -> *const BIGNUM;
}
extern "C" {
    pub fn DSA_get0_key(
        dsa: *const DSA,
        out_pub_key: *mut *const BIGNUM,
        out_priv_key: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DSA_get0_pqg(
        dsa: *const DSA,
        out_p: *mut *const BIGNUM,
        out_q: *mut *const BIGNUM,
        out_g: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn DSA_set0_key(
        dsa: *mut DSA,
        pub_key: *mut BIGNUM,
        priv_key: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_set0_pqg(
        dsa: *mut DSA,
        p: *mut BIGNUM,
        q: *mut BIGNUM,
        g: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_generate_parameters_ex(
        dsa: *mut DSA,
        bits: ::std::os::raw::c_uint,
        seed: *const u8,
        seed_len: usize,
        out_counter: *mut ::std::os::raw::c_int,
        out_h: *mut ::std::os::raw::c_ulong,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSAparams_dup(dsa: *const DSA) -> *mut DSA;
}
extern "C" {
    pub fn DSA_generate_key(dsa: *mut DSA) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct DSA_SIG_st {
    pub r: *mut BIGNUM,
    pub s: *mut BIGNUM,
}
#[test]
fn bindgen_test_layout_DSA_SIG_st() {
    assert_eq!(
        ::std::mem::size_of::<DSA_SIG_st>(),
        16usize,
        concat!("Size of: ", stringify!(DSA_SIG_st))
    );
    assert_eq!(
        ::std::mem::align_of::<DSA_SIG_st>(),
        8usize,
        concat!("Alignment of ", stringify!(DSA_SIG_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DSA_SIG_st>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DSA_SIG_st),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DSA_SIG_st>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DSA_SIG_st),
            "::",
            stringify!(s)
        )
    );
}
impl Default for DSA_SIG_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn DSA_SIG_new() -> *mut DSA_SIG;
}
extern "C" {
    pub fn DSA_SIG_free(sig: *mut DSA_SIG);
}
extern "C" {
    pub fn DSA_do_sign(digest: *const u8, digest_len: usize, dsa: *const DSA) -> *mut DSA_SIG;
}
extern "C" {
    pub fn DSA_do_verify(
        digest: *const u8,
        digest_len: usize,
        sig: *mut DSA_SIG,
        dsa: *const DSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_do_check_signature(
        out_valid: *mut ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        sig: *mut DSA_SIG,
        dsa: *const DSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_sign(
        type_: ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        out_sig: *mut u8,
        out_siglen: *mut ::std::os::raw::c_uint,
        dsa: *const DSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_verify(
        type_: ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        sig: *const u8,
        sig_len: usize,
        dsa: *const DSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_check_signature(
        out_valid: *mut ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        sig: *const u8,
        sig_len: usize,
        dsa: *const DSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_size(dsa: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_SIG_parse(cbs: *mut CBS) -> *mut DSA_SIG;
}
extern "C" {
    pub fn DSA_SIG_marshal(cbb: *mut CBB, sig: *const DSA_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_parse_public_key(cbs: *mut CBS) -> *mut DSA;
}
extern "C" {
    pub fn DSA_marshal_public_key(cbb: *mut CBB, dsa: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_parse_private_key(cbs: *mut CBS) -> *mut DSA;
}
extern "C" {
    pub fn DSA_marshal_private_key(cbb: *mut CBB, dsa: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_parse_parameters(cbs: *mut CBS) -> *mut DSA;
}
extern "C" {
    pub fn DSA_marshal_parameters(cbb: *mut CBB, dsa: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_dup_DH(dsa: *const DSA) -> *mut DH;
}
extern "C" {
    pub fn DSA_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_set_ex_data(
        dsa: *mut DSA,
        idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_get_ex_data(
        dsa: *const DSA,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn d2i_DSA_SIG(
        out_sig: *mut *mut DSA_SIG,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut DSA_SIG;
}
extern "C" {
    pub fn i2d_DSA_SIG(in_: *const DSA_SIG, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSAPublicKey(
        out: *mut *mut DSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPublicKey(in_: *const DSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey(
        out: *mut *mut DSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey(in_: *const DSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSAparams(
        out: *mut *mut DSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAparams(in_: *const DSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DSA_generate_parameters(
        bits: ::std::os::raw::c_int,
        seed: *mut ::std::os::raw::c_uchar,
        seed_len: ::std::os::raw::c_int,
        counter_ret: *mut ::std::os::raw::c_int,
        h_ret: *mut ::std::os::raw::c_ulong,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        cb_arg: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dsa_st {
    pub version: ::std::os::raw::c_long,
    pub p: *mut BIGNUM,
    pub q: *mut BIGNUM,
    pub g: *mut BIGNUM,
    pub pub_key: *mut BIGNUM,
    pub priv_key: *mut BIGNUM,
    pub flags: ::std::os::raw::c_int,
    pub method_mont_lock: CRYPTO_MUTEX,
    pub method_mont_p: *mut BN_MONT_CTX,
    pub method_mont_q: *mut BN_MONT_CTX,
    pub references: CRYPTO_refcount_t,
    pub ex_data: CRYPTO_EX_DATA,
}
#[test]
fn bindgen_test_layout_dsa_st() {
    assert_eq!(
        ::std::mem::size_of::<dsa_st>(),
        144usize,
        concat!("Size of: ", stringify!(dsa_st))
    );
    assert_eq!(
        ::std::mem::align_of::<dsa_st>(),
        8usize,
        concat!("Alignment of ", stringify!(dsa_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).p as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dsa_st), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).q as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(dsa_st), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).g as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(dsa_st), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).pub_key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(pub_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).priv_key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(priv_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).method_mont_lock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(method_mont_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).method_mont_p as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(method_mont_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).method_mont_q as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(method_mont_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).references as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsa_st>())).ex_data as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(dsa_st),
            "::",
            stringify!(ex_data)
        )
    );
}
impl Default for dsa_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl point_conversion_form_t {
    pub const POINT_CONVERSION_COMPRESSED: point_conversion_form_t = point_conversion_form_t(2);
}
impl point_conversion_form_t {
    pub const POINT_CONVERSION_UNCOMPRESSED: point_conversion_form_t = point_conversion_form_t(4);
}
impl point_conversion_form_t {
    pub const POINT_CONVERSION_HYBRID: point_conversion_form_t = point_conversion_form_t(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct point_conversion_form_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn EC_GROUP_new_by_curve_name(nid: ::std::os::raw::c_int) -> *mut EC_GROUP;
}
extern "C" {
    pub fn EC_GROUP_free(group: *mut EC_GROUP);
}
extern "C" {
    pub fn EC_GROUP_dup(a: *const EC_GROUP) -> *mut EC_GROUP;
}
extern "C" {
    pub fn EC_GROUP_cmp(
        a: *const EC_GROUP,
        b: *const EC_GROUP,
        ignored: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get0_generator(group: *const EC_GROUP) -> *const EC_POINT;
}
extern "C" {
    pub fn EC_GROUP_get0_order(group: *const EC_GROUP) -> *const BIGNUM;
}
extern "C" {
    pub fn EC_GROUP_order_bits(group: *const EC_GROUP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_cofactor(
        group: *const EC_GROUP,
        cofactor: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_curve_GFp(
        group: *const EC_GROUP,
        out_p: *mut BIGNUM,
        out_a: *mut BIGNUM,
        out_b: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_curve_name(group: *const EC_GROUP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_degree(group: *const EC_GROUP) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EC_curve_nid2nist(nid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn EC_curve_nist2nid(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_new(group: *const EC_GROUP) -> *mut EC_POINT;
}
extern "C" {
    pub fn EC_POINT_free(point: *mut EC_POINT);
}
extern "C" {
    pub fn EC_POINT_copy(dest: *mut EC_POINT, src: *const EC_POINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_dup(src: *const EC_POINT, group: *const EC_GROUP) -> *mut EC_POINT;
}
extern "C" {
    pub fn EC_POINT_set_to_infinity(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_is_at_infinity(
        group: *const EC_GROUP,
        point: *const EC_POINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_is_on_curve(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_cmp(
        group: *const EC_GROUP,
        a: *const EC_POINT,
        b: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_get_affine_coordinates_GFp(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_get_affine_coordinates(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        x: *mut BIGNUM,
        y: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_set_affine_coordinates_GFp(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_set_affine_coordinates(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
        x: *const BIGNUM,
        y: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_point2oct(
        group: *const EC_GROUP,
        point: *const EC_POINT,
        form: point_conversion_form_t,
        buf: *mut u8,
        len: usize,
        ctx: *mut BN_CTX,
    ) -> usize;
}
extern "C" {
    pub fn EC_POINT_point2cbb(
        out: *mut CBB,
        group: *const EC_GROUP,
        point: *const EC_POINT,
        form: point_conversion_form_t,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_oct2point(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
        buf: *const u8,
        len: usize,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_set_compressed_coordinates_GFp(
        group: *const EC_GROUP,
        point: *mut EC_POINT,
        x: *const BIGNUM,
        y_bit: ::std::os::raw::c_int,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_add(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        a: *const EC_POINT,
        b: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_dbl(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        a: *const EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_invert(
        group: *const EC_GROUP,
        a: *mut EC_POINT,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_POINT_mul(
        group: *const EC_GROUP,
        r: *mut EC_POINT,
        n: *const BIGNUM,
        q: *const EC_POINT,
        m: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_new_curve_GFp(
        p: *const BIGNUM,
        a: *const BIGNUM,
        b: *const BIGNUM,
        ctx: *mut BN_CTX,
    ) -> *mut EC_GROUP;
}
extern "C" {
    pub fn EC_GROUP_set_generator(
        group: *mut EC_GROUP,
        generator: *const EC_POINT,
        order: *const BIGNUM,
        cofactor: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_get_order(
        group: *const EC_GROUP,
        order: *mut BIGNUM,
        ctx: *mut BN_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_set_asn1_flag(group: *mut EC_GROUP, flag: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_method_st {
    _unused: [u8; 0],
}
pub type EC_METHOD = ec_method_st;
extern "C" {
    pub fn EC_GROUP_method_of(group: *const EC_GROUP) -> *const EC_METHOD;
}
extern "C" {
    pub fn EC_METHOD_get_field_type(meth: *const EC_METHOD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_GROUP_set_point_conversion_form(group: *mut EC_GROUP, form: point_conversion_form_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct EC_builtin_curve {
    pub nid: ::std::os::raw::c_int,
    pub comment: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_EC_builtin_curve() {
    assert_eq!(
        ::std::mem::size_of::<EC_builtin_curve>(),
        16usize,
        concat!("Size of: ", stringify!(EC_builtin_curve))
    );
    assert_eq!(
        ::std::mem::align_of::<EC_builtin_curve>(),
        8usize,
        concat!("Alignment of ", stringify!(EC_builtin_curve))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EC_builtin_curve>())).nid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EC_builtin_curve),
            "::",
            stringify!(nid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EC_builtin_curve>())).comment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EC_builtin_curve),
            "::",
            stringify!(comment)
        )
    );
}
impl Default for EC_builtin_curve {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn EC_get_builtin_curves(out_curves: *mut EC_builtin_curve, max_num_curves: usize)
        -> usize;
}
extern "C" {
    pub fn EC_POINT_clear_free(point: *mut EC_POINT);
}
extern "C" {
    pub fn EC_KEY_new() -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_new_method(engine: *const ENGINE) -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_new_by_curve_name(nid: ::std::os::raw::c_int) -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_free(key: *mut EC_KEY);
}
extern "C" {
    pub fn EC_KEY_dup(src: *const EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_up_ref(key: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_is_opaque(key: *const EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_get0_group(key: *const EC_KEY) -> *const EC_GROUP;
}
extern "C" {
    pub fn EC_KEY_set_group(key: *mut EC_KEY, group: *const EC_GROUP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_get0_private_key(key: *const EC_KEY) -> *const BIGNUM;
}
extern "C" {
    pub fn EC_KEY_set_private_key(key: *mut EC_KEY, priv_: *const BIGNUM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_get0_public_key(key: *const EC_KEY) -> *const EC_POINT;
}
extern "C" {
    pub fn EC_KEY_set_public_key(key: *mut EC_KEY, pub_: *const EC_POINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_get_enc_flags(key: *const EC_KEY) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn EC_KEY_set_enc_flags(key: *mut EC_KEY, flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn EC_KEY_get_conv_form(key: *const EC_KEY) -> point_conversion_form_t;
}
extern "C" {
    pub fn EC_KEY_set_conv_form(key: *mut EC_KEY, cform: point_conversion_form_t);
}
extern "C" {
    pub fn EC_KEY_check_key(key: *const EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_check_fips(key: *const EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_set_public_key_affine_coordinates(
        key: *mut EC_KEY,
        x: *const BIGNUM,
        y: *const BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_key2buf(
        key: *const EC_KEY,
        form: point_conversion_form_t,
        out_buf: *mut *mut ::std::os::raw::c_uchar,
        ctx: *mut BN_CTX,
    ) -> usize;
}
extern "C" {
    pub fn EC_KEY_generate_key(key: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_generate_key_fips(key: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_derive_from_secret(
        group: *const EC_GROUP,
        secret: *const u8,
        secret_len: usize,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_parse_private_key(cbs: *mut CBS, group: *const EC_GROUP) -> *mut EC_KEY;
}
extern "C" {
    pub fn EC_KEY_marshal_private_key(
        cbb: *mut CBB,
        key: *const EC_KEY,
        enc_flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_parse_curve_name(cbs: *mut CBS) -> *mut EC_GROUP;
}
extern "C" {
    pub fn EC_KEY_marshal_curve_name(
        cbb: *mut CBB,
        group: *const EC_GROUP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_parse_parameters(cbs: *mut CBS) -> *mut EC_GROUP;
}
extern "C" {
    pub fn EC_KEY_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_set_ex_data(
        r: *mut EC_KEY,
        idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EC_KEY_get_ex_data(
        r: *const EC_KEY,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ecdsa_method_st {
    pub common: openssl_method_common_st,
    pub app_data: *mut ::std::os::raw::c_void,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY) -> ::std::os::raw::c_int>,
    pub finish:
        ::std::option::Option<unsafe extern "C" fn(key: *mut EC_KEY) -> ::std::os::raw::c_int>,
    pub group_order_size: ::std::option::Option<unsafe extern "C" fn(key: *const EC_KEY) -> usize>,
    pub sign: ::std::option::Option<
        unsafe extern "C" fn(
            digest: *const u8,
            digest_len: usize,
            sig: *mut u8,
            sig_len: *mut ::std::os::raw::c_uint,
            eckey: *mut EC_KEY,
        ) -> ::std::os::raw::c_int,
    >,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ecdsa_method_st() {
    assert_eq!(
        ::std::mem::size_of::<ecdsa_method_st>(),
        56usize,
        concat!("Size of: ", stringify!(ecdsa_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ecdsa_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ecdsa_method_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).app_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).finish as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_method_st>())).group_order_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(group_order_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).sign as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_method_st>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_method_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for ecdsa_method_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn EC_KEY_set_asn1_flag(key: *mut EC_KEY, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn d2i_ECPrivateKey(
        out_key: *mut *mut EC_KEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECPrivateKey(key: *const EC_KEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_ECParameters(
        out_key: *mut *mut EC_KEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECParameters(key: *const EC_KEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn o2i_ECPublicKey(
        out_key: *mut *mut EC_KEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2o_ECPublicKey(
        key: *const EC_KEY,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDH_compute_key(
        out: *mut ::std::os::raw::c_void,
        outlen: usize,
        pub_key: *const EC_POINT,
        priv_key: *const EC_KEY,
        kdf: ::std::option::Option<
            unsafe extern "C" fn(
                in_: *const ::std::os::raw::c_void,
                inlen: usize,
                out: *mut ::std::os::raw::c_void,
                outlen: *mut usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDH_compute_key_fips(
        out: *mut u8,
        out_len: usize,
        pub_key: *const EC_POINT,
        priv_key: *const EC_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_sign(
        type_: ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        sig: *mut u8,
        sig_len: *mut ::std::os::raw::c_uint,
        key: *const EC_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_verify(
        type_: ::std::os::raw::c_int,
        digest: *const u8,
        digest_len: usize,
        sig: *const u8,
        sig_len: usize,
        key: *const EC_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_size(key: *const EC_KEY) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ecdsa_sig_st {
    pub r: *mut BIGNUM,
    pub s: *mut BIGNUM,
}
#[test]
fn bindgen_test_layout_ecdsa_sig_st() {
    assert_eq!(
        ::std::mem::size_of::<ecdsa_sig_st>(),
        16usize,
        concat!("Size of: ", stringify!(ecdsa_sig_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ecdsa_sig_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ecdsa_sig_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_sig_st>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_sig_st),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ecdsa_sig_st>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_sig_st),
            "::",
            stringify!(s)
        )
    );
}
impl Default for ecdsa_sig_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn ECDSA_SIG_new() -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn ECDSA_SIG_free(sig: *mut ECDSA_SIG);
}
extern "C" {
    pub fn ECDSA_SIG_get0_r(sig: *const ECDSA_SIG) -> *const BIGNUM;
}
extern "C" {
    pub fn ECDSA_SIG_get0_s(sig: *const ECDSA_SIG) -> *const BIGNUM;
}
extern "C" {
    pub fn ECDSA_SIG_get0(
        sig: *const ECDSA_SIG,
        out_r: *mut *const BIGNUM,
        out_s: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn ECDSA_SIG_set0(
        sig: *mut ECDSA_SIG,
        r: *mut BIGNUM,
        s: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_do_sign(
        digest: *const u8,
        digest_len: usize,
        key: *const EC_KEY,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn ECDSA_do_verify(
        digest: *const u8,
        digest_len: usize,
        sig: *const ECDSA_SIG,
        key: *const EC_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_SIG_parse(cbs: *mut CBS) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn ECDSA_SIG_from_bytes(in_: *const u8, in_len: usize) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn ECDSA_SIG_marshal(cbb: *mut CBB, sig: *const ECDSA_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_SIG_to_bytes(
        out_bytes: *mut *mut u8,
        out_len: *mut usize,
        sig: *const ECDSA_SIG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECDSA_SIG_max_len(order_len: usize) -> usize;
}
extern "C" {
    pub fn d2i_ECDSA_SIG(
        out: *mut *mut ECDSA_SIG,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut ECDSA_SIG;
}
extern "C" {
    pub fn i2d_ECDSA_SIG(sig: *const ECDSA_SIG, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_aead_aes_128_gcm() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_192_gcm() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_gcm() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_chacha20_poly1305() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_xchacha20_poly1305() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_ctr_hmac_sha256() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_ctr_hmac_sha256() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_gcm_siv() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_gcm_siv() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_gcm_randnonce() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_gcm_randnonce() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_ccm_bluetooth() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_ccm_bluetooth_8() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_has_aes_hardware() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_key_length(aead: *const EVP_AEAD) -> usize;
}
extern "C" {
    pub fn EVP_AEAD_nonce_length(aead: *const EVP_AEAD) -> usize;
}
extern "C" {
    pub fn EVP_AEAD_max_overhead(aead: *const EVP_AEAD) -> usize;
}
extern "C" {
    pub fn EVP_AEAD_max_tag_len(aead: *const EVP_AEAD) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evp_aead_ctx_st_state {
    pub opaque: [u8; 580usize],
    pub alignment: u64,
    _bindgen_union_align: [u64; 73usize],
}
#[test]
fn bindgen_test_layout_evp_aead_ctx_st_state() {
    assert_eq!(
        ::std::mem::size_of::<evp_aead_ctx_st_state>(),
        584usize,
        concat!("Size of: ", stringify!(evp_aead_ctx_st_state))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_aead_ctx_st_state>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_aead_ctx_st_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_aead_ctx_st_state>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_aead_ctx_st_state),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_aead_ctx_st_state>())).alignment as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_aead_ctx_st_state),
            "::",
            stringify!(alignment)
        )
    );
}
impl Default for evp_aead_ctx_st_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evp_aead_ctx_st {
    pub aead: *const EVP_AEAD,
    pub state: evp_aead_ctx_st_state,
    pub tag_len: u8,
}
#[test]
fn bindgen_test_layout_evp_aead_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_aead_ctx_st>(),
        600usize,
        concat!("Size of: ", stringify!(evp_aead_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_aead_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_aead_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_aead_ctx_st>())).aead as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_aead_ctx_st),
            "::",
            stringify!(aead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_aead_ctx_st>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_aead_ctx_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_aead_ctx_st>())).tag_len as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_aead_ctx_st),
            "::",
            stringify!(tag_len)
        )
    );
}
impl Default for evp_aead_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EVP_AEAD_CTX = evp_aead_ctx_st;
extern "C" {
    pub fn EVP_AEAD_CTX_zero(ctx: *mut EVP_AEAD_CTX);
}
extern "C" {
    pub fn EVP_AEAD_CTX_new(
        aead: *const EVP_AEAD,
        key: *const u8,
        key_len: usize,
        tag_len: usize,
    ) -> *mut EVP_AEAD_CTX;
}
extern "C" {
    pub fn EVP_AEAD_CTX_free(ctx: *mut EVP_AEAD_CTX);
}
extern "C" {
    pub fn EVP_AEAD_CTX_init(
        ctx: *mut EVP_AEAD_CTX,
        aead: *const EVP_AEAD,
        key: *const u8,
        key_len: usize,
        tag_len: usize,
        impl_: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_cleanup(ctx: *mut EVP_AEAD_CTX);
}
extern "C" {
    pub fn EVP_AEAD_CTX_seal(
        ctx: *const EVP_AEAD_CTX,
        out: *mut u8,
        out_len: *mut usize,
        max_out_len: usize,
        nonce: *const u8,
        nonce_len: usize,
        in_: *const u8,
        in_len: usize,
        ad: *const u8,
        ad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_open(
        ctx: *const EVP_AEAD_CTX,
        out: *mut u8,
        out_len: *mut usize,
        max_out_len: usize,
        nonce: *const u8,
        nonce_len: usize,
        in_: *const u8,
        in_len: usize,
        ad: *const u8,
        ad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_seal_scatter(
        ctx: *const EVP_AEAD_CTX,
        out: *mut u8,
        out_tag: *mut u8,
        out_tag_len: *mut usize,
        max_out_tag_len: usize,
        nonce: *const u8,
        nonce_len: usize,
        in_: *const u8,
        in_len: usize,
        extra_in: *const u8,
        extra_in_len: usize,
        ad: *const u8,
        ad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_open_gather(
        ctx: *const EVP_AEAD_CTX,
        out: *mut u8,
        nonce: *const u8,
        nonce_len: usize,
        in_: *const u8,
        in_len: usize,
        in_tag: *const u8,
        in_tag_len: usize,
        ad: *const u8,
        ad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_aead(ctx: *const EVP_AEAD_CTX) -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_cbc_sha1_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_cbc_sha1_tls_implicit_iv() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_cbc_sha256_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_cbc_sha1_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_cbc_sha1_tls_implicit_iv() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_cbc_sha256_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_cbc_sha384_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_des_ede3_cbc_sha1_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_null_sha1_tls() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_gcm_tls12() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_gcm_tls12() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_128_gcm_tls13() -> *const EVP_AEAD;
}
extern "C" {
    pub fn EVP_aead_aes_256_gcm_tls13() -> *const EVP_AEAD;
}
impl evp_aead_direction_t {
    pub const evp_aead_open: evp_aead_direction_t = evp_aead_direction_t(0);
}
impl evp_aead_direction_t {
    pub const evp_aead_seal: evp_aead_direction_t = evp_aead_direction_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct evp_aead_direction_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn EVP_AEAD_CTX_init_with_direction(
        ctx: *mut EVP_AEAD_CTX,
        aead: *const EVP_AEAD,
        key: *const u8,
        key_len: usize,
        tag_len: usize,
        dir: evp_aead_direction_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_get_iv(
        ctx: *const EVP_AEAD_CTX,
        out_iv: *mut *const u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_AEAD_CTX_tag_len(
        ctx: *const EVP_AEAD_CTX,
        out_tag_len: *mut usize,
        in_len: usize,
        extra_in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncodeBlock(dst: *mut u8, src: *const u8, src_len: usize) -> usize;
}
extern "C" {
    pub fn EVP_EncodedLength(out_len: *mut usize, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecodedLength(out_len: *mut usize, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecodeBase64(
        out: *mut u8,
        out_len: *mut usize,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_EncodeInit(ctx: *mut EVP_ENCODE_CTX);
}
extern "C" {
    pub fn EVP_EncodeUpdate(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
        in_: *const u8,
        in_len: usize,
    );
}
extern "C" {
    pub fn EVP_EncodeFinal(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn EVP_DecodeInit(ctx: *mut EVP_ENCODE_CTX);
}
extern "C" {
    pub fn EVP_DecodeUpdate(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecodeFinal(
        ctx: *mut EVP_ENCODE_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DecodeBlock(dst: *mut u8, src: *const u8, src_len: usize) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evp_encode_ctx_st {
    pub data_used: ::std::os::raw::c_uint,
    pub data: [u8; 48usize],
    pub eof_seen: ::std::os::raw::c_char,
    pub error_encountered: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_evp_encode_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_encode_ctx_st>(),
        56usize,
        concat!("Size of: ", stringify!(evp_encode_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_encode_ctx_st>(),
        4usize,
        concat!("Alignment of ", stringify!(evp_encode_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_encode_ctx_st>())).data_used as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_encode_ctx_st),
            "::",
            stringify!(data_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_encode_ctx_st>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_encode_ctx_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_encode_ctx_st>())).eof_seen as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_encode_ctx_st),
            "::",
            stringify!(eof_seen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evp_encode_ctx_st>())).error_encountered as *const _ as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_encode_ctx_st),
            "::",
            stringify!(error_encountered)
        )
    );
}
impl Default for evp_encode_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn EVP_md4() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_md5() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha1() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha224() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha384() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha512() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_sha512_256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_blake2b256() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_md5_sha1() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_get_digestbynid(nid: ::std::os::raw::c_int) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_get_digestbyobj(obj: *const ASN1_OBJECT) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_init(ctx: *mut EVP_MD_CTX);
}
extern "C" {
    pub fn EVP_MD_CTX_new() -> *mut EVP_MD_CTX;
}
extern "C" {
    pub fn EVP_MD_CTX_cleanup(ctx: *mut EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_free(ctx: *mut EVP_MD_CTX);
}
extern "C" {
    pub fn EVP_MD_CTX_copy_ex(
        out: *mut EVP_MD_CTX,
        in_: *const EVP_MD_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_reset(ctx: *mut EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestInit_ex(
        ctx: *mut EVP_MD_CTX,
        type_: *const EVP_MD,
        engine: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestInit(ctx: *mut EVP_MD_CTX, type_: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestFinal_ex(
        ctx: *mut EVP_MD_CTX,
        md_out: *mut u8,
        out_size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestFinal(
        ctx: *mut EVP_MD_CTX,
        md_out: *mut u8,
        out_size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_Digest(
        data: *const ::std::os::raw::c_void,
        len: usize,
        md_out: *mut u8,
        md_out_size: *mut ::std::os::raw::c_uint,
        type_: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_type(md: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_flags(md: *const EVP_MD) -> u32;
}
extern "C" {
    pub fn EVP_MD_size(md: *const EVP_MD) -> usize;
}
extern "C" {
    pub fn EVP_MD_block_size(md: *const EVP_MD) -> usize;
}
extern "C" {
    pub fn EVP_MD_CTX_md(ctx: *const EVP_MD_CTX) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_size(ctx: *const EVP_MD_CTX) -> usize;
}
extern "C" {
    pub fn EVP_MD_CTX_block_size(ctx: *const EVP_MD_CTX) -> usize;
}
extern "C" {
    pub fn EVP_MD_CTX_type(ctx: *const EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_parse_digest_algorithm(cbs: *mut CBS) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_marshal_digest_algorithm(cbb: *mut CBB, md: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_CTX_copy(out: *mut EVP_MD_CTX, in_: *const EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_add_digest(digest: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_get_digestbyname(arg1: *const ::std::os::raw::c_char) -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_dss1() -> *const EVP_MD;
}
extern "C" {
    pub fn EVP_MD_CTX_create() -> *mut EVP_MD_CTX;
}
extern "C" {
    pub fn EVP_MD_CTX_destroy(ctx: *mut EVP_MD_CTX);
}
extern "C" {
    pub fn EVP_DigestFinalXOF(
        ctx: *mut EVP_MD_CTX,
        out: *mut u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_MD_meth_get_flags(md: *const EVP_MD) -> u32;
}
extern "C" {
    pub fn EVP_MD_CTX_set_flags(ctx: *mut EVP_MD_CTX, flags: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_md_pctx_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct env_md_ctx_st {
    pub digest: *const EVP_MD,
    pub md_data: *mut ::std::os::raw::c_void,
    pub pctx: *mut EVP_PKEY_CTX,
    pub pctx_ops: *const evp_md_pctx_ops,
}
#[test]
fn bindgen_test_layout_env_md_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<env_md_ctx_st>(),
        32usize,
        concat!("Size of: ", stringify!(env_md_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<env_md_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(env_md_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<env_md_ctx_st>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(env_md_ctx_st),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<env_md_ctx_st>())).md_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(env_md_ctx_st),
            "::",
            stringify!(md_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<env_md_ctx_st>())).pctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(env_md_ctx_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<env_md_ctx_st>())).pctx_ops as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(env_md_ctx_st),
            "::",
            stringify!(pctx_ops)
        )
    );
}
impl Default for env_md_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn EVP_PKEY_new() -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_free(pkey: *mut EVP_PKEY);
}
extern "C" {
    pub fn EVP_PKEY_up_ref(pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_is_opaque(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_cmp(a: *const EVP_PKEY, b: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_copy_parameters(
        to: *mut EVP_PKEY,
        from: *const EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_missing_parameters(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_size(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_bits(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_id(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_type(nid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set1_RSA(pkey: *mut EVP_PKEY, key: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_assign_RSA(pkey: *mut EVP_PKEY, key: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_RSA(pkey: *const EVP_PKEY) -> *mut RSA;
}
extern "C" {
    pub fn EVP_PKEY_get1_RSA(pkey: *const EVP_PKEY) -> *mut RSA;
}
extern "C" {
    pub fn EVP_PKEY_set1_DSA(pkey: *mut EVP_PKEY, key: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_assign_DSA(pkey: *mut EVP_PKEY, key: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_DSA(pkey: *const EVP_PKEY) -> *mut DSA;
}
extern "C" {
    pub fn EVP_PKEY_get1_DSA(pkey: *const EVP_PKEY) -> *mut DSA;
}
extern "C" {
    pub fn EVP_PKEY_set1_EC_KEY(pkey: *mut EVP_PKEY, key: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_assign_EC_KEY(pkey: *mut EVP_PKEY, key: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get0_EC_KEY(pkey: *const EVP_PKEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn EVP_PKEY_get1_EC_KEY(pkey: *const EVP_PKEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn EVP_PKEY_assign(
        pkey: *mut EVP_PKEY,
        type_: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set_type(
        pkey: *mut EVP_PKEY,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_cmp_parameters(a: *const EVP_PKEY, b: *const EVP_PKEY)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_parse_public_key(cbs: *mut CBS) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_marshal_public_key(cbb: *mut CBB, key: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_parse_private_key(cbs: *mut CBS) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_marshal_private_key(cbb: *mut CBB, key: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_private_key(
        type_: ::std::os::raw::c_int,
        unused: *mut ENGINE,
        in_: *const u8,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_new_raw_public_key(
        type_: ::std::os::raw::c_int,
        unused: *mut ENGINE,
        in_: *const u8,
        len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_get_raw_private_key(
        pkey: *const EVP_PKEY,
        out: *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get_raw_public_key(
        pkey: *const EVP_PKEY,
        out: *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestSignInit(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        type_: *const EVP_MD,
        e: *mut ENGINE,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestSignUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestSignFinal(
        ctx: *mut EVP_MD_CTX,
        out_sig: *mut u8,
        out_sig_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestSign(
        ctx: *mut EVP_MD_CTX,
        out_sig: *mut u8,
        out_sig_len: *mut usize,
        data: *const u8,
        data_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyInit(
        ctx: *mut EVP_MD_CTX,
        pctx: *mut *mut EVP_PKEY_CTX,
        type_: *const EVP_MD,
        e: *mut ENGINE,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestVerifyFinal(
        ctx: *mut EVP_MD_CTX,
        sig: *const u8,
        sig_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_DigestVerify(
        ctx: *mut EVP_MD_CTX,
        sig: *const u8,
        sig_len: usize,
        data: *const u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_SignInit_ex(
        ctx: *mut EVP_MD_CTX,
        type_: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_SignInit(ctx: *mut EVP_MD_CTX, type_: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_SignUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_SignFinal(
        ctx: *const EVP_MD_CTX,
        sig: *mut u8,
        out_sig_len: *mut ::std::os::raw::c_uint,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_VerifyInit_ex(
        ctx: *mut EVP_MD_CTX,
        type_: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_VerifyInit(ctx: *mut EVP_MD_CTX, type_: *const EVP_MD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_VerifyUpdate(
        ctx: *mut EVP_MD_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_VerifyFinal(
        ctx: *mut EVP_MD_CTX,
        sig: *const u8,
        sig_len: usize,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_public(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::std::os::raw::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_private(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::std::os::raw::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_print_params(
        out: *mut BIO,
        pkey: *const EVP_PKEY,
        indent: ::std::os::raw::c_int,
        pctx: *mut ASN1_PCTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS5_PBKDF2_HMAC(
        password: *const ::std::os::raw::c_char,
        password_len: usize,
        salt: *const u8,
        salt_len: usize,
        iterations: ::std::os::raw::c_uint,
        digest: *const EVP_MD,
        key_len: usize,
        out_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS5_PBKDF2_HMAC_SHA1(
        password: *const ::std::os::raw::c_char,
        password_len: usize,
        salt: *const u8,
        salt_len: usize,
        iterations: ::std::os::raw::c_uint,
        key_len: usize,
        out_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PBE_scrypt(
        password: *const ::std::os::raw::c_char,
        password_len: usize,
        salt: *const u8,
        salt_len: usize,
        N: u64,
        r: u64,
        p: u64,
        max_mem: usize,
        out_key: *mut u8,
        key_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new(pkey: *mut EVP_PKEY, e: *mut ENGINE) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_new_id(id: ::std::os::raw::c_int, e: *mut ENGINE) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_free(ctx: *mut EVP_PKEY_CTX);
}
extern "C" {
    pub fn EVP_PKEY_CTX_dup(ctx: *mut EVP_PKEY_CTX) -> *mut EVP_PKEY_CTX;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_pkey(ctx: *mut EVP_PKEY_CTX) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_sign_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_sign(
        ctx: *mut EVP_PKEY_CTX,
        sig: *mut u8,
        sig_len: *mut usize,
        digest: *const u8,
        digest_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify(
        ctx: *mut EVP_PKEY_CTX,
        sig: *const u8,
        sig_len: usize,
        digest: *const u8,
        digest_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_encrypt(
        ctx: *mut EVP_PKEY_CTX,
        out: *mut u8,
        out_len: *mut usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_decrypt(
        ctx: *mut EVP_PKEY_CTX,
        out: *mut u8,
        out_len: *mut usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_recover_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_verify_recover(
        ctx: *mut EVP_PKEY_CTX,
        out: *mut u8,
        out_len: *mut usize,
        sig: *const u8,
        siglen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive_set_peer(
        ctx: *mut EVP_PKEY_CTX,
        peer: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_derive(
        ctx: *mut EVP_PKEY_CTX,
        key: *mut u8,
        out_key_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_keygen_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_keygen(
        ctx: *mut EVP_PKEY_CTX,
        out_pkey: *mut *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_paramgen_init(ctx: *mut EVP_PKEY_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_paramgen(
        ctx: *mut EVP_PKEY_CTX,
        out_pkey: *mut *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_signature_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_signature_md(
        ctx: *mut EVP_PKEY_CTX,
        out_md: *mut *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_padding(
        ctx: *mut EVP_PKEY_CTX,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_padding(
        ctx: *mut EVP_PKEY_CTX,
        out_padding: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        salt_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_pss_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        out_salt_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_keygen_bits(
        ctx: *mut EVP_PKEY_CTX,
        bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_keygen_pubexp(
        ctx: *mut EVP_PKEY_CTX,
        e: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_oaep_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_oaep_md(
        ctx: *mut EVP_PKEY_CTX,
        out_md: *mut *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_mgf1_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get_rsa_mgf1_md(
        ctx: *mut EVP_PKEY_CTX,
        out_md: *mut *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set0_rsa_oaep_label(
        ctx: *mut EVP_PKEY_CTX,
        label: *mut u8,
        label_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_get0_rsa_oaep_label(
        ctx: *mut EVP_PKEY_CTX,
        out_label: *mut *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ec_paramgen_curve_nid(
        ctx: *mut EVP_PKEY_CTX,
        nid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenSSL_add_all_algorithms();
}
extern "C" {
    pub fn OPENSSL_add_all_algorithms_conf();
}
extern "C" {
    pub fn OpenSSL_add_all_ciphers();
}
extern "C" {
    pub fn OpenSSL_add_all_digests();
}
extern "C" {
    pub fn EVP_cleanup();
}
extern "C" {
    pub fn EVP_CIPHER_do_all_sorted(
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                cipher: *const EVP_CIPHER,
                name: *const ::std::os::raw::c_char,
                unused: *const ::std::os::raw::c_char,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn EVP_MD_do_all_sorted(
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                cipher: *const EVP_MD,
                name: *const ::std::os::raw::c_char,
                unused: *const ::std::os::raw::c_char,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn i2d_PrivateKey(key: *const EVP_PKEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PublicKey(key: *const EVP_PKEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey(
        type_: ::std::os::raw::c_int,
        out: *mut *mut EVP_PKEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_AutoPrivateKey(
        out: *mut *mut EVP_PKEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_PublicKey(
        type_: ::std::os::raw::c_int,
        out: *mut *mut EVP_PKEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY_get0_DH(pkey: *const EVP_PKEY) -> *mut DH;
}
extern "C" {
    pub fn EVP_PKEY_get1_DH(pkey: *const EVP_PKEY) -> *mut DH;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_ec_param_enc(
        ctx: *mut EVP_PKEY_CTX,
        encoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_set1_tls_encodedpoint(
        pkey: *mut EVP_PKEY,
        in_: *const u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_get1_tls_encodedpoint(pkey: *const EVP_PKEY, out_ptr: *mut *mut u8) -> usize;
}
extern "C" {
    pub fn EVP_PKEY_base_id(pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(
        ctx: *mut EVP_PKEY_CTX,
        salt_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(
        ctx: *mut EVP_PKEY_CTX,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PUBKEY(pkey: *const EVP_PKEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY(
        out: *mut *mut EVP_PKEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY(rsa: *const RSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY(
        out: *mut *mut RSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY(dsa: *const DSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY(
        out: *mut *mut DSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut DSA;
}
extern "C" {
    pub fn i2d_EC_PUBKEY(ec_key: *const EC_KEY, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY(
        out: *mut *mut EC_KEY,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut EC_KEY;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evp_pkey_st {
    pub references: CRYPTO_refcount_t,
    pub type_: ::std::os::raw::c_int,
    pub pkey: evp_pkey_st__bindgen_ty_1,
    pub ameth: *const EVP_PKEY_ASN1_METHOD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evp_pkey_st__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_void,
    pub rsa: *mut RSA,
    pub dsa: *mut DSA,
    pub dh: *mut DH,
    pub ec: *mut EC_KEY,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_evp_pkey_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evp_pkey_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(evp_pkey_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_pkey_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_pkey_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st__bindgen_ty_1>())).rsa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st__bindgen_ty_1),
            "::",
            stringify!(rsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st__bindgen_ty_1>())).dsa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st__bindgen_ty_1),
            "::",
            stringify!(dsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st__bindgen_ty_1>())).dh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st__bindgen_ty_1),
            "::",
            stringify!(dh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st__bindgen_ty_1>())).ec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st__bindgen_ty_1),
            "::",
            stringify!(ec)
        )
    );
}
impl Default for evp_pkey_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_evp_pkey_st() {
    assert_eq!(
        ::std::mem::size_of::<evp_pkey_st>(),
        24usize,
        concat!("Size of: ", stringify!(evp_pkey_st))
    );
    assert_eq!(
        ::std::mem::align_of::<evp_pkey_st>(),
        8usize,
        concat!("Alignment of ", stringify!(evp_pkey_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st>())).references as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st>())).pkey as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st),
            "::",
            stringify!(pkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evp_pkey_st>())).ameth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evp_pkey_st),
            "::",
            stringify!(ameth)
        )
    );
}
impl Default for evp_pkey_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_CRYPTO_BUFFER {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_CRL {
    _unused: [u8; 0],
}
extern "C" {
    pub fn PKCS7_get_raw_certificates(
        out_certs: *mut stack_st_CRYPTO_BUFFER,
        cbs: *mut CBS,
        pool: *mut CRYPTO_BUFFER_POOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_get_certificates(
        out_certs: *mut stack_st_X509,
        cbs: *mut CBS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_bundle_certificates(
        out: *mut CBB,
        certs: *const stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_get_CRLs(out_crls: *mut stack_st_X509_CRL, cbs: *mut CBS)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_bundle_CRLs(
        out: *mut CBB,
        crls: *const stack_st_X509_CRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_get_PEM_certificates(
        out_certs: *mut stack_st_X509,
        pem_bio: *mut BIO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_get_PEM_CRLs(
        out_crls: *mut stack_st_X509_CRL,
        pem_bio: *mut BIO,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PKCS7_SIGNED {
    pub cert: *mut stack_st_X509,
    pub crl: *mut stack_st_X509_CRL,
}
#[test]
fn bindgen_test_layout_PKCS7_SIGNED() {
    assert_eq!(
        ::std::mem::size_of::<PKCS7_SIGNED>(),
        16usize,
        concat!("Size of: ", stringify!(PKCS7_SIGNED))
    );
    assert_eq!(
        ::std::mem::align_of::<PKCS7_SIGNED>(),
        8usize,
        concat!("Alignment of ", stringify!(PKCS7_SIGNED))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7_SIGNED>())).cert as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7_SIGNED),
            "::",
            stringify!(cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7_SIGNED>())).crl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7_SIGNED),
            "::",
            stringify!(crl)
        )
    );
}
impl Default for PKCS7_SIGNED {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PKCS7_SIGN_ENVELOPE {
    pub cert: *mut stack_st_X509,
    pub crl: *mut stack_st_X509_CRL,
}
#[test]
fn bindgen_test_layout_PKCS7_SIGN_ENVELOPE() {
    assert_eq!(
        ::std::mem::size_of::<PKCS7_SIGN_ENVELOPE>(),
        16usize,
        concat!("Size of: ", stringify!(PKCS7_SIGN_ENVELOPE))
    );
    assert_eq!(
        ::std::mem::align_of::<PKCS7_SIGN_ENVELOPE>(),
        8usize,
        concat!("Alignment of ", stringify!(PKCS7_SIGN_ENVELOPE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7_SIGN_ENVELOPE>())).cert as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7_SIGN_ENVELOPE),
            "::",
            stringify!(cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7_SIGN_ENVELOPE>())).crl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7_SIGN_ENVELOPE),
            "::",
            stringify!(crl)
        )
    );
}
impl Default for PKCS7_SIGN_ENVELOPE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PKCS7_ENVELOPE = ::std::os::raw::c_void;
pub type PKCS7_DIGEST = ::std::os::raw::c_void;
pub type PKCS7_ENCRYPT = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PKCS7 {
    pub ber_bytes: *mut u8,
    pub ber_len: usize,
    pub type_: *mut ASN1_OBJECT,
    pub d: PKCS7__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PKCS7__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub data: *mut ASN1_OCTET_STRING,
    pub sign: *mut PKCS7_SIGNED,
    pub enveloped: *mut PKCS7_ENVELOPE,
    pub signed_and_enveloped: *mut PKCS7_SIGN_ENVELOPE,
    pub digest: *mut PKCS7_DIGEST,
    pub encrypted: *mut PKCS7_ENCRYPT,
    pub other: *mut ASN1_TYPE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_PKCS7__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<PKCS7__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(PKCS7__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<PKCS7__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(PKCS7__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).sign as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).enveloped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(enveloped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).signed_and_enveloped as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(signed_and_enveloped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).encrypted as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(encrypted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7__bindgen_ty_1>())).other as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7__bindgen_ty_1),
            "::",
            stringify!(other)
        )
    );
}
impl Default for PKCS7__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_PKCS7() {
    assert_eq!(
        ::std::mem::size_of::<PKCS7>(),
        32usize,
        concat!("Size of: ", stringify!(PKCS7))
    );
    assert_eq!(
        ::std::mem::align_of::<PKCS7>(),
        8usize,
        concat!("Alignment of ", stringify!(PKCS7))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7>())).ber_bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7),
            "::",
            stringify!(ber_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7>())).ber_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7),
            "::",
            stringify!(ber_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PKCS7),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PKCS7>())).d as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(PKCS7), "::", stringify!(d))
    );
}
impl Default for PKCS7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn d2i_PKCS7(out: *mut *mut PKCS7, inp: *mut *const u8, len: usize) -> *mut PKCS7;
}
extern "C" {
    pub fn d2i_PKCS7_bio(bio: *mut BIO, out: *mut *mut PKCS7) -> *mut PKCS7;
}
extern "C" {
    pub fn i2d_PKCS7(p7: *const PKCS7, out: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS7_bio(bio: *mut BIO, p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_free(p7: *mut PKCS7);
}
extern "C" {
    pub fn PKCS7_type_is_data(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_type_is_digest(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_type_is_encrypted(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_type_is_enveloped(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_type_is_signed(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_type_is_signedAndEnveloped(p7: *const PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS7_sign(
        sign_cert: *mut X509,
        pkey: *mut EVP_PKEY,
        certs: *mut stack_st_X509,
        data: *mut BIO,
        flags: ::std::os::raw::c_int,
    ) -> *mut PKCS7;
}
pub type stack_CRYPTO_BUFFER_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CRYPTO_BUFFER)>;
pub type stack_CRYPTO_BUFFER_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CRYPTO_BUFFER) -> *mut CRYPTO_BUFFER>;
pub type stack_CRYPTO_BUFFER_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const CRYPTO_BUFFER,
        b: *mut *const CRYPTO_BUFFER,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn CRYPTO_BUFFER_POOL_new() -> *mut CRYPTO_BUFFER_POOL;
}
extern "C" {
    pub fn CRYPTO_BUFFER_POOL_free(pool: *mut CRYPTO_BUFFER_POOL);
}
extern "C" {
    pub fn CRYPTO_BUFFER_new(
        data: *const u8,
        len: usize,
        pool: *mut CRYPTO_BUFFER_POOL,
    ) -> *mut CRYPTO_BUFFER;
}
extern "C" {
    pub fn CRYPTO_BUFFER_alloc(out_data: *mut *mut u8, len: usize) -> *mut CRYPTO_BUFFER;
}
extern "C" {
    pub fn CRYPTO_BUFFER_new_from_CBS(
        cbs: *mut CBS,
        pool: *mut CRYPTO_BUFFER_POOL,
    ) -> *mut CRYPTO_BUFFER;
}
extern "C" {
    pub fn CRYPTO_BUFFER_free(buf: *mut CRYPTO_BUFFER);
}
extern "C" {
    pub fn CRYPTO_BUFFER_up_ref(buf: *mut CRYPTO_BUFFER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CRYPTO_BUFFER_data(buf: *const CRYPTO_BUFFER) -> *const u8;
}
extern "C" {
    pub fn CRYPTO_BUFFER_len(buf: *const CRYPTO_BUFFER) -> usize;
}
extern "C" {
    pub fn CRYPTO_BUFFER_init_CBS(buf: *const CRYPTO_BUFFER, out: *mut CBS);
}
extern "C" {
    pub fn RSA_new() -> *mut RSA;
}
extern "C" {
    pub fn RSA_new_method(engine: *const ENGINE) -> *mut RSA;
}
extern "C" {
    pub fn RSA_free(rsa: *mut RSA);
}
extern "C" {
    pub fn RSA_up_ref(rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_bits(rsa: *const RSA) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn RSA_get0_n(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_e(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_d(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_p(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_q(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_dmp1(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_dmq1(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_iqmp(rsa: *const RSA) -> *const BIGNUM;
}
extern "C" {
    pub fn RSA_get0_key(
        rsa: *const RSA,
        out_n: *mut *const BIGNUM,
        out_e: *mut *const BIGNUM,
        out_d: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn RSA_get0_factors(rsa: *const RSA, out_p: *mut *const BIGNUM, out_q: *mut *const BIGNUM);
}
extern "C" {
    pub fn RSA_get0_crt_params(
        rsa: *const RSA,
        out_dmp1: *mut *const BIGNUM,
        out_dmq1: *mut *const BIGNUM,
        out_iqmp: *mut *const BIGNUM,
    );
}
extern "C" {
    pub fn RSA_set0_key(
        rsa: *mut RSA,
        n: *mut BIGNUM,
        e: *mut BIGNUM,
        d: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_set0_factors(rsa: *mut RSA, p: *mut BIGNUM, q: *mut BIGNUM)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_set0_crt_params(
        rsa: *mut RSA,
        dmp1: *mut BIGNUM,
        dmq1: *mut BIGNUM,
        iqmp: *mut BIGNUM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_generate_key_ex(
        rsa: *mut RSA,
        bits: ::std::os::raw::c_int,
        e: *const BIGNUM,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_generate_key_fips(
        rsa: *mut RSA,
        bits: ::std::os::raw::c_int,
        cb: *mut BN_GENCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_encrypt(
        rsa: *mut RSA,
        out_len: *mut usize,
        out: *mut u8,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_decrypt(
        rsa: *mut RSA,
        out_len: *mut usize,
        out: *mut u8,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_public_encrypt(
        flen: usize,
        from: *const u8,
        to: *mut u8,
        rsa: *mut RSA,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_private_decrypt(
        flen: usize,
        from: *const u8,
        to: *mut u8,
        rsa: *mut RSA,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_sign(
        hash_nid: ::std::os::raw::c_int,
        in_: *const u8,
        in_len: ::std::os::raw::c_uint,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
        rsa: *mut RSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_sign_pss_mgf1(
        rsa: *mut RSA,
        out_len: *mut usize,
        out: *mut u8,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
        md: *const EVP_MD,
        mgf1_md: *const EVP_MD,
        salt_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_sign_raw(
        rsa: *mut RSA,
        out_len: *mut usize,
        out: *mut u8,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_verify(
        hash_nid: ::std::os::raw::c_int,
        msg: *const u8,
        msg_len: usize,
        sig: *const u8,
        sig_len: usize,
        rsa: *mut RSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_verify_pss_mgf1(
        rsa: *mut RSA,
        msg: *const u8,
        msg_len: usize,
        md: *const EVP_MD,
        mgf1_md: *const EVP_MD,
        salt_len: ::std::os::raw::c_int,
        sig: *const u8,
        sig_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_verify_raw(
        rsa: *mut RSA,
        out_len: *mut usize,
        out: *mut u8,
        max_out: usize,
        in_: *const u8,
        in_len: usize,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_private_encrypt(
        flen: usize,
        from: *const u8,
        to: *mut u8,
        rsa: *mut RSA,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_public_decrypt(
        flen: usize,
        from: *const u8,
        to: *mut u8,
        rsa: *mut RSA,
        padding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_size(rsa: *const RSA) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn RSA_is_opaque(rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSAPublicKey_dup(rsa: *const RSA) -> *mut RSA;
}
extern "C" {
    pub fn RSAPrivateKey_dup(rsa: *const RSA) -> *mut RSA;
}
extern "C" {
    pub fn RSA_check_key(rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_check_fips(key: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_verify_PKCS1_PSS_mgf1(
        rsa: *const RSA,
        mHash: *const u8,
        Hash: *const EVP_MD,
        mgf1Hash: *const EVP_MD,
        EM: *const u8,
        sLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_PSS_mgf1(
        rsa: *const RSA,
        EM: *mut u8,
        mHash: *const u8,
        Hash: *const EVP_MD,
        mgf1Hash: *const EVP_MD,
        sLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_OAEP_mgf1(
        to: *mut u8,
        to_len: usize,
        from: *const u8,
        from_len: usize,
        param: *const u8,
        param_len: usize,
        md: *const EVP_MD,
        mgf1md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_add_pkcs1_prefix(
        out_msg: *mut *mut u8,
        out_msg_len: *mut usize,
        is_alloced: *mut ::std::os::raw::c_int,
        hash_nid: ::std::os::raw::c_int,
        msg: *const u8,
        msg_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_parse_public_key(cbs: *mut CBS) -> *mut RSA;
}
extern "C" {
    pub fn RSA_public_key_from_bytes(in_: *const u8, in_len: usize) -> *mut RSA;
}
extern "C" {
    pub fn RSA_marshal_public_key(cbb: *mut CBB, rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_public_key_to_bytes(
        out_bytes: *mut *mut u8,
        out_len: *mut usize,
        rsa: *const RSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_parse_private_key(cbs: *mut CBS) -> *mut RSA;
}
extern "C" {
    pub fn RSA_private_key_from_bytes(in_: *const u8, in_len: usize) -> *mut RSA;
}
extern "C" {
    pub fn RSA_marshal_private_key(cbb: *mut CBB, rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_private_key_to_bytes(
        out_bytes: *mut *mut u8,
        out_len: *mut usize,
        rsa: *const RSA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_set_ex_data(
        rsa: *mut RSA,
        idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_get_ex_data(
        rsa: *const RSA,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn RSA_flags(rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_blinding_on(rsa: *mut RSA, ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_generate_key(
        bits: ::std::os::raw::c_int,
        e: ::std::os::raw::c_ulong,
        callback: *mut ::std::os::raw::c_void,
        cb_arg: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn d2i_RSAPublicKey(
        out: *mut *mut RSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey(in_: *const RSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSAPrivateKey(
        out: *mut *mut RSA,
        inp: *mut *const u8,
        len: ::std::os::raw::c_long,
    ) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey(in_: *const RSA, outp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_PSS(
        rsa: *const RSA,
        EM: *mut u8,
        mHash: *const u8,
        Hash: *const EVP_MD,
        sLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_verify_PKCS1_PSS(
        rsa: *const RSA,
        mHash: *const u8,
        Hash: *const EVP_MD,
        EM: *const u8,
        sLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_padding_add_PKCS1_OAEP(
        to: *mut u8,
        to_len: usize,
        from: *const u8,
        from_len: usize,
        param: *const u8,
        param_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RSA_print(
        bio: *mut BIO,
        rsa: *const RSA,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct rsa_meth_st {
    pub common: openssl_method_common_st,
    pub app_data: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<unsafe extern "C" fn(rsa: *mut RSA) -> ::std::os::raw::c_int>,
    pub finish: ::std::option::Option<unsafe extern "C" fn(rsa: *mut RSA) -> ::std::os::raw::c_int>,
    pub size: ::std::option::Option<unsafe extern "C" fn(rsa: *const RSA) -> usize>,
    pub sign: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            m: *const u8,
            m_length: ::std::os::raw::c_uint,
            sigret: *mut u8,
            siglen: *mut ::std::os::raw::c_uint,
            rsa: *const RSA,
        ) -> ::std::os::raw::c_int,
    >,
    pub sign_raw: ::std::option::Option<
        unsafe extern "C" fn(
            rsa: *mut RSA,
            out_len: *mut usize,
            out: *mut u8,
            max_out: usize,
            in_: *const u8,
            in_len: usize,
            padding: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            rsa: *mut RSA,
            out_len: *mut usize,
            out: *mut u8,
            max_out: usize,
            in_: *const u8,
            in_len: usize,
            padding: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub private_transform: ::std::option::Option<
        unsafe extern "C" fn(
            rsa: *mut RSA,
            out: *mut u8,
            in_: *const u8,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rsa_meth_st() {
    assert_eq!(
        ::std::mem::size_of::<rsa_meth_st>(),
        80usize,
        concat!("Size of: ", stringify!(rsa_meth_st))
    );
    assert_eq!(
        ::std::mem::align_of::<rsa_meth_st>(),
        8usize,
        concat!("Alignment of ", stringify!(rsa_meth_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).app_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(app_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).finish as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).sign as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).sign_raw as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(sign_raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).decrypt as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(decrypt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).private_transform as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(private_transform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_meth_st>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_meth_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for rsa_meth_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_blinding_st {
    _unused: [u8; 0],
}
pub type BN_BLINDING = bn_blinding_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rsa_st {
    pub meth: *mut RSA_METHOD,
    pub n: *mut BIGNUM,
    pub e: *mut BIGNUM,
    pub d: *mut BIGNUM,
    pub p: *mut BIGNUM,
    pub q: *mut BIGNUM,
    pub dmp1: *mut BIGNUM,
    pub dmq1: *mut BIGNUM,
    pub iqmp: *mut BIGNUM,
    pub ex_data: CRYPTO_EX_DATA,
    pub references: CRYPTO_refcount_t,
    pub flags: ::std::os::raw::c_int,
    pub lock: CRYPTO_MUTEX,
    pub mont_n: *mut BN_MONT_CTX,
    pub mont_p: *mut BN_MONT_CTX,
    pub mont_q: *mut BN_MONT_CTX,
    pub d_fixed: *mut BIGNUM,
    pub dmp1_fixed: *mut BIGNUM,
    pub dmq1_fixed: *mut BIGNUM,
    pub inv_small_mod_large_mont: *mut BIGNUM,
    pub num_blindings: ::std::os::raw::c_uint,
    pub blindings: *mut *mut BN_BLINDING,
    pub blindings_inuse: *mut ::std::os::raw::c_uchar,
    pub blinding_fork_generation: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_rsa_st() {
    assert_eq!(
        ::std::mem::size_of::<rsa_st>(),
        240usize,
        concat!("Size of: ", stringify!(rsa_st))
    );
    assert_eq!(
        ::std::mem::align_of::<rsa_st>(),
        8usize,
        concat!("Alignment of ", stringify!(rsa_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).meth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).n as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rsa_st), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).e as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rsa_st), "::", stringify!(e))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).d as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rsa_st), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).p as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(rsa_st), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).q as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(rsa_st), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).dmp1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(dmp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).dmq1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(dmq1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).iqmp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(iqmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).ex_data as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(ex_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).references as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).flags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).lock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).mont_n as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(mont_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).mont_p as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(mont_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).mont_q as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(mont_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).d_fixed as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(d_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).dmp1_fixed as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(dmp1_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).dmq1_fixed as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(dmq1_fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).inv_small_mod_large_mont as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(inv_small_mod_large_mont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).num_blindings as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(num_blindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).blindings as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(blindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).blindings_inuse as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(blindings_inuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_st>())).blinding_fork_generation as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_st),
            "::",
            stringify!(blinding_fork_generation)
        )
    );
}
impl Default for rsa_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl rsa_st {
    #[inline]
    pub fn private_key_frozen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_private_key_frozen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        private_key_frozen: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let private_key_frozen: u32 = unsafe { ::std::mem::transmute(private_key_frozen) };
            private_key_frozen as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_ALGOR {
    _unused: [u8; 0],
}
pub type stack_X509_ALGOR_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_ALGOR)>;
pub type stack_X509_ALGOR_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_ALGOR) -> *mut X509_ALGOR>;
pub type stack_X509_ALGOR_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_ALGOR,
        b: *mut *const X509_ALGOR,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_ALGORS = stack_st_X509_ALGOR;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_val_st {
    pub notBefore: *mut ASN1_TIME,
    pub notAfter: *mut ASN1_TIME,
}
#[test]
fn bindgen_test_layout_X509_val_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_val_st>(),
        16usize,
        concat!("Size of: ", stringify!(X509_val_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_val_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_val_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_val_st>())).notBefore as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_val_st),
            "::",
            stringify!(notBefore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_val_st>())).notAfter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_val_st),
            "::",
            stringify!(notAfter)
        )
    );
}
impl Default for X509_val_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_pubkey_st {
    pub algor: *mut X509_ALGOR,
    pub public_key: *mut ASN1_BIT_STRING,
    pub pkey: *mut EVP_PKEY,
}
#[test]
fn bindgen_test_layout_X509_pubkey_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_pubkey_st>(),
        24usize,
        concat!("Size of: ", stringify!(X509_pubkey_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_pubkey_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_pubkey_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_pubkey_st>())).algor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_pubkey_st),
            "::",
            stringify!(algor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_pubkey_st>())).public_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_pubkey_st),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_pubkey_st>())).pkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_pubkey_st),
            "::",
            stringify!(pkey)
        )
    );
}
impl Default for X509_pubkey_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_sig_st {
    pub algor: *mut X509_ALGOR,
    pub digest: *mut ASN1_OCTET_STRING,
}
#[test]
fn bindgen_test_layout_X509_sig_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_sig_st>(),
        16usize,
        concat!("Size of: ", stringify!(X509_sig_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_sig_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_sig_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_sig_st>())).algor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_sig_st),
            "::",
            stringify!(algor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_sig_st>())).digest as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_sig_st),
            "::",
            stringify!(digest)
        )
    );
}
impl Default for X509_sig_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_name_entry_st {
    pub object: *mut ASN1_OBJECT,
    pub value: *mut ASN1_STRING,
    pub set: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_X509_name_entry_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_name_entry_st>(),
        24usize,
        concat!("Size of: ", stringify!(X509_name_entry_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_name_entry_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_name_entry_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_entry_st>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_entry_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_entry_st>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_entry_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_entry_st>())).set as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_entry_st),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_entry_st>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_entry_st),
            "::",
            stringify!(size)
        )
    );
}
impl Default for X509_name_entry_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_NAME_ENTRY {
    _unused: [u8; 0],
}
pub type stack_X509_NAME_ENTRY_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_NAME_ENTRY)>;
pub type stack_X509_NAME_ENTRY_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_NAME_ENTRY) -> *mut X509_NAME_ENTRY>;
pub type stack_X509_NAME_ENTRY_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_NAME_ENTRY,
        b: *mut *const X509_NAME_ENTRY,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_name_st {
    pub entries: *mut stack_st_X509_NAME_ENTRY,
    pub modified: ::std::os::raw::c_int,
    pub bytes: *mut BUF_MEM,
    pub canon_enc: *mut ::std::os::raw::c_uchar,
    pub canon_enclen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_X509_name_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_name_st>(),
        40usize,
        concat!("Size of: ", stringify!(X509_name_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_name_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_name_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_st>())).entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_st),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_st>())).modified as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_st),
            "::",
            stringify!(modified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_st>())).bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_st>())).canon_enc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_st),
            "::",
            stringify!(canon_enc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_name_st>())).canon_enclen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_name_st),
            "::",
            stringify!(canon_enclen)
        )
    );
}
impl Default for X509_name_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_NAME {
    _unused: [u8; 0],
}
pub type stack_X509_NAME_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_NAME)>;
pub type stack_X509_NAME_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_NAME) -> *mut X509_NAME>;
pub type stack_X509_NAME_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_NAME,
        b: *mut *const X509_NAME,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_extension_st {
    pub object: *mut ASN1_OBJECT,
    pub critical: ASN1_BOOLEAN,
    pub value: *mut ASN1_OCTET_STRING,
}
#[test]
fn bindgen_test_layout_X509_extension_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_extension_st>(),
        24usize,
        concat!("Size of: ", stringify!(X509_extension_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_extension_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_extension_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_extension_st>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_extension_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_extension_st>())).critical as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_extension_st),
            "::",
            stringify!(critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_extension_st>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_extension_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for X509_extension_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_EXTENSION {
    _unused: [u8; 0],
}
pub type X509_EXTENSIONS = stack_st_X509_EXTENSION;
pub type stack_X509_EXTENSION_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_EXTENSION)>;
pub type stack_X509_EXTENSION_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_EXTENSION) -> *mut X509_EXTENSION>;
pub type stack_X509_EXTENSION_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_EXTENSION,
        b: *mut *const X509_EXTENSION,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x509_attributes_st {
    pub object: *mut ASN1_OBJECT,
    pub single: ::std::os::raw::c_int,
    pub value: x509_attributes_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x509_attributes_st__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub set: *mut stack_st_ASN1_TYPE,
    pub single: *mut ASN1_TYPE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_x509_attributes_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x509_attributes_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(x509_attributes_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_attributes_st__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(x509_attributes_st__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_attributes_st__bindgen_ty_1>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_attributes_st__bindgen_ty_1>())).set as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st__bindgen_ty_1),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_attributes_st__bindgen_ty_1>())).single as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st__bindgen_ty_1),
            "::",
            stringify!(single)
        )
    );
}
impl Default for x509_attributes_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_x509_attributes_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_attributes_st>(),
        24usize,
        concat!("Size of: ", stringify!(x509_attributes_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_attributes_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_attributes_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_attributes_st>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_attributes_st>())).single as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st),
            "::",
            stringify!(single)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_attributes_st>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_attributes_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for x509_attributes_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_ATTRIBUTE {
    _unused: [u8; 0],
}
pub type stack_X509_ATTRIBUTE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_ATTRIBUTE)>;
pub type stack_X509_ATTRIBUTE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_ATTRIBUTE) -> *mut X509_ATTRIBUTE>;
pub type stack_X509_ATTRIBUTE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_ATTRIBUTE,
        b: *mut *const X509_ATTRIBUTE,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_req_info_st {
    pub enc: ASN1_ENCODING,
    pub version: *mut ASN1_INTEGER,
    pub subject: *mut X509_NAME,
    pub pubkey: *mut X509_PUBKEY,
    pub attributes: *mut stack_st_X509_ATTRIBUTE,
}
#[test]
fn bindgen_test_layout_X509_req_info_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_req_info_st>(),
        56usize,
        concat!("Size of: ", stringify!(X509_req_info_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_req_info_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_req_info_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_info_st>())).enc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_info_st),
            "::",
            stringify!(enc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_info_st>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_info_st),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_info_st>())).subject as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_info_st),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_info_st>())).pubkey as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_info_st),
            "::",
            stringify!(pubkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_info_st>())).attributes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_info_st),
            "::",
            stringify!(attributes)
        )
    );
}
impl Default for X509_req_info_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_req_st {
    pub req_info: *mut X509_REQ_INFO,
    pub sig_alg: *mut X509_ALGOR,
    pub signature: *mut ASN1_BIT_STRING,
    pub references: CRYPTO_refcount_t,
}
#[test]
fn bindgen_test_layout_X509_req_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_req_st>(),
        32usize,
        concat!("Size of: ", stringify!(X509_req_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_req_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_req_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_st>())).req_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_st),
            "::",
            stringify!(req_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_st>())).sig_alg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_st),
            "::",
            stringify!(sig_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_st>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_st),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_req_st>())).references as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_req_st),
            "::",
            stringify!(references)
        )
    );
}
impl Default for X509_req_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_cinf_st {
    pub version: *mut ASN1_INTEGER,
    pub serialNumber: *mut ASN1_INTEGER,
    pub signature: *mut X509_ALGOR,
    pub issuer: *mut X509_NAME,
    pub validity: *mut X509_VAL,
    pub subject: *mut X509_NAME,
    pub key: *mut X509_PUBKEY,
    pub issuerUID: *mut ASN1_BIT_STRING,
    pub subjectUID: *mut ASN1_BIT_STRING,
    pub extensions: *mut stack_st_X509_EXTENSION,
    pub enc: ASN1_ENCODING,
}
#[test]
fn bindgen_test_layout_x509_cinf_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_cinf_st>(),
        104usize,
        concat!("Size of: ", stringify!(x509_cinf_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_cinf_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_cinf_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).serialNumber as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).issuer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).validity as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(validity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).subject as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).key as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).issuerUID as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(issuerUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).subjectUID as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(subjectUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).extensions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cinf_st>())).enc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cinf_st),
            "::",
            stringify!(enc)
        )
    );
}
impl Default for x509_cinf_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_cert_aux_st {
    pub trust: *mut stack_st_ASN1_OBJECT,
    pub reject: *mut stack_st_ASN1_OBJECT,
    pub alias: *mut ASN1_UTF8STRING,
    pub keyid: *mut ASN1_OCTET_STRING,
    pub other: *mut stack_st_X509_ALGOR,
}
#[test]
fn bindgen_test_layout_x509_cert_aux_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_cert_aux_st>(),
        40usize,
        concat!("Size of: ", stringify!(x509_cert_aux_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_cert_aux_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_cert_aux_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cert_aux_st>())).trust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cert_aux_st),
            "::",
            stringify!(trust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cert_aux_st>())).reject as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cert_aux_st),
            "::",
            stringify!(reject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cert_aux_st>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cert_aux_st),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cert_aux_st>())).keyid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cert_aux_st),
            "::",
            stringify!(keyid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_cert_aux_st>())).other as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_cert_aux_st),
            "::",
            stringify!(other)
        )
    );
}
impl Default for x509_cert_aux_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_DIST_POINT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_GENERAL_NAME {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x509_st {
    pub cert_info: *mut X509_CINF,
    pub sig_alg: *mut X509_ALGOR,
    pub signature: *mut ASN1_BIT_STRING,
    pub references: CRYPTO_refcount_t,
    pub ex_data: CRYPTO_EX_DATA,
    pub ex_pathlen: ::std::os::raw::c_long,
    pub ex_pcpathlen: ::std::os::raw::c_long,
    pub ex_flags: ::std::os::raw::c_ulong,
    pub ex_kusage: ::std::os::raw::c_ulong,
    pub ex_xkusage: ::std::os::raw::c_ulong,
    pub ex_nscert: ::std::os::raw::c_ulong,
    pub skid: *mut ASN1_OCTET_STRING,
    pub akid: *mut AUTHORITY_KEYID,
    pub policy_cache: *mut X509_POLICY_CACHE,
    pub crldp: *mut stack_st_DIST_POINT,
    pub altname: *mut stack_st_GENERAL_NAME,
    pub nc: *mut NAME_CONSTRAINTS,
    pub sha1_hash: [::std::os::raw::c_uchar; 20usize],
    pub aux: *mut X509_CERT_AUX,
    pub buf: *mut CRYPTO_BUFFER,
    pub lock: CRYPTO_MUTEX,
}
#[test]
fn bindgen_test_layout_x509_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_st>(),
        232usize,
        concat!("Size of: ", stringify!(x509_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).cert_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(cert_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).sig_alg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(sig_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).references as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_pathlen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_pathlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_pcpathlen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_pcpathlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_kusage as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_kusage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_xkusage as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_xkusage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).ex_nscert as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(ex_nscert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).skid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(skid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).akid as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(akid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).policy_cache as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(policy_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).crldp as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(crldp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).altname as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(altname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).nc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(nc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).sha1_hash as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(sha1_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).aux as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).buf as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_st>())).lock as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_st),
            "::",
            stringify!(lock)
        )
    );
}
impl Default for x509_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_X509_free_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509)>;
pub type stack_X509_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509) -> *mut X509>;
pub type stack_X509_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(a: *mut *const X509, b: *mut *const X509) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_trust_st {
    pub trust: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub check_trust: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut x509_trust_st,
            arg2: *mut X509,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: ::std::os::raw::c_int,
    pub arg2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_x509_trust_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_trust_st>(),
        40usize,
        concat!("Size of: ", stringify!(x509_trust_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_trust_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_trust_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).trust as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(trust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).check_trust as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(check_trust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).arg1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_trust_st>())).arg2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_trust_st),
            "::",
            stringify!(arg2)
        )
    );
}
impl Default for x509_trust_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_TRUST {
    _unused: [u8; 0],
}
pub type stack_X509_TRUST_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_TRUST)>;
pub type stack_X509_TRUST_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_TRUST) -> *mut X509_TRUST>;
pub type stack_X509_TRUST_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_TRUST,
        b: *mut *const X509_TRUST,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_revoked_st {
    pub serialNumber: *mut ASN1_INTEGER,
    pub revocationDate: *mut ASN1_TIME,
    pub extensions: *mut stack_st_X509_EXTENSION,
    pub issuer: *mut stack_st_GENERAL_NAME,
    pub reason: ::std::os::raw::c_int,
    pub sequence: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_x509_revoked_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_revoked_st>(),
        40usize,
        concat!("Size of: ", stringify!(x509_revoked_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_revoked_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_revoked_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).serialNumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).revocationDate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(revocationDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).extensions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).issuer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).reason as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_revoked_st>())).sequence as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_revoked_st),
            "::",
            stringify!(sequence)
        )
    );
}
impl Default for x509_revoked_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_REVOKED {
    _unused: [u8; 0],
}
pub type stack_X509_REVOKED_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_REVOKED)>;
pub type stack_X509_REVOKED_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_REVOKED) -> *mut X509_REVOKED>;
pub type stack_X509_REVOKED_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_REVOKED,
        b: *mut *const X509_REVOKED,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_crl_info_st {
    pub version: *mut ASN1_INTEGER,
    pub sig_alg: *mut X509_ALGOR,
    pub issuer: *mut X509_NAME,
    pub lastUpdate: *mut ASN1_TIME,
    pub nextUpdate: *mut ASN1_TIME,
    pub revoked: *mut stack_st_X509_REVOKED,
    pub extensions: *mut stack_st_X509_EXTENSION,
    pub enc: ASN1_ENCODING,
}
#[test]
fn bindgen_test_layout_X509_crl_info_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_crl_info_st>(),
        80usize,
        concat!("Size of: ", stringify!(X509_crl_info_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_crl_info_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_crl_info_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).sig_alg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(sig_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).issuer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).lastUpdate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(lastUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).nextUpdate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(nextUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).revoked as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(revoked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).extensions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_info_st>())).enc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_info_st),
            "::",
            stringify!(enc)
        )
    );
}
impl Default for X509_crl_info_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_GENERAL_NAMES {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_crl_st {
    pub crl: *mut X509_CRL_INFO,
    pub sig_alg: *mut X509_ALGOR,
    pub signature: *mut ASN1_BIT_STRING,
    pub references: CRYPTO_refcount_t,
    pub flags: ::std::os::raw::c_int,
    pub akid: *mut AUTHORITY_KEYID,
    pub idp: *mut ISSUING_DIST_POINT,
    pub idp_flags: ::std::os::raw::c_int,
    pub idp_reasons: ::std::os::raw::c_int,
    pub crl_number: *mut ASN1_INTEGER,
    pub base_crl_number: *mut ASN1_INTEGER,
    pub sha1_hash: [::std::os::raw::c_uchar; 20usize],
    pub issuers: *mut stack_st_GENERAL_NAMES,
    pub meth: *const X509_CRL_METHOD,
    pub meth_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_X509_crl_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_crl_st>(),
        120usize,
        concat!("Size of: ", stringify!(X509_crl_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_crl_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_crl_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).crl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).sig_alg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(sig_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).references as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).akid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(akid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).idp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(idp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).idp_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(idp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).idp_reasons as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(idp_reasons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).crl_number as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(crl_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).base_crl_number as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(base_crl_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).sha1_hash as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(sha1_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).issuers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(issuers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).meth as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_crl_st>())).meth_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_crl_st),
            "::",
            stringify!(meth_data)
        )
    );
}
impl Default for X509_crl_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_X509_CRL_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_CRL)>;
pub type stack_X509_CRL_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_CRL) -> *mut X509_CRL>;
pub type stack_X509_CRL_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(a: *mut *const X509_CRL, b: *mut *const X509_CRL) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct private_key_st {
    pub version: ::std::os::raw::c_int,
    pub enc_algor: *mut X509_ALGOR,
    pub enc_pkey: *mut ASN1_OCTET_STRING,
    pub dec_pkey: *mut EVP_PKEY,
    pub key_length: ::std::os::raw::c_int,
    pub key_data: *mut ::std::os::raw::c_char,
    pub key_free: ::std::os::raw::c_int,
    pub cipher: EVP_CIPHER_INFO,
}
#[test]
fn bindgen_test_layout_private_key_st() {
    assert_eq!(
        ::std::mem::size_of::<private_key_st>(),
        80usize,
        concat!("Size of: ", stringify!(private_key_st))
    );
    assert_eq!(
        ::std::mem::align_of::<private_key_st>(),
        8usize,
        concat!("Alignment of ", stringify!(private_key_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).enc_algor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(enc_algor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).enc_pkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(enc_pkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).dec_pkey as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(dec_pkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).key_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).key_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(key_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).key_free as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(key_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<private_key_st>())).cipher as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(private_key_st),
            "::",
            stringify!(cipher)
        )
    );
}
impl Default for private_key_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_info_st {
    pub x509: *mut X509,
    pub crl: *mut X509_CRL,
    pub x_pkey: *mut X509_PKEY,
    pub enc_cipher: EVP_CIPHER_INFO,
    pub enc_len: ::std::os::raw::c_int,
    pub enc_data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_X509_info_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_info_st>(),
        64usize,
        concat!("Size of: ", stringify!(X509_info_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_info_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_info_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).x509 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(x509)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).crl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).x_pkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(x_pkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).enc_cipher as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(enc_cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).enc_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(enc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_info_st>())).enc_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_info_st),
            "::",
            stringify!(enc_data)
        )
    );
}
impl Default for X509_info_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_INFO {
    _unused: [u8; 0],
}
pub type stack_X509_INFO_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_INFO)>;
pub type stack_X509_INFO_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_INFO) -> *mut X509_INFO>;
pub type stack_X509_INFO_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_INFO,
        b: *mut *const X509_INFO,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Netscape_spkac_st {
    pub pubkey: *mut X509_PUBKEY,
    pub challenge: *mut ASN1_IA5STRING,
}
#[test]
fn bindgen_test_layout_Netscape_spkac_st() {
    assert_eq!(
        ::std::mem::size_of::<Netscape_spkac_st>(),
        16usize,
        concat!("Size of: ", stringify!(Netscape_spkac_st))
    );
    assert_eq!(
        ::std::mem::align_of::<Netscape_spkac_st>(),
        8usize,
        concat!("Alignment of ", stringify!(Netscape_spkac_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Netscape_spkac_st>())).pubkey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Netscape_spkac_st),
            "::",
            stringify!(pubkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Netscape_spkac_st>())).challenge as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Netscape_spkac_st),
            "::",
            stringify!(challenge)
        )
    );
}
impl Default for Netscape_spkac_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Netscape_spki_st {
    pub spkac: *mut NETSCAPE_SPKAC,
    pub sig_algor: *mut X509_ALGOR,
    pub signature: *mut ASN1_BIT_STRING,
}
#[test]
fn bindgen_test_layout_Netscape_spki_st() {
    assert_eq!(
        ::std::mem::size_of::<Netscape_spki_st>(),
        24usize,
        concat!("Size of: ", stringify!(Netscape_spki_st))
    );
    assert_eq!(
        ::std::mem::align_of::<Netscape_spki_st>(),
        8usize,
        concat!("Alignment of ", stringify!(Netscape_spki_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Netscape_spki_st>())).spkac as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Netscape_spki_st),
            "::",
            stringify!(spkac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Netscape_spki_st>())).sig_algor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Netscape_spki_st),
            "::",
            stringify!(sig_algor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Netscape_spki_st>())).signature as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Netscape_spki_st),
            "::",
            stringify!(signature)
        )
    );
}
impl Default for Netscape_spki_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x509_object_st {
    pub type_: ::std::os::raw::c_int,
    pub data: x509_object_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x509_object_st__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub x509: *mut X509,
    pub crl: *mut X509_CRL,
    pub pkey: *mut EVP_PKEY,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_x509_object_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x509_object_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(x509_object_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_object_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_object_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_object_st__bindgen_ty_1>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_object_st__bindgen_ty_1>())).x509 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st__bindgen_ty_1),
            "::",
            stringify!(x509)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_object_st__bindgen_ty_1>())).crl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st__bindgen_ty_1),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_object_st__bindgen_ty_1>())).pkey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st__bindgen_ty_1),
            "::",
            stringify!(pkey)
        )
    );
}
impl Default for x509_object_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_x509_object_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_object_st>(),
        16usize,
        concat!("Size of: ", stringify!(x509_object_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_object_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_object_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_object_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_object_st>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_object_st),
            "::",
            stringify!(data)
        )
    );
}
impl Default for x509_object_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X509_OBJECT = x509_object_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_LOOKUP {
    _unused: [u8; 0],
}
pub type stack_X509_LOOKUP_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_LOOKUP)>;
pub type stack_X509_LOOKUP_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_LOOKUP) -> *mut X509_LOOKUP>;
pub type stack_X509_LOOKUP_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_LOOKUP,
        b: *mut *const X509_LOOKUP,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_OBJECT {
    _unused: [u8; 0],
}
pub type stack_X509_OBJECT_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_OBJECT)>;
pub type stack_X509_OBJECT_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_OBJECT) -> *mut X509_OBJECT>;
pub type stack_X509_OBJECT_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_OBJECT,
        b: *mut *const X509_OBJECT,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_lookup_method_st {
    pub name: *const ::std::os::raw::c_char,
    pub new_item:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::std::os::raw::c_int>,
    pub free: ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP)>,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::std::os::raw::c_int>,
    pub shutdown:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_LOOKUP) -> ::std::os::raw::c_int>,
    pub ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut X509_LOOKUP,
            cmd: ::std::os::raw::c_int,
            argc: *const ::std::os::raw::c_char,
            argl: ::std::os::raw::c_long,
            ret: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_subject: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut X509_LOOKUP,
            type_: ::std::os::raw::c_int,
            name: *mut X509_NAME,
            ret: *mut X509_OBJECT,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_issuer_serial: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut X509_LOOKUP,
            type_: ::std::os::raw::c_int,
            name: *mut X509_NAME,
            serial: *mut ASN1_INTEGER,
            ret: *mut X509_OBJECT,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_fingerprint: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut X509_LOOKUP,
            type_: ::std::os::raw::c_int,
            bytes: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
            ret: *mut X509_OBJECT,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_by_alias: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut X509_LOOKUP,
            type_: ::std::os::raw::c_int,
            str_: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            ret: *mut X509_OBJECT,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_x509_lookup_method_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_lookup_method_st>(),
        80usize,
        concat!("Size of: ", stringify!(x509_lookup_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_lookup_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_lookup_method_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).new_item as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(new_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).shutdown as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_method_st>())).ctrl as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(ctrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_lookup_method_st>())).get_by_subject as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(get_by_subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_lookup_method_st>())).get_by_issuer_serial as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(get_by_issuer_serial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_lookup_method_st>())).get_by_fingerprint as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(get_by_fingerprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_lookup_method_st>())).get_by_alias as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_method_st),
            "::",
            stringify!(get_by_alias)
        )
    );
}
impl Default for x509_lookup_method_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X509_LOOKUP_METHOD = x509_lookup_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_VERIFY_PARAM_ID_st {
    _unused: [u8; 0],
}
pub type X509_VERIFY_PARAM_ID = X509_VERIFY_PARAM_ID_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct X509_VERIFY_PARAM_st {
    pub name: *mut ::std::os::raw::c_char,
    pub check_time: time_t,
    pub inh_flags: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
    pub purpose: ::std::os::raw::c_int,
    pub trust: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub policies: *mut stack_st_ASN1_OBJECT,
    pub id: *mut X509_VERIFY_PARAM_ID,
}
#[test]
fn bindgen_test_layout_X509_VERIFY_PARAM_st() {
    assert_eq!(
        ::std::mem::size_of::<X509_VERIFY_PARAM_st>(),
        64usize,
        concat!("Size of: ", stringify!(X509_VERIFY_PARAM_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509_VERIFY_PARAM_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509_VERIFY_PARAM_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).check_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(check_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).inh_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(inh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).purpose as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(purpose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).trust as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(trust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).depth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).policies as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(policies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<X509_VERIFY_PARAM_st>())).id as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(X509_VERIFY_PARAM_st),
            "::",
            stringify!(id)
        )
    );
}
impl Default for X509_VERIFY_PARAM_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_VERIFY_PARAM {
    _unused: [u8; 0],
}
pub type stack_X509_VERIFY_PARAM_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_VERIFY_PARAM)>;
pub type stack_X509_VERIFY_PARAM_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut X509_VERIFY_PARAM) -> *mut X509_VERIFY_PARAM,
>;
pub type stack_X509_VERIFY_PARAM_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_VERIFY_PARAM,
        b: *mut *const X509_VERIFY_PARAM,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_verify_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut X509_STORE_CTX,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_verify_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_STORE_CTX) -> ::std::os::raw::c_int>;
pub type X509_STORE_CTX_get_issuer_fn = ::std::option::Option<
    unsafe extern "C" fn(
        issuer: *mut *mut X509,
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_check_issued_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
        issuer: *mut X509,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_check_revocation_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int>;
pub type X509_STORE_CTX_get_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        crl: *mut *mut X509_CRL,
        x: *mut X509,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_check_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut X509_STORE_CTX, crl: *mut X509_CRL) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_cert_crl_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut X509_STORE_CTX,
        crl: *mut X509_CRL,
        x: *mut X509,
    ) -> ::std::os::raw::c_int,
>;
pub type X509_STORE_CTX_check_policy_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int>;
pub type X509_STORE_CTX_lookup_certs_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut X509_STORE_CTX, nm: *mut X509_NAME) -> *mut stack_st_X509,
>;
pub type X509_STORE_CTX_lookup_crls_fn = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut X509_STORE_CTX, nm: *mut X509_NAME) -> *mut stack_st_X509_CRL,
>;
pub type X509_STORE_CTX_cleanup_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x509_store_st {
    pub cache: ::std::os::raw::c_int,
    pub objs: *mut stack_st_X509_OBJECT,
    pub objs_lock: CRYPTO_MUTEX,
    pub additional_untrusted: *mut stack_st_X509,
    pub get_cert_methods: *mut stack_st_X509_LOOKUP,
    pub param: *mut X509_VERIFY_PARAM,
    pub verify: X509_STORE_CTX_verify_fn,
    pub verify_cb: X509_STORE_CTX_verify_cb,
    pub get_issuer: X509_STORE_CTX_get_issuer_fn,
    pub check_issued: X509_STORE_CTX_check_issued_fn,
    pub check_revocation: X509_STORE_CTX_check_revocation_fn,
    pub get_crl: X509_STORE_CTX_get_crl_fn,
    pub check_crl: X509_STORE_CTX_check_crl_fn,
    pub cert_crl: X509_STORE_CTX_cert_crl_fn,
    pub lookup_certs: X509_STORE_CTX_lookup_certs_fn,
    pub lookup_crls: X509_STORE_CTX_lookup_crls_fn,
    pub cleanup: X509_STORE_CTX_cleanup_fn,
    pub references: CRYPTO_refcount_t,
}
#[test]
fn bindgen_test_layout_x509_store_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_store_st>(),
        192usize,
        concat!("Size of: ", stringify!(x509_store_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_store_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_store_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).cache as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).objs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(objs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).objs_lock as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(objs_lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_st>())).additional_untrusted as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(additional_untrusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).get_cert_methods as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(get_cert_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).param as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).verify as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).verify_cb as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(verify_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).get_issuer as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(get_issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).check_issued as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(check_issued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).check_revocation as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(check_revocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).get_crl as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(get_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).check_crl as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(check_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).cert_crl as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(cert_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).lookup_certs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(lookup_certs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).lookup_crls as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(lookup_crls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).cleanup as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_st>())).references as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_st),
            "::",
            stringify!(references)
        )
    );
}
impl Default for x509_store_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn X509_STORE_set_depth(
        store: *mut X509_STORE,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_lookup_st {
    pub init: ::std::os::raw::c_int,
    pub skip: ::std::os::raw::c_int,
    pub method: *mut X509_LOOKUP_METHOD,
    pub method_data: *mut ::std::os::raw::c_char,
    pub store_ctx: *mut X509_STORE,
}
#[test]
fn bindgen_test_layout_x509_lookup_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_lookup_st>(),
        32usize,
        concat!("Size of: ", stringify!(x509_lookup_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_lookup_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_lookup_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_st>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_st),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_st>())).skip as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_st),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_st>())).method as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_st),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_st>())).method_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_st),
            "::",
            stringify!(method_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_lookup_st>())).store_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_lookup_st),
            "::",
            stringify!(store_ctx)
        )
    );
}
impl Default for x509_lookup_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_store_ctx_st {
    pub ctx: *mut X509_STORE,
    pub cert: *mut X509,
    pub untrusted: *mut stack_st_X509,
    pub crls: *mut stack_st_X509_CRL,
    pub param: *mut X509_VERIFY_PARAM,
    pub other_ctx: *mut ::std::os::raw::c_void,
    pub verify: X509_STORE_CTX_verify_fn,
    pub verify_cb: X509_STORE_CTX_verify_cb,
    pub get_issuer: X509_STORE_CTX_get_issuer_fn,
    pub check_issued: X509_STORE_CTX_check_issued_fn,
    pub check_revocation: X509_STORE_CTX_check_revocation_fn,
    pub get_crl: X509_STORE_CTX_get_crl_fn,
    pub check_crl: X509_STORE_CTX_check_crl_fn,
    pub cert_crl: X509_STORE_CTX_cert_crl_fn,
    pub check_policy: X509_STORE_CTX_check_policy_fn,
    pub lookup_certs: X509_STORE_CTX_lookup_certs_fn,
    pub lookup_crls: X509_STORE_CTX_lookup_crls_fn,
    pub cleanup: X509_STORE_CTX_cleanup_fn,
    pub valid: ::std::os::raw::c_int,
    pub last_untrusted: ::std::os::raw::c_int,
    pub chain: *mut stack_st_X509,
    pub tree: *mut X509_POLICY_TREE,
    pub explicit_policy: ::std::os::raw::c_int,
    pub error_depth: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub current_cert: *mut X509,
    pub current_issuer: *mut X509,
    pub current_crl: *mut X509_CRL,
    pub current_crl_score: ::std::os::raw::c_int,
    pub current_reasons: ::std::os::raw::c_uint,
    pub parent: *mut X509_STORE_CTX,
    pub ex_data: CRYPTO_EX_DATA,
}
#[test]
fn bindgen_test_layout_x509_store_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_store_ctx_st>(),
        232usize,
        concat!("Size of: ", stringify!(x509_store_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_store_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_store_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).cert as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).untrusted as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(untrusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).crls as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(crls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).param as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).other_ctx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(other_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).verify as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).verify_cb as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(verify_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).get_issuer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(get_issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).check_issued as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(check_issued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).check_revocation as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(check_revocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).get_crl as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(get_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).check_crl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(check_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).cert_crl as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(cert_crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).check_policy as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(check_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).lookup_certs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(lookup_certs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).lookup_crls as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(lookup_crls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).cleanup as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).valid as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).last_untrusted as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(last_untrusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).chain as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).tree as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).explicit_policy as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(explicit_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).error_depth as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(error_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).error as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).current_cert as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(current_cert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).current_issuer as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(current_issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).current_crl as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(current_crl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).current_crl_score as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(current_crl_score)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x509_store_ctx_st>())).current_reasons as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(current_reasons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).parent as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_store_ctx_st>())).ex_data as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_store_ctx_st),
            "::",
            stringify!(ex_data)
        )
    );
}
impl Default for x509_store_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn X509_STORE_CTX_set_depth(ctx: *mut X509_STORE_CTX, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn X509_OBJECT_idx_by_subject(
        h: *mut stack_st_X509_OBJECT,
        type_: ::std::os::raw::c_int,
        name: *mut X509_NAME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_OBJECT_retrieve_by_subject(
        h: *mut stack_st_X509_OBJECT,
        type_: ::std::os::raw::c_int,
        name: *mut X509_NAME,
    ) -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_OBJECT_retrieve_match(
        h: *mut stack_st_X509_OBJECT,
        x: *mut X509_OBJECT,
    ) -> *mut X509_OBJECT;
}
extern "C" {
    pub fn X509_OBJECT_up_ref_count(a: *mut X509_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_OBJECT_free_contents(a: *mut X509_OBJECT);
}
extern "C" {
    pub fn X509_OBJECT_get_type(a: *const X509_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_OBJECT_get0_X509(a: *const X509_OBJECT) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_new() -> *mut X509_STORE;
}
extern "C" {
    pub fn X509_STORE_up_ref(store: *mut X509_STORE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_free(v: *mut X509_STORE);
}
extern "C" {
    pub fn X509_STORE_get0_objects(st: *mut X509_STORE) -> *mut stack_st_X509_OBJECT;
}
extern "C" {
    pub fn X509_STORE_get1_certs(st: *mut X509_STORE_CTX, nm: *mut X509_NAME)
        -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_get1_crls(
        st: *mut X509_STORE_CTX,
        nm: *mut X509_NAME,
    ) -> *mut stack_st_X509_CRL;
}
extern "C" {
    pub fn X509_STORE_set_flags(
        ctx: *mut X509_STORE,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_set_purpose(
        ctx: *mut X509_STORE,
        purpose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_set_trust(
        ctx: *mut X509_STORE,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_set1_param(
        ctx: *mut X509_STORE,
        pm: *mut X509_VERIFY_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_get0_param(ctx: *mut X509_STORE) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_STORE_set0_additional_untrusted(
        ctx: *mut X509_STORE,
        untrusted: *mut stack_st_X509,
    );
}
extern "C" {
    pub fn X509_STORE_set_verify(ctx: *mut X509_STORE, verify: X509_STORE_CTX_verify_fn);
}
extern "C" {
    pub fn X509_STORE_CTX_set_verify(ctx: *mut X509_STORE_CTX, verify: X509_STORE_CTX_verify_fn);
}
extern "C" {
    pub fn X509_STORE_get_verify(ctx: *mut X509_STORE) -> X509_STORE_CTX_verify_fn;
}
extern "C" {
    pub fn X509_STORE_set_verify_cb(ctx: *mut X509_STORE, verify_cb: X509_STORE_CTX_verify_cb);
}
extern "C" {
    pub fn X509_STORE_get_verify_cb(ctx: *mut X509_STORE) -> X509_STORE_CTX_verify_cb;
}
extern "C" {
    pub fn X509_STORE_set_get_issuer(
        ctx: *mut X509_STORE,
        get_issuer: X509_STORE_CTX_get_issuer_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_get_issuer(ctx: *mut X509_STORE) -> X509_STORE_CTX_get_issuer_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_issued(
        ctx: *mut X509_STORE,
        check_issued: X509_STORE_CTX_check_issued_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_check_issued(ctx: *mut X509_STORE) -> X509_STORE_CTX_check_issued_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_revocation(
        ctx: *mut X509_STORE,
        check_revocation: X509_STORE_CTX_check_revocation_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_check_revocation(
        ctx: *mut X509_STORE,
    ) -> X509_STORE_CTX_check_revocation_fn;
}
extern "C" {
    pub fn X509_STORE_set_get_crl(ctx: *mut X509_STORE, get_crl: X509_STORE_CTX_get_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_get_crl(ctx: *mut X509_STORE) -> X509_STORE_CTX_get_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_check_crl(ctx: *mut X509_STORE, check_crl: X509_STORE_CTX_check_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_check_crl(ctx: *mut X509_STORE) -> X509_STORE_CTX_check_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_cert_crl(ctx: *mut X509_STORE, cert_crl: X509_STORE_CTX_cert_crl_fn);
}
extern "C" {
    pub fn X509_STORE_get_cert_crl(ctx: *mut X509_STORE) -> X509_STORE_CTX_cert_crl_fn;
}
extern "C" {
    pub fn X509_STORE_set_lookup_certs(
        ctx: *mut X509_STORE,
        lookup_certs: X509_STORE_CTX_lookup_certs_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_lookup_certs(ctx: *mut X509_STORE) -> X509_STORE_CTX_lookup_certs_fn;
}
extern "C" {
    pub fn X509_STORE_set_lookup_crls(
        ctx: *mut X509_STORE,
        lookup_crls: X509_STORE_CTX_lookup_crls_fn,
    );
}
extern "C" {
    pub fn X509_STORE_get_lookup_crls(ctx: *mut X509_STORE) -> X509_STORE_CTX_lookup_crls_fn;
}
extern "C" {
    pub fn X509_STORE_set_cleanup(ctx: *mut X509_STORE, cleanup: X509_STORE_CTX_cleanup_fn);
}
extern "C" {
    pub fn X509_STORE_get_cleanup(ctx: *mut X509_STORE) -> X509_STORE_CTX_cleanup_fn;
}
extern "C" {
    pub fn X509_STORE_CTX_new() -> *mut X509_STORE_CTX;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_issuer(
        issuer: *mut *mut X509,
        ctx: *mut X509_STORE_CTX,
        x: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_zero(ctx: *mut X509_STORE_CTX);
}
extern "C" {
    pub fn X509_STORE_CTX_free(ctx: *mut X509_STORE_CTX);
}
extern "C" {
    pub fn X509_STORE_CTX_init(
        ctx: *mut X509_STORE_CTX,
        store: *mut X509_STORE,
        x509: *mut X509,
        chain: *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_trusted_stack(ctx: *mut X509_STORE_CTX, sk: *mut stack_st_X509);
}
extern "C" {
    pub fn X509_STORE_CTX_cleanup(ctx: *mut X509_STORE_CTX);
}
extern "C" {
    pub fn X509_STORE_CTX_get0_store(ctx: *mut X509_STORE_CTX) -> *mut X509_STORE;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_cert(ctx: *mut X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_add_lookup(
        v: *mut X509_STORE,
        m: *mut X509_LOOKUP_METHOD,
    ) -> *mut X509_LOOKUP;
}
extern "C" {
    pub fn X509_LOOKUP_hash_dir() -> *mut X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn X509_LOOKUP_file() -> *mut X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn X509_STORE_add_cert(ctx: *mut X509_STORE, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_add_crl(ctx: *mut X509_STORE, x: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_get_by_subject(
        vs: *mut X509_STORE_CTX,
        type_: ::std::os::raw::c_int,
        name: *mut X509_NAME,
        ret: *mut X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_ctrl(
        ctx: *mut X509_LOOKUP,
        cmd: ::std::os::raw::c_int,
        argc: *const ::std::os::raw::c_char,
        argl: ::std::os::raw::c_long,
        ret: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_load_cert_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_load_crl_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_load_cert_crl_file(
        ctx: *mut X509_LOOKUP,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_new(method: *mut X509_LOOKUP_METHOD) -> *mut X509_LOOKUP;
}
extern "C" {
    pub fn X509_LOOKUP_free(ctx: *mut X509_LOOKUP);
}
extern "C" {
    pub fn X509_LOOKUP_init(ctx: *mut X509_LOOKUP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_subject(
        ctx: *mut X509_LOOKUP,
        type_: ::std::os::raw::c_int,
        name: *mut X509_NAME,
        ret: *mut X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_issuer_serial(
        ctx: *mut X509_LOOKUP,
        type_: ::std::os::raw::c_int,
        name: *mut X509_NAME,
        serial: *mut ASN1_INTEGER,
        ret: *mut X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_fingerprint(
        ctx: *mut X509_LOOKUP,
        type_: ::std::os::raw::c_int,
        bytes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_by_alias(
        ctx: *mut X509_LOOKUP,
        type_: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ret: *mut X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_LOOKUP_shutdown(ctx: *mut X509_LOOKUP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_load_locations(
        ctx: *mut X509_STORE,
        file: *const ::std::os::raw::c_char,
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_set_default_paths(ctx: *mut X509_STORE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_ex_data(
        ctx: *mut X509_STORE_CTX,
        idx: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_ex_data(
        ctx: *mut X509_STORE_CTX,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_STORE_CTX_get_error(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_error(ctx: *mut X509_STORE_CTX, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn X509_STORE_CTX_get_error_depth(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get_current_cert(ctx: *mut X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_current_issuer(ctx: *mut X509_STORE_CTX) -> *mut X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_current_crl(ctx: *mut X509_STORE_CTX) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_parent_ctx(ctx: *mut X509_STORE_CTX) -> *mut X509_STORE_CTX;
}
extern "C" {
    pub fn X509_STORE_CTX_get_chain(ctx: *mut X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_chain(ctx: *mut X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_get1_chain(ctx: *mut X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_set_cert(c: *mut X509_STORE_CTX, x: *mut X509);
}
extern "C" {
    pub fn X509_STORE_CTX_set_chain(c: *mut X509_STORE_CTX, sk: *mut stack_st_X509);
}
extern "C" {
    pub fn X509_STORE_CTX_get0_untrusted(ctx: *mut X509_STORE_CTX) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_crls(c: *mut X509_STORE_CTX, sk: *mut stack_st_X509_CRL);
}
extern "C" {
    pub fn X509_STORE_CTX_set_purpose(
        ctx: *mut X509_STORE_CTX,
        purpose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_trust(
        ctx: *mut X509_STORE_CTX,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_purpose_inherit(
        ctx: *mut X509_STORE_CTX,
        def_purpose: ::std::os::raw::c_int,
        purpose: ::std::os::raw::c_int,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_set_flags(ctx: *mut X509_STORE_CTX, flags: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn X509_STORE_CTX_set_time(
        ctx: *mut X509_STORE_CTX,
        flags: ::std::os::raw::c_ulong,
        t: time_t,
    );
}
extern "C" {
    pub fn X509_STORE_CTX_set_verify_cb(
        ctx: *mut X509_STORE_CTX,
        verify_cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut X509_STORE_CTX,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn X509_STORE_CTX_get0_policy_tree(ctx: *mut X509_STORE_CTX) -> *mut X509_POLICY_TREE;
}
extern "C" {
    pub fn X509_STORE_CTX_get_explicit_policy(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_STORE_CTX_get0_param(ctx: *mut X509_STORE_CTX) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_STORE_CTX_set0_param(ctx: *mut X509_STORE_CTX, param: *mut X509_VERIFY_PARAM);
}
extern "C" {
    pub fn X509_STORE_CTX_set_default(
        ctx: *mut X509_STORE_CTX,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_new() -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_free(param: *mut X509_VERIFY_PARAM);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_inherit(
        to: *mut X509_VERIFY_PARAM,
        from: *const X509_VERIFY_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1(
        to: *mut X509_VERIFY_PARAM,
        from: *const X509_VERIFY_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_name(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_flags(
        param: *mut X509_VERIFY_PARAM,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_clear_flags(
        param: *mut X509_VERIFY_PARAM,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_flags(param: *mut X509_VERIFY_PARAM) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_purpose(
        param: *mut X509_VERIFY_PARAM,
        purpose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_trust(
        param: *mut X509_VERIFY_PARAM,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_depth(param: *mut X509_VERIFY_PARAM, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_time(param: *mut X509_VERIFY_PARAM, t: time_t);
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add0_policy(
        param: *mut X509_VERIFY_PARAM,
        policy: *mut ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_policies(
        param: *mut X509_VERIFY_PARAM,
        policies: *mut stack_st_ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_host(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add1_host(
        param: *mut X509_VERIFY_PARAM,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set_hostflags(
        param: *mut X509_VERIFY_PARAM,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_peername(
        arg1: *mut X509_VERIFY_PARAM,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_email(
        param: *mut X509_VERIFY_PARAM,
        email: *const ::std::os::raw::c_char,
        emaillen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_ip(
        param: *mut X509_VERIFY_PARAM,
        ip: *const ::std::os::raw::c_uchar,
        iplen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_set1_ip_asc(
        param: *mut X509_VERIFY_PARAM,
        ipasc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_depth(param: *const X509_VERIFY_PARAM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0_name(
        param: *const X509_VERIFY_PARAM,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_add0_table(param: *mut X509_VERIFY_PARAM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_get0(id: ::std::os::raw::c_int) -> *const X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_lookup(
        name: *const ::std::os::raw::c_char,
    ) -> *const X509_VERIFY_PARAM;
}
extern "C" {
    pub fn X509_VERIFY_PARAM_table_cleanup();
}
extern "C" {
    pub fn X509_policy_check(
        ptree: *mut *mut X509_POLICY_TREE,
        pexplicit_policy: *mut ::std::os::raw::c_int,
        certs: *mut stack_st_X509,
        policy_oids: *mut stack_st_ASN1_OBJECT,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_policy_tree_free(tree: *mut X509_POLICY_TREE);
}
extern "C" {
    pub fn X509_policy_tree_level_count(tree: *const X509_POLICY_TREE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_policy_tree_get0_level(
        tree: *const X509_POLICY_TREE,
        i: ::std::os::raw::c_int,
    ) -> *mut X509_POLICY_LEVEL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_POLICY_NODE {
    _unused: [u8; 0],
}
extern "C" {
    pub fn X509_policy_tree_get0_policies(
        tree: *const X509_POLICY_TREE,
    ) -> *mut stack_st_X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_tree_get0_user_policies(
        tree: *const X509_POLICY_TREE,
    ) -> *mut stack_st_X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_level_node_count(level: *mut X509_POLICY_LEVEL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_policy_level_get0_node(
        level: *mut X509_POLICY_LEVEL,
        i: ::std::os::raw::c_int,
    ) -> *mut X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_policy_node_get0_policy(node: *const X509_POLICY_NODE) -> *const ASN1_OBJECT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_POLICYQUALINFO {
    _unused: [u8; 0],
}
extern "C" {
    pub fn X509_policy_node_get0_qualifiers(
        node: *const X509_POLICY_NODE,
    ) -> *mut stack_st_POLICYQUALINFO;
}
extern "C" {
    pub fn X509_policy_node_get0_parent(node: *const X509_POLICY_NODE) -> *const X509_POLICY_NODE;
}
extern "C" {
    pub fn X509_get_version(x509: *const X509) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn X509_get0_serialNumber(x509: *const X509) -> *const ASN1_INTEGER;
}
extern "C" {
    pub fn X509_get0_notBefore(x509: *const X509) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_get0_notAfter(x509: *const X509) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_set1_notBefore(x509: *mut X509, tm: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set1_notAfter(x509: *mut X509, tm: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_getm_notBefore(x509: *mut X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_getm_notAfter(x: *mut X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_get_notBefore(x509: *const X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_get_notAfter(x509: *const X509) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_set_notBefore(x509: *mut X509, tm: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set_notAfter(x509: *mut X509, tm: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get0_uids(
        x509: *const X509,
        out_issuer_uid: *mut *const ASN1_BIT_STRING,
        out_subject_uid: *mut *const ASN1_BIT_STRING,
    );
}
extern "C" {
    pub fn X509_get_cert_info(x509: *const X509) -> *mut X509_CINF;
}
extern "C" {
    pub fn X509_get_pathlen(x509: *mut X509) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn X509_REQ_get_version(req: *const X509_REQ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn X509_REQ_get_subject_name(req: *const X509_REQ) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_CRL_get_version(crl: *const X509_CRL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn X509_CRL_get0_lastUpdate(crl: *const X509_CRL) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get0_nextUpdate(crl: *const X509_CRL) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_set1_lastUpdate(
        crl: *mut X509_CRL,
        tm: *const ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_set1_nextUpdate(
        crl: *mut X509_CRL,
        tm: *const ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_lastUpdate(crl: *mut X509_CRL) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get_nextUpdate(crl: *mut X509_CRL) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_CRL_get_issuer(crl: *const X509_CRL) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_CRL_get_REVOKED(crl: *mut X509_CRL) -> *mut stack_st_X509_REVOKED;
}
extern "C" {
    pub fn X509_CRL_get0_extensions(crl: *const X509_CRL) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_CINF_set_modified(cinf: *mut X509_CINF);
}
extern "C" {
    pub fn X509_CINF_get_signature(cinf: *const X509_CINF) -> *const X509_ALGOR;
}
extern "C" {
    pub fn X509_SIG_get0(
        sig: *const X509_SIG,
        out_alg: *mut *const X509_ALGOR,
        out_digest: *mut *const ASN1_OCTET_STRING,
    );
}
extern "C" {
    pub fn X509_SIG_getm(
        sig: *mut X509_SIG,
        out_alg: *mut *mut X509_ALGOR,
        out_digest: *mut *mut ASN1_OCTET_STRING,
    );
}
extern "C" {
    pub fn X509_CRL_set_default_method(meth: *const X509_CRL_METHOD);
}
extern "C" {
    pub fn X509_CRL_METHOD_new(
        crl_init: ::std::option::Option<
            unsafe extern "C" fn(crl: *mut X509_CRL) -> ::std::os::raw::c_int,
        >,
        crl_free: ::std::option::Option<
            unsafe extern "C" fn(crl: *mut X509_CRL) -> ::std::os::raw::c_int,
        >,
        crl_lookup: ::std::option::Option<
            unsafe extern "C" fn(
                crl: *mut X509_CRL,
                ret: *mut *mut X509_REVOKED,
                ser: *mut ASN1_INTEGER,
                issuer: *mut X509_NAME,
            ) -> ::std::os::raw::c_int,
        >,
        crl_verify: ::std::option::Option<
            unsafe extern "C" fn(crl: *mut X509_CRL, pk: *mut EVP_PKEY) -> ::std::os::raw::c_int,
        >,
    ) -> *mut X509_CRL_METHOD;
}
extern "C" {
    pub fn X509_CRL_METHOD_free(m: *mut X509_CRL_METHOD);
}
extern "C" {
    pub fn X509_CRL_set_meth_data(crl: *mut X509_CRL, dat: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn X509_CRL_get_meth_data(crl: *mut X509_CRL) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_get_X509_PUBKEY(x509: *const X509) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_verify_cert_error_string(
        err: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_verify(x509: *mut X509, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_verify(req: *mut X509_REQ, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_verify(crl: *mut X509_CRL, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_verify(
        spki: *mut NETSCAPE_SPKI,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_b64_decode(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn NETSCAPE_SPKI_b64_encode(spki: *mut NETSCAPE_SPKI) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn NETSCAPE_SPKI_get_pubkey(spki: *mut NETSCAPE_SPKI) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn NETSCAPE_SPKI_set_pubkey(
        spki: *mut NETSCAPE_SPKI,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_signature_dump(
        bio: *mut BIO,
        sig: *const ASN1_STRING,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_signature_print(
        bio: *mut BIO,
        alg: *const X509_ALGOR,
        sig: *const ASN1_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_sign(
        x509: *mut X509,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_sign_ctx(x509: *mut X509, ctx: *mut EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_sign(
        req: *mut X509_REQ,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_sign_ctx(req: *mut X509_REQ, ctx: *mut EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_sign(
        crl: *mut X509_CRL,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_sign_ctx(crl: *mut X509_CRL, ctx: *mut EVP_MD_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NETSCAPE_SPKI_sign(
        spki: *mut NETSCAPE_SPKI,
        pkey: *mut EVP_PKEY,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_pubkey_digest(
        x509: *const X509,
        md: *const EVP_MD,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_digest(
        x509: *const X509,
        md: *const EVP_MD,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_digest(
        crl: *const X509_CRL,
        md: *const EVP_MD,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_digest(
        req: *const X509_REQ,
        md: *const EVP_MD,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_digest(
        name: *const X509_NAME,
        md: *const EVP_MD,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_parse_from_buffer(buf: *mut CRYPTO_BUFFER) -> *mut X509;
}
extern "C" {
    pub fn d2i_X509_fp(fp: *mut FILE, x509: *mut *mut X509) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509_fp(fp: *mut FILE, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_X509_CRL_fp(fp: *mut FILE, crl: *mut *mut X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL_fp(fp: *mut FILE, crl: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_X509_REQ_fp(fp: *mut FILE, req: *mut *mut X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ_fp(fp: *mut FILE, req: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSAPrivateKey_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey_fp(fp: *mut FILE, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSAPublicKey_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey_fp(fp: *mut FILE, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY_fp(fp: *mut FILE, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY_fp(fp: *mut FILE, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY_fp(fp: *mut FILE, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY_fp(fp: *mut FILE, dsa: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey_fp(fp: *mut FILE, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey_fp(fp: *mut FILE, dsa: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY_fp(fp: *mut FILE, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_EC_PUBKEY_fp(fp: *mut FILE, eckey: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_ECPrivateKey_fp(fp: *mut FILE, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECPrivateKey_fp(fp: *mut FILE, eckey: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_fp(fp: *mut FILE, p8: *mut *mut X509_SIG) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_PKCS8_fp(fp: *mut FILE, p8: *mut X509_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO_fp(
        fp: *mut FILE,
        p8inf: *mut *mut PKCS8_PRIV_KEY_INFO,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO_fp(
        fp: *mut FILE,
        p8inf: *mut PKCS8_PRIV_KEY_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKeyInfo_fp(fp: *mut FILE, key: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PrivateKey_fp(fp: *mut FILE, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey_fp(fp: *mut FILE, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PUBKEY_fp(fp: *mut FILE, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY_fp(fp: *mut FILE, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_X509_bio(bp: *mut BIO, x509: *mut *mut X509) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509_bio(bp: *mut BIO, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_X509_CRL_bio(bp: *mut BIO, crl: *mut *mut X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL_bio(bp: *mut BIO, crl: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_X509_REQ_bio(bp: *mut BIO, req: *mut *mut X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ_bio(bp: *mut BIO, req: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSAPrivateKey_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPrivateKey_bio(bp: *mut BIO, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSAPublicKey_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSAPublicKey_bio(bp: *mut BIO, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_RSA_PUBKEY_bio(bp: *mut BIO, rsa: *mut *mut RSA) -> *mut RSA;
}
extern "C" {
    pub fn i2d_RSA_PUBKEY_bio(bp: *mut BIO, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSA_PUBKEY_bio(bp: *mut BIO, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSA_PUBKEY_bio(bp: *mut BIO, dsa: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_DSAPrivateKey_bio(bp: *mut BIO, dsa: *mut *mut DSA) -> *mut DSA;
}
extern "C" {
    pub fn i2d_DSAPrivateKey_bio(bp: *mut BIO, dsa: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_EC_PUBKEY_bio(bp: *mut BIO, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_EC_PUBKEY_bio(bp: *mut BIO, eckey: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_ECPrivateKey_bio(bp: *mut BIO, eckey: *mut *mut EC_KEY) -> *mut EC_KEY;
}
extern "C" {
    pub fn i2d_ECPrivateKey_bio(bp: *mut BIO, eckey: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_bio(bp: *mut BIO, p8: *mut *mut X509_SIG) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_PKCS8_bio(bp: *mut BIO, p8: *mut X509_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO_bio(
        bp: *mut BIO,
        p8inf: *mut *mut PKCS8_PRIV_KEY_INFO,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO_bio(
        bp: *mut BIO,
        p8inf: *mut PKCS8_PRIV_KEY_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKeyInfo_bio(bp: *mut BIO, key: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PrivateKey_bio(bp: *mut BIO, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PrivateKey_bio(bp: *mut BIO, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PUBKEY_bio(bp: *mut BIO, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PUBKEY_bio(bp: *mut BIO, a: *mut *mut EVP_PKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn d2i_DHparams_bio(bp: *mut BIO, dh: *mut *mut DH) -> *mut DH;
}
extern "C" {
    pub fn i2d_DHparams_bio(bp: *mut BIO, dh: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_dup(x509: *mut X509) -> *mut X509;
}
extern "C" {
    pub fn X509_ATTRIBUTE_dup(xa: *mut X509_ATTRIBUTE) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_EXTENSION_dup(ex: *mut X509_EXTENSION) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_dup(crl: *mut X509_CRL) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_REVOKED_dup(rev: *mut X509_REVOKED) -> *mut X509_REVOKED;
}
extern "C" {
    pub fn X509_REQ_dup(req: *mut X509_REQ) -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_ALGOR_dup(xn: *mut X509_ALGOR) -> *mut X509_ALGOR;
}
extern "C" {
    pub fn X509_ALGOR_set0(
        alg: *mut X509_ALGOR,
        aobj: *const ASN1_OBJECT,
        ptype: ::std::os::raw::c_int,
        pval: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_ALGOR_get0(
        paobj: *mut *const ASN1_OBJECT,
        pptype: *mut ::std::os::raw::c_int,
        ppval: *mut *const ::std::os::raw::c_void,
        algor: *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_ALGOR_set_md(alg: *mut X509_ALGOR, md: *const EVP_MD);
}
extern "C" {
    pub fn X509_ALGOR_cmp(a: *const X509_ALGOR, b: *const X509_ALGOR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_dup(xn: *mut X509_NAME) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_NAME_ENTRY_dup(ne: *mut X509_NAME_ENTRY) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set(ne: *const X509_NAME_ENTRY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get0_der(
        nm: *mut X509_NAME,
        pder: *mut *const ::std::os::raw::c_uchar,
        pderlen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_cmp_time(s: *const ASN1_TIME, t: *mut time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_cmp_current_time(s: *const ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_time_adj(
        s: *mut ASN1_TIME,
        adj: ::std::os::raw::c_long,
        t: *mut time_t,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_time_adj_ex(
        s: *mut ASN1_TIME,
        offset_day: ::std::os::raw::c_int,
        offset_sec: ::std::os::raw::c_long,
        t: *mut time_t,
    ) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_gmtime_adj(s: *mut ASN1_TIME, adj: ::std::os::raw::c_long) -> *mut ASN1_TIME;
}
extern "C" {
    pub fn X509_get_default_cert_area() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_dir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_file() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_dir_env() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_get_default_cert_file_env() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_get_default_private_dir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_to_X509_REQ(x: *mut X509, pkey: *mut EVP_PKEY, md: *const EVP_MD) -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_REQ_to_X509(
        r: *mut X509_REQ,
        days: ::std::os::raw::c_int,
        pkey: *mut EVP_PKEY,
    ) -> *mut X509;
}
extern "C" {
    pub fn d2i_X509_ALGORS(
        a: *mut *mut X509_ALGORS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_ALGORS;
}
extern "C" {
    pub fn i2d_X509_ALGORS(
        a: *mut X509_ALGORS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_ALGORS_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_VAL_new() -> *mut X509_VAL;
}
extern "C" {
    pub fn X509_VAL_free(a: *mut X509_VAL);
}
extern "C" {
    pub fn d2i_X509_VAL(
        a: *mut *mut X509_VAL,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_VAL;
}
extern "C" {
    pub fn i2d_X509_VAL(
        a: *mut X509_VAL,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_VAL_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_PUBKEY_new() -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn X509_PUBKEY_free(a: *mut X509_PUBKEY);
}
extern "C" {
    pub fn d2i_X509_PUBKEY(
        a: *mut *mut X509_PUBKEY,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_PUBKEY;
}
extern "C" {
    pub fn i2d_X509_PUBKEY(
        a: *mut X509_PUBKEY,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_PUBKEY_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_PUBKEY_set(x: *mut *mut X509_PUBKEY, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_get(key: *mut X509_PUBKEY) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_SIG_new() -> *mut X509_SIG;
}
extern "C" {
    pub fn X509_SIG_free(a: *mut X509_SIG);
}
extern "C" {
    pub fn d2i_X509_SIG(
        a: *mut *mut X509_SIG,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn i2d_X509_SIG(
        a: *mut X509_SIG,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_SIG_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_REQ_INFO_new() -> *mut X509_REQ_INFO;
}
extern "C" {
    pub fn X509_REQ_INFO_free(a: *mut X509_REQ_INFO);
}
extern "C" {
    pub fn d2i_X509_REQ_INFO(
        a: *mut *mut X509_REQ_INFO,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_REQ_INFO;
}
extern "C" {
    pub fn i2d_X509_REQ_INFO(
        a: *mut X509_REQ_INFO,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_REQ_INFO_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_REQ_new() -> *mut X509_REQ;
}
extern "C" {
    pub fn X509_REQ_free(a: *mut X509_REQ);
}
extern "C" {
    pub fn d2i_X509_REQ(
        a: *mut *mut X509_REQ,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn i2d_X509_REQ(
        a: *mut X509_REQ,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_REQ_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_ATTRIBUTE_new() -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_free(a: *mut X509_ATTRIBUTE);
}
extern "C" {
    pub fn d2i_X509_ATTRIBUTE(
        a: *mut *mut X509_ATTRIBUTE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn i2d_X509_ATTRIBUTE(
        a: *mut X509_ATTRIBUTE,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_ATTRIBUTE_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create(
        nid: ::std::os::raw::c_int,
        atrtype: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_EXTENSION_new() -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_free(a: *mut X509_EXTENSION);
}
extern "C" {
    pub fn d2i_X509_EXTENSION(
        a: *mut *mut X509_EXTENSION,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn i2d_X509_EXTENSION(
        a: *mut X509_EXTENSION,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_EXTENSION_it: ASN1_ITEM;
}
extern "C" {
    pub fn d2i_X509_EXTENSIONS(
        a: *mut *mut X509_EXTENSIONS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_EXTENSIONS;
}
extern "C" {
    pub fn i2d_X509_EXTENSIONS(
        a: *mut X509_EXTENSIONS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_EXTENSIONS_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_ENTRY_new() -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_free(a: *mut X509_NAME_ENTRY);
}
extern "C" {
    pub fn d2i_X509_NAME_ENTRY(
        a: *mut *mut X509_NAME_ENTRY,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn i2d_X509_NAME_ENTRY(
        a: *mut X509_NAME_ENTRY,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_NAME_ENTRY_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_new() -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_NAME_free(a: *mut X509_NAME);
}
extern "C" {
    pub fn d2i_X509_NAME(
        a: *mut *mut X509_NAME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_NAME;
}
extern "C" {
    pub fn i2d_X509_NAME(
        a: *mut X509_NAME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_NAME_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_NAME_set(xn: *mut *mut X509_NAME, name: *mut X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CINF_new() -> *mut X509_CINF;
}
extern "C" {
    pub fn X509_CINF_free(a: *mut X509_CINF);
}
extern "C" {
    pub fn d2i_X509_CINF(
        a: *mut *mut X509_CINF,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_CINF;
}
extern "C" {
    pub fn i2d_X509_CINF(
        a: *mut X509_CINF,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_CINF_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_new() -> *mut X509;
}
extern "C" {
    pub fn X509_free(a: *mut X509);
}
extern "C" {
    pub fn d2i_X509(
        a: *mut *mut X509,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509;
}
extern "C" {
    pub fn i2d_X509(a: *mut X509, out: *mut *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_CERT_AUX_new() -> *mut X509_CERT_AUX;
}
extern "C" {
    pub fn X509_CERT_AUX_free(a: *mut X509_CERT_AUX);
}
extern "C" {
    pub fn d2i_X509_CERT_AUX(
        a: *mut *mut X509_CERT_AUX,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_CERT_AUX;
}
extern "C" {
    pub fn i2d_X509_CERT_AUX(
        a: *mut X509_CERT_AUX,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_CERT_AUX_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_up_ref(x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set_ex_data(
        r: *mut X509,
        idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ex_data(
        r: *mut X509,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn i2d_X509_AUX(
        a: *mut X509,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_X509_AUX(
        a: *mut *mut X509,
        pp: *mut *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_long,
    ) -> *mut X509;
}
extern "C" {
    pub fn i2d_re_X509_tbs(
        x509: *mut X509,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_X509_tbs(
        x509: *mut X509,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set1_signature_algo(
        x509: *mut X509,
        algo: *const X509_ALGOR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set1_signature_value(
        x509: *mut X509,
        sig: *const u8,
        sig_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get0_signature(
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
        x: *const X509,
    );
}
extern "C" {
    pub fn X509_get_signature_nid(x: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_alias_set1(
        x: *mut X509,
        name: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_keyid_set1(
        x: *mut X509,
        id: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_alias_get0(
        x: *mut X509,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn X509_keyid_get0(
        x: *mut X509,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn X509_TRUST_set_default(
        trust: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut X509,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            trust: ::std::os::raw::c_int,
            arg1: *mut X509,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn X509_TRUST_set(
        t: *mut ::std::os::raw::c_int,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_add1_trust_object(x: *mut X509, obj: *mut ASN1_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_add1_reject_object(x: *mut X509, obj: *mut ASN1_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_trust_clear(x: *mut X509);
}
extern "C" {
    pub fn X509_reject_clear(x: *mut X509);
}
extern "C" {
    pub fn X509_REVOKED_new() -> *mut X509_REVOKED;
}
extern "C" {
    pub fn X509_REVOKED_free(a: *mut X509_REVOKED);
}
extern "C" {
    pub fn d2i_X509_REVOKED(
        a: *mut *mut X509_REVOKED,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_REVOKED;
}
extern "C" {
    pub fn i2d_X509_REVOKED(
        a: *mut X509_REVOKED,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_REVOKED_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_INFO_new() -> *mut X509_CRL_INFO;
}
extern "C" {
    pub fn X509_CRL_INFO_free(a: *mut X509_CRL_INFO);
}
extern "C" {
    pub fn d2i_X509_CRL_INFO(
        a: *mut *mut X509_CRL_INFO,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_CRL_INFO;
}
extern "C" {
    pub fn i2d_X509_CRL_INFO(
        a: *mut X509_CRL_INFO,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_CRL_INFO_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_new() -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_CRL_free(a: *mut X509_CRL);
}
extern "C" {
    pub fn d2i_X509_CRL(
        a: *mut *mut X509_CRL,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn i2d_X509_CRL(
        a: *mut X509_CRL,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static X509_CRL_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_CRL_add0_revoked(
        crl: *mut X509_CRL,
        rev: *mut X509_REVOKED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get0_by_serial(
        crl: *mut X509_CRL,
        ret: *mut *mut X509_REVOKED,
        serial: *mut ASN1_INTEGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get0_by_cert(
        crl: *mut X509_CRL,
        ret: *mut *mut X509_REVOKED,
        x: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PKEY_new() -> *mut X509_PKEY;
}
extern "C" {
    pub fn X509_PKEY_free(a: *mut X509_PKEY);
}
extern "C" {
    pub fn NETSCAPE_SPKI_new() -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn NETSCAPE_SPKI_free(a: *mut NETSCAPE_SPKI);
}
extern "C" {
    pub fn d2i_NETSCAPE_SPKI(
        a: *mut *mut NETSCAPE_SPKI,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut NETSCAPE_SPKI;
}
extern "C" {
    pub fn i2d_NETSCAPE_SPKI(
        a: *mut NETSCAPE_SPKI,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static NETSCAPE_SPKI_it: ASN1_ITEM;
}
extern "C" {
    pub fn NETSCAPE_SPKAC_new() -> *mut NETSCAPE_SPKAC;
}
extern "C" {
    pub fn NETSCAPE_SPKAC_free(a: *mut NETSCAPE_SPKAC);
}
extern "C" {
    pub fn d2i_NETSCAPE_SPKAC(
        a: *mut *mut NETSCAPE_SPKAC,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut NETSCAPE_SPKAC;
}
extern "C" {
    pub fn i2d_NETSCAPE_SPKAC(
        a: *mut NETSCAPE_SPKAC,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static NETSCAPE_SPKAC_it: ASN1_ITEM;
}
extern "C" {
    pub fn X509_INFO_new() -> *mut X509_INFO;
}
extern "C" {
    pub fn X509_INFO_free(a: *mut X509_INFO);
}
extern "C" {
    pub fn X509_NAME_oneline(
        a: *const X509_NAME,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ASN1_digest(
        i2d: i2d_of_void,
        type_: *const EVP_MD,
        data: *mut ::std::os::raw::c_char,
        md: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_digest(
        it: *const ASN1_ITEM,
        type_: *const EVP_MD,
        data: *mut ::std::os::raw::c_void,
        md: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_verify(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *mut ::std::os::raw::c_void,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_sign(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        data: *mut ::std::os::raw::c_void,
        pkey: *mut EVP_PKEY,
        type_: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ASN1_item_sign_ctx(
        it: *const ASN1_ITEM,
        algor1: *mut X509_ALGOR,
        algor2: *mut X509_ALGOR,
        signature: *mut ASN1_BIT_STRING,
        asn: *mut ::std::os::raw::c_void,
        ctx: *mut EVP_MD_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set_version(x: *mut X509, version: ::std::os::raw::c_long)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_set_serialNumber(x: *mut X509, serial: *mut ASN1_INTEGER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_serialNumber(x: *mut X509) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn X509_set_issuer_name(x: *mut X509, name: *mut X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_issuer_name(a: *const X509) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_set_subject_name(x: *mut X509, name: *mut X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_subject_name(a: *const X509) -> *mut X509_NAME;
}
extern "C" {
    pub fn X509_set_pubkey(x: *mut X509, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_pubkey(x: *mut X509) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_get0_pubkey_bitstr(x: *const X509) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn X509_get0_extensions(x: *const X509) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_get0_tbs_sigalg(x: *const X509) -> *const X509_ALGOR;
}
extern "C" {
    pub fn X509_REQ_set_version(
        x: *mut X509_REQ,
        version: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_set_subject_name(
        req: *mut X509_REQ,
        name: *mut X509_NAME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get0_signature(
        req: *const X509_REQ,
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_REQ_get_signature_nid(req: *const X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_re_X509_REQ_tbs(
        req: *mut X509_REQ,
        pp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_set_pubkey(x: *mut X509_REQ, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_pubkey(req: *mut X509_REQ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn X509_REQ_extension_nid(nid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_extension_nids() -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_set_extension_nids(nids: *const ::std::os::raw::c_int);
}
extern "C" {
    pub fn X509_REQ_get_extensions(req: *mut X509_REQ) -> *mut stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_REQ_add_extensions_nid(
        req: *mut X509_REQ,
        exts: *mut stack_st_X509_EXTENSION,
        nid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_add_extensions(
        req: *mut X509_REQ,
        exts: *mut stack_st_X509_EXTENSION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_count(req: *const X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_by_NID(
        req: *const X509_REQ,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr_by_OBJ(
        req: *const X509_REQ,
        obj: *mut ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_get_attr(
        req: *const X509_REQ,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_REQ_delete_attr(
        req: *mut X509_REQ,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_REQ_add1_attr(
        req: *mut X509_REQ,
        attr: *mut X509_ATTRIBUTE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_OBJ(
        req: *mut X509_REQ,
        obj: *const ASN1_OBJECT,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_NID(
        req: *mut X509_REQ,
        nid: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_add1_attr_by_txt(
        req: *mut X509_REQ,
        attrname: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_set_version(
        x: *mut X509_CRL,
        version: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_set_issuer_name(
        x: *mut X509_CRL,
        name: *mut X509_NAME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_sort(crl: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_up_ref(crl: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get0_signature(
        crl: *const X509_CRL,
        psig: *mut *const ASN1_BIT_STRING,
        palg: *mut *const X509_ALGOR,
    );
}
extern "C" {
    pub fn X509_CRL_get_signature_nid(crl: *const X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_re_X509_CRL_tbs(
        crl: *mut X509_CRL,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_X509_CRL_tbs(
        crl: *mut X509_CRL,
        outp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_serialNumber(revoked: *const X509_REVOKED) -> *const ASN1_INTEGER;
}
extern "C" {
    pub fn X509_REVOKED_set_serialNumber(
        revoked: *mut X509_REVOKED,
        serial: *const ASN1_INTEGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_revocationDate(revoked: *const X509_REVOKED) -> *const ASN1_TIME;
}
extern "C" {
    pub fn X509_REVOKED_set_revocationDate(
        revoked: *mut X509_REVOKED,
        tm: *const ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get0_extensions(r: *const X509_REVOKED) -> *const stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_diff(
        base: *mut X509_CRL,
        newer: *mut X509_CRL,
        skey: *mut EVP_PKEY,
        md: *const EVP_MD,
        flags: ::std::os::raw::c_uint,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn X509_REQ_check_private_key(
        x509: *mut X509_REQ,
        pkey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_private_key(x509: *mut X509, pkey: *const EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_chain_check_suiteb(
        perror_depth: *mut ::std::os::raw::c_int,
        x: *mut X509,
        chain: *mut stack_st_X509,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_check_suiteb(
        crl: *mut X509_CRL,
        pk: *mut EVP_PKEY,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_chain_up_ref(chain: *mut stack_st_X509) -> *mut stack_st_X509;
}
extern "C" {
    pub fn X509_issuer_and_serial_cmp(a: *const X509, b: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_issuer_and_serial_hash(a: *mut X509) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_issuer_name_cmp(a: *const X509, b: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_issuer_name_hash(a: *mut X509) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_subject_name_cmp(a: *const X509, b: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_subject_name_hash(x: *mut X509) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_issuer_name_hash_old(a: *mut X509) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_subject_name_hash_old(x: *mut X509) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_cmp(a: *const X509, b: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_cmp(a: *const X509_NAME, b: *const X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_hash(x: *mut X509_NAME) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_NAME_hash_old(x: *mut X509_NAME) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn X509_CRL_cmp(a: *const X509_CRL, b: *const X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_match(a: *const X509_CRL, b: *const X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_print_ex_fp(
        bp: *mut FILE,
        x: *mut X509,
        nmflag: ::std::os::raw::c_ulong,
        cflag: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_print_fp(bp: *mut FILE, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_print_fp(bp: *mut FILE, x: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_print_fp(bp: *mut FILE, req: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_print_ex_fp(
        fp: *mut FILE,
        nm: *const X509_NAME,
        indent: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_print(
        bp: *mut BIO,
        name: *const X509_NAME,
        obase: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_print_ex(
        out: *mut BIO,
        nm: *const X509_NAME,
        indent: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_print_ex(
        bp: *mut BIO,
        x: *mut X509,
        nmflag: ::std::os::raw::c_ulong,
        cflag: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_print(bp: *mut BIO, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_ocspid_print(bp: *mut BIO, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CERT_AUX_print(
        bp: *mut BIO,
        x: *mut X509_CERT_AUX,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_print(bp: *mut BIO, x: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_print_ex(
        bp: *mut BIO,
        x: *mut X509_REQ,
        nmflag: ::std::os::raw::c_ulong,
        cflag: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REQ_print(bp: *mut BIO, req: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_entry_count(name: *const X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get_text_by_NID(
        name: *const X509_NAME,
        nid: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get_text_by_OBJ(
        name: *const X509_NAME,
        obj: *const ASN1_OBJECT,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get_index_by_NID(
        name: *const X509_NAME,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get_index_by_OBJ(
        name: *const X509_NAME,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_get_entry(
        name: *const X509_NAME,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_delete_entry(
        name: *mut X509_NAME,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_add_entry(
        name: *mut X509_NAME,
        ne: *mut X509_NAME_ENTRY,
        loc: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_OBJ(
        name: *mut X509_NAME,
        obj: *mut ASN1_OBJECT,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        loc: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_NID(
        name: *mut X509_NAME,
        nid: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        loc: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_txt(
        ne: *mut *mut X509_NAME_ENTRY,
        field: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_NID(
        ne: *mut *mut X509_NAME_ENTRY,
        nid: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_add_entry_by_txt(
        name: *mut X509_NAME,
        field: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        loc: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_create_by_OBJ(
        ne: *mut *mut X509_NAME_ENTRY,
        obj: *const ASN1_OBJECT,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_NAME_ENTRY;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set_object(
        ne: *mut X509_NAME_ENTRY,
        obj: *const ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_set_data(
        ne: *mut X509_NAME_ENTRY,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_NAME_ENTRY_get_object(ne: *const X509_NAME_ENTRY) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_NAME_ENTRY_get_data(ne: *const X509_NAME_ENTRY) -> *mut ASN1_STRING;
}
extern "C" {
    pub fn X509v3_get_ext_count(x: *const stack_st_X509_EXTENSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_NID(
        x: *const stack_st_X509_EXTENSION,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_OBJ(
        x: *const stack_st_X509_EXTENSION,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509v3_get_ext_by_critical(
        x: *const stack_st_X509_EXTENSION,
        crit: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509v3_get_ext(
        x: *const stack_st_X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509v3_delete_ext(
        x: *mut stack_st_X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509v3_add_ext(
        x: *mut *mut stack_st_X509_EXTENSION,
        ex: *mut X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> *mut stack_st_X509_EXTENSION;
}
extern "C" {
    pub fn X509_get_ext_count(x: *const X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_NID(
        x: *const X509,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_OBJ(
        x: *const X509,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ext_by_critical(
        x: *const X509,
        crit: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ext(x: *const X509, loc: ::std::os::raw::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_delete_ext(x: *mut X509, loc: ::std::os::raw::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_add_ext(
        x: *mut X509,
        ex: *mut X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_ext_d2i(
        x509: *const X509,
        nid: ::std::os::raw::c_int,
        out_critical: *mut ::std::os::raw::c_int,
        out_idx: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_add1_ext_i2d(
        x: *mut X509,
        nid: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        crit: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_count(x: *const X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_NID(
        x: *const X509_CRL,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_OBJ(
        x: *const X509_CRL,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_by_critical(
        x: *const X509_CRL,
        crit: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext(x: *const X509_CRL, loc: ::std::os::raw::c_int) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_delete_ext(x: *mut X509_CRL, loc: ::std::os::raw::c_int)
        -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_CRL_add_ext(
        x: *mut X509_CRL,
        ex: *mut X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_CRL_get_ext_d2i(
        crl: *const X509_CRL,
        nid: ::std::os::raw::c_int,
        out_critical: *mut ::std::os::raw::c_int,
        out_idx: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_CRL_add1_ext_i2d(
        x: *mut X509_CRL,
        nid: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        crit: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_count(x: *const X509_REVOKED) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_NID(
        x: *const X509_REVOKED,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_OBJ(
        x: *const X509_REVOKED,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_by_critical(
        x: *const X509_REVOKED,
        crit: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext(
        x: *const X509_REVOKED,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_REVOKED_delete_ext(
        x: *mut X509_REVOKED,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_REVOKED_add_ext(
        x: *mut X509_REVOKED,
        ex: *mut X509_EXTENSION,
        loc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_REVOKED_get_ext_d2i(
        revoked: *const X509_REVOKED,
        nid: ::std::os::raw::c_int,
        out_critical: *mut ::std::os::raw::c_int,
        out_idx: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_REVOKED_add1_ext_i2d(
        x: *mut X509_REVOKED,
        nid: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        crit: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_create_by_NID(
        ex: *mut *mut X509_EXTENSION,
        nid: ::std::os::raw::c_int,
        crit: ::std::os::raw::c_int,
        data: *const ASN1_OCTET_STRING,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_create_by_OBJ(
        ex: *mut *mut X509_EXTENSION,
        obj: *const ASN1_OBJECT,
        crit: ::std::os::raw::c_int,
        data: *const ASN1_OCTET_STRING,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509_EXTENSION_set_object(
        ex: *mut X509_EXTENSION,
        obj: *const ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_set_critical(
        ex: *mut X509_EXTENSION,
        crit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_set_data(
        ex: *mut X509_EXTENSION,
        data: *const ASN1_OCTET_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_EXTENSION_get_object(ex: *mut X509_EXTENSION) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_EXTENSION_get_data(ne: *mut X509_EXTENSION) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_EXTENSION_get_critical(ex: *mut X509_EXTENSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509at_get_attr_count(x: *const stack_st_X509_ATTRIBUTE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509at_get_attr_by_NID(
        x: *const stack_st_X509_ATTRIBUTE,
        nid: ::std::os::raw::c_int,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509at_get_attr_by_OBJ(
        sk: *const stack_st_X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509at_get_attr(
        x: *const stack_st_X509_ATTRIBUTE,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_delete_attr(
        x: *mut stack_st_X509_ATTRIBUTE,
        loc: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        attr: *mut X509_ATTRIBUTE,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_OBJ(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_NID(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        nid: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_add1_attr_by_txt(
        x: *mut *mut stack_st_X509_ATTRIBUTE,
        attrname: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut stack_st_X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509at_get0_data_by_OBJ(
        x: *mut stack_st_X509_ATTRIBUTE,
        obj: *mut ASN1_OBJECT,
        lastpos: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_NID(
        attr: *mut *mut X509_ATTRIBUTE,
        nid: ::std::os::raw::c_int,
        atrtype: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_OBJ(
        attr: *mut *mut X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
        atrtype: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_create_by_txt(
        attr: *mut *mut X509_ATTRIBUTE,
        atrname: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut X509_ATTRIBUTE;
}
extern "C" {
    pub fn X509_ATTRIBUTE_set1_object(
        attr: *mut X509_ATTRIBUTE,
        obj: *const ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_set1_data(
        attr: *mut X509_ATTRIBUTE,
        attrtype: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_data(
        attr: *mut X509_ATTRIBUTE,
        idx: ::std::os::raw::c_int,
        atrtype: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509_ATTRIBUTE_count(attr: *mut X509_ATTRIBUTE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_object(attr: *mut X509_ATTRIBUTE) -> *mut ASN1_OBJECT;
}
extern "C" {
    pub fn X509_ATTRIBUTE_get0_type(
        attr: *mut X509_ATTRIBUTE,
        idx: ::std::os::raw::c_int,
    ) -> *mut ASN1_TYPE;
}
extern "C" {
    pub fn X509_verify_cert(ctx: *mut X509_STORE_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_find_by_issuer_and_serial(
        sk: *mut stack_st_X509,
        name: *mut X509_NAME,
        serial: *mut ASN1_INTEGER,
    ) -> *mut X509;
}
extern "C" {
    pub fn X509_find_by_subject(sk: *mut stack_st_X509, name: *mut X509_NAME) -> *mut X509;
}
extern "C" {
    pub fn PKCS8_PRIV_KEY_INFO_new() -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PKCS8_PRIV_KEY_INFO_free(a: *mut PKCS8_PRIV_KEY_INFO);
}
extern "C" {
    pub fn d2i_PKCS8_PRIV_KEY_INFO(
        a: *mut *mut PKCS8_PRIV_KEY_INFO,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn i2d_PKCS8_PRIV_KEY_INFO(
        a: *mut PKCS8_PRIV_KEY_INFO,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static PKCS8_PRIV_KEY_INFO_it: ASN1_ITEM;
}
extern "C" {
    pub fn EVP_PKCS82PKEY(p8: *mut PKCS8_PRIV_KEY_INFO) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn EVP_PKEY2PKCS8(pkey: *mut EVP_PKEY) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PKCS8_pkey_set0(
        priv_: *mut PKCS8_PRIV_KEY_INFO,
        aobj: *mut ASN1_OBJECT,
        version: ::std::os::raw::c_int,
        ptype: ::std::os::raw::c_int,
        pval: *mut ::std::os::raw::c_void,
        penc: *mut ::std::os::raw::c_uchar,
        penclen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS8_pkey_get0(
        ppkalg: *mut *mut ASN1_OBJECT,
        pk: *mut *const ::std::os::raw::c_uchar,
        ppklen: *mut ::std::os::raw::c_int,
        pa: *mut *mut X509_ALGOR,
        p8: *mut PKCS8_PRIV_KEY_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_set0_param(
        pub_: *mut X509_PUBKEY,
        aobj: *const ASN1_OBJECT,
        ptype: ::std::os::raw::c_int,
        pval: *mut ::std::os::raw::c_void,
        penc: *mut ::std::os::raw::c_uchar,
        penclen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PUBKEY_get0_param(
        ppkalg: *mut *mut ASN1_OBJECT,
        pk: *mut *const ::std::os::raw::c_uchar,
        ppklen: *mut ::std::os::raw::c_int,
        pa: *mut *mut X509_ALGOR,
        pub_: *mut X509_PUBKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_trust(
        x: *mut X509,
        id: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_TRUST_get_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_TRUST_get0(idx: ::std::os::raw::c_int) -> *mut X509_TRUST;
}
extern "C" {
    pub fn X509_TRUST_get_by_id(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_TRUST_add(
        id: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        ck: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut X509_TRUST,
                arg2: *mut X509,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        name: *mut ::std::os::raw::c_char,
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_TRUST_cleanup();
}
extern "C" {
    pub fn X509_TRUST_get_flags(xp: *const X509_TRUST) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_TRUST_get0_name(xp: *const X509_TRUST) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_TRUST_get_trust(xp: *const X509_TRUST) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct rsa_pss_params_st {
    pub hashAlgorithm: *mut X509_ALGOR,
    pub maskGenAlgorithm: *mut X509_ALGOR,
    pub saltLength: *mut ASN1_INTEGER,
    pub trailerField: *mut ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_rsa_pss_params_st() {
    assert_eq!(
        ::std::mem::size_of::<rsa_pss_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(rsa_pss_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<rsa_pss_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(rsa_pss_params_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_pss_params_st>())).hashAlgorithm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_pss_params_st),
            "::",
            stringify!(hashAlgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rsa_pss_params_st>())).maskGenAlgorithm as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_pss_params_st),
            "::",
            stringify!(maskGenAlgorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_pss_params_st>())).saltLength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_pss_params_st),
            "::",
            stringify!(saltLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsa_pss_params_st>())).trailerField as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rsa_pss_params_st),
            "::",
            stringify!(trailerField)
        )
    );
}
impl Default for rsa_pss_params_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type RSA_PSS_PARAMS = rsa_pss_params_st;
extern "C" {
    pub fn RSA_PSS_PARAMS_new() -> *mut RSA_PSS_PARAMS;
}
extern "C" {
    pub fn RSA_PSS_PARAMS_free(a: *mut RSA_PSS_PARAMS);
}
extern "C" {
    pub fn d2i_RSA_PSS_PARAMS(
        a: *mut *mut RSA_PSS_PARAMS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut RSA_PSS_PARAMS;
}
extern "C" {
    pub fn i2d_RSA_PSS_PARAMS(
        a: *mut RSA_PSS_PARAMS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static RSA_PSS_PARAMS_it: ASN1_ITEM;
}
extern "C" {
    pub fn PKCS8_encrypt(
        pbe_nid: ::std::os::raw::c_int,
        cipher: *const EVP_CIPHER,
        pass: *const ::std::os::raw::c_char,
        pass_len: ::std::os::raw::c_int,
        salt: *const u8,
        salt_len: usize,
        iterations: ::std::os::raw::c_int,
        p8inf: *mut PKCS8_PRIV_KEY_INFO,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn PKCS8_marshal_encrypted_private_key(
        out: *mut CBB,
        pbe_nid: ::std::os::raw::c_int,
        cipher: *const EVP_CIPHER,
        pass: *const ::std::os::raw::c_char,
        pass_len: usize,
        salt: *const u8,
        salt_len: usize,
        iterations: ::std::os::raw::c_int,
        pkey: *const EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS8_decrypt(
        pkcs8: *mut X509_SIG,
        pass: *const ::std::os::raw::c_char,
        pass_len: ::std::os::raw::c_int,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PKCS8_parse_encrypted_private_key(
        cbs: *mut CBS,
        pass: *const ::std::os::raw::c_char,
        pass_len: usize,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PKCS12_get_key_and_certs(
        out_key: *mut *mut EVP_PKEY,
        out_certs: *mut stack_st_X509,
        in_: *mut CBS,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS12_PBE_add();
}
extern "C" {
    pub fn d2i_PKCS12(
        out_p12: *mut *mut PKCS12,
        ber_bytes: *mut *const u8,
        ber_len: usize,
    ) -> *mut PKCS12;
}
extern "C" {
    pub fn d2i_PKCS12_bio(bio: *mut BIO, out_p12: *mut *mut PKCS12) -> *mut PKCS12;
}
extern "C" {
    pub fn d2i_PKCS12_fp(fp: *mut FILE, out_p12: *mut *mut PKCS12) -> *mut PKCS12;
}
extern "C" {
    pub fn i2d_PKCS12(p12: *const PKCS12, out: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS12_bio(bio: *mut BIO, p12: *const PKCS12) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS12_fp(fp: *mut FILE, p12: *const PKCS12) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS12_parse(
        p12: *const PKCS12,
        password: *const ::std::os::raw::c_char,
        out_pkey: *mut *mut EVP_PKEY,
        out_cert: *mut *mut X509,
        out_ca_certs: *mut *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS12_verify_mac(
        p12: *const PKCS12,
        password: *const ::std::os::raw::c_char,
        password_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PKCS12_create(
        password: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        pkey: *const EVP_PKEY,
        cert: *mut X509,
        chain: *const stack_st_X509,
        key_nid: ::std::os::raw::c_int,
        cert_nid: ::std::os::raw::c_int,
        iterations: ::std::os::raw::c_int,
        mac_iterations: ::std::os::raw::c_int,
        key_type: ::std::os::raw::c_int,
    ) -> *mut PKCS12;
}
extern "C" {
    pub fn PKCS12_free(p12: *mut PKCS12);
}
pub type poly1305_state = [u8; 512usize];
extern "C" {
    pub fn CRYPTO_poly1305_init(state: *mut poly1305_state, key: *const u8);
}
extern "C" {
    pub fn CRYPTO_poly1305_update(state: *mut poly1305_state, in_: *const u8, in_len: usize);
}
extern "C" {
    pub fn CRYPTO_poly1305_finish(state: *mut poly1305_state, mac: *mut u8);
}
extern "C" {
    pub fn RAND_bytes(buf: *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RAND_cleanup();
}
extern "C" {
    pub fn RAND_enable_fork_unsafe_buffering(fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn RAND_pseudo_bytes(buf: *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RAND_seed(buf: *const ::std::os::raw::c_void, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn RAND_load_file(
        path: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RAND_file_name(
        buf: *mut ::std::os::raw::c_char,
        num: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RAND_add(buf: *const ::std::os::raw::c_void, num: ::std::os::raw::c_int, entropy: f64);
}
extern "C" {
    pub fn RAND_egd(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RAND_poll() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RAND_status() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rand_meth_st {
    pub seed: ::std::option::Option<
        unsafe extern "C" fn(buf: *const ::std::os::raw::c_void, num: ::std::os::raw::c_int),
    >,
    pub bytes: ::std::option::Option<
        unsafe extern "C" fn(buf: *mut u8, num: usize) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn()>,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_void,
            num: ::std::os::raw::c_int,
            entropy: f64,
        ),
    >,
    pub pseudorand: ::std::option::Option<
        unsafe extern "C" fn(buf: *mut u8, num: usize) -> ::std::os::raw::c_int,
    >,
    pub status: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_rand_meth_st() {
    assert_eq!(
        ::std::mem::size_of::<rand_meth_st>(),
        48usize,
        concat!("Size of: ", stringify!(rand_meth_st))
    );
    assert_eq!(
        ::std::mem::align_of::<rand_meth_st>(),
        8usize,
        concat!("Alignment of ", stringify!(rand_meth_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).cleanup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).add as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).pseudorand as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(pseudorand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_meth_st>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_meth_st),
            "::",
            stringify!(status)
        )
    );
}
extern "C" {
    pub fn RAND_SSLeay() -> *mut RAND_METHOD;
}
extern "C" {
    pub fn RAND_OpenSSL() -> *mut RAND_METHOD;
}
extern "C" {
    pub fn RAND_get_rand_method() -> *const RAND_METHOD;
}
extern "C" {
    pub fn RAND_set_rand_method(arg1: *const RAND_METHOD);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rc4_key_st {
    pub x: u32,
    pub y: u32,
    pub data: [u32; 256usize],
}
#[test]
fn bindgen_test_layout_rc4_key_st() {
    assert_eq!(
        ::std::mem::size_of::<rc4_key_st>(),
        1032usize,
        concat!("Size of: ", stringify!(rc4_key_st))
    );
    assert_eq!(
        ::std::mem::align_of::<rc4_key_st>(),
        4usize,
        concat!("Alignment of ", stringify!(rc4_key_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rc4_key_st>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rc4_key_st),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rc4_key_st>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rc4_key_st),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rc4_key_st>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rc4_key_st),
            "::",
            stringify!(data)
        )
    );
}
impl Default for rc4_key_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn RC4_set_key(rc4key: *mut RC4_KEY, len: ::std::os::raw::c_uint, key: *const u8);
}
extern "C" {
    pub fn RC4(key: *mut RC4_KEY, len: usize, in_: *const u8, out: *mut u8);
}
extern "C" {
    pub fn RC4_options() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RIPEMD160state_st {
    pub h: [u32; 5usize],
    pub Nl: u32,
    pub Nh: u32,
    pub data: [u8; 64usize],
    pub num: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RIPEMD160state_st() {
    assert_eq!(
        ::std::mem::size_of::<RIPEMD160state_st>(),
        96usize,
        concat!("Size of: ", stringify!(RIPEMD160state_st))
    );
    assert_eq!(
        ::std::mem::align_of::<RIPEMD160state_st>(),
        4usize,
        concat!("Alignment of ", stringify!(RIPEMD160state_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIPEMD160state_st>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RIPEMD160state_st),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIPEMD160state_st>())).Nl as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RIPEMD160state_st),
            "::",
            stringify!(Nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIPEMD160state_st>())).Nh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RIPEMD160state_st),
            "::",
            stringify!(Nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIPEMD160state_st>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RIPEMD160state_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIPEMD160state_st>())).num as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RIPEMD160state_st),
            "::",
            stringify!(num)
        )
    );
}
impl Default for RIPEMD160state_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn RIPEMD160_Init(ctx: *mut RIPEMD160_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RIPEMD160_Update(
        ctx: *mut RIPEMD160_CTX,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RIPEMD160_Final(out: *mut u8, ctx: *mut RIPEMD160_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RIPEMD160(data: *const u8, len: usize, out: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn RIPEMD160_Transform(ctx: *mut RIPEMD160_CTX, block: *const u8);
}
extern "C" {
    pub fn SIPHASH_24(key: *const u64, input: *const u8, input_len: usize) -> u64;
}
pub type pem_password_cb = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        rwflag: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn PEM_get_EVP_CIPHER_INFO(
        header: *mut ::std::os::raw::c_char,
        cipher: *mut EVP_CIPHER_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_do_header(
        cipher: *mut EVP_CIPHER_INFO,
        data: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_long,
        callback: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio(
        bp: *mut BIO,
        name: *mut *mut ::std::os::raw::c_char,
        header: *mut *mut ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_bio(
        bp: *mut BIO,
        name: *const ::std::os::raw::c_char,
        hdr: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_bytes_read_bio(
        pdata: *mut *mut ::std::os::raw::c_uchar,
        plen: *mut ::std::os::raw::c_long,
        pnm: *mut *mut ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        bp: *mut BIO,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_ASN1_read_bio(
        d2i: d2i_of_void,
        name: *const ::std::os::raw::c_char,
        bp: *mut BIO,
        x: *mut *mut ::std::os::raw::c_void,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PEM_ASN1_write_bio(
        i2d: i2d_of_void,
        name: *const ::std::os::raw::c_char,
        bp: *mut BIO,
        x: *mut ::std::os::raw::c_void,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_X509_INFO_read_bio(
        bp: *mut BIO,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_X509_INFO_write_bio(
        bp: *mut BIO,
        xi: *mut X509_INFO,
        enc: *mut EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cd: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read(
        fp: *mut FILE,
        name: *mut *mut ::std::os::raw::c_char,
        header: *mut *mut ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write(
        fp: *mut FILE,
        name: *const ::std::os::raw::c_char,
        hdr: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_ASN1_read(
        d2i: d2i_of_void,
        name: *const ::std::os::raw::c_char,
        fp: *mut FILE,
        x: *mut *mut ::std::os::raw::c_void,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn PEM_ASN1_write(
        i2d: i2d_of_void,
        name: *const ::std::os::raw::c_char,
        fp: *mut FILE,
        x: *mut ::std::os::raw::c_void,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        callback: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_X509_INFO_read(
        fp: *mut FILE,
        sk: *mut stack_st_X509_INFO,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut stack_st_X509_INFO;
}
extern "C" {
    pub fn PEM_def_callback(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        rwflag: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_proc_type(buf: *mut ::std::os::raw::c_char, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PEM_dek_info(
        buf: *mut ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn PEM_read_bio_X509(
        bp: *mut BIO,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_read_X509(
        fp: *mut FILE,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_write_bio_X509(bp: *mut BIO, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_X509(fp: *mut FILE, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_AUX(
        bp: *mut BIO,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_read_X509_AUX(
        fp: *mut FILE,
        x: *mut *mut X509,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509;
}
extern "C" {
    pub fn PEM_write_bio_X509_AUX(bp: *mut BIO, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_X509_AUX(fp: *mut FILE, x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_REQ(
        bp: *mut BIO,
        x: *mut *mut X509_REQ,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn PEM_read_X509_REQ(
        fp: *mut FILE,
        x: *mut *mut X509_REQ,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_REQ;
}
extern "C" {
    pub fn PEM_write_bio_X509_REQ(bp: *mut BIO, x: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_X509_REQ(fp: *mut FILE, x: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_bio_X509_REQ_NEW(bp: *mut BIO, x: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_X509_REQ_NEW(fp: *mut FILE, x: *mut X509_REQ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_X509_CRL(
        bp: *mut BIO,
        x: *mut *mut X509_CRL,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn PEM_read_X509_CRL(
        fp: *mut FILE,
        x: *mut *mut X509_CRL,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_CRL;
}
extern "C" {
    pub fn PEM_write_bio_X509_CRL(bp: *mut BIO, x: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_X509_CRL(fp: *mut FILE, x: *mut X509_CRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS7(
        bp: *mut BIO,
        x: *mut *mut PKCS7,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PEM_read_PKCS7(
        fp: *mut FILE,
        x: *mut *mut PKCS7,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut PKCS7;
}
extern "C" {
    pub fn PEM_write_bio_PKCS7(bp: *mut BIO, x: *mut PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS7(fp: *mut FILE, x: *mut PKCS7) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS8(
        bp: *mut BIO,
        x: *mut *mut X509_SIG,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn PEM_read_PKCS8(
        fp: *mut FILE,
        x: *mut *mut X509_SIG,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut X509_SIG;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8(bp: *mut BIO, x: *mut X509_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8(fp: *mut FILE, x: *mut X509_SIG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PKCS8_PRIV_KEY_INFO(
        bp: *mut BIO,
        x: *mut *mut PKCS8_PRIV_KEY_INFO,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PEM_read_PKCS8_PRIV_KEY_INFO(
        fp: *mut FILE,
        x: *mut *mut PKCS8_PRIV_KEY_INFO,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut PKCS8_PRIV_KEY_INFO;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8_PRIV_KEY_INFO(
        bp: *mut BIO,
        x: *mut PKCS8_PRIV_KEY_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8_PRIV_KEY_INFO(
        fp: *mut FILE,
        x: *mut PKCS8_PRIV_KEY_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSAPrivateKey(
        bp: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSAPrivateKey(
        fp: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSAPrivateKey(
        bp: *mut BIO,
        x: *mut RSA,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_RSAPrivateKey(
        fp: *mut FILE,
        x: *mut RSA,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSAPublicKey(
        bp: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSAPublicKey(
        fp: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSAPublicKey(bp: *mut BIO, x: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_RSAPublicKey(fp: *mut FILE, x: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_RSA_PUBKEY(
        bp: *mut BIO,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_read_RSA_PUBKEY(
        fp: *mut FILE,
        x: *mut *mut RSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut RSA;
}
extern "C" {
    pub fn PEM_write_bio_RSA_PUBKEY(bp: *mut BIO, x: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_RSA_PUBKEY(fp: *mut FILE, x: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSAPrivateKey(
        bp: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSAPrivateKey(
        fp: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSAPrivateKey(
        bp: *mut BIO,
        x: *mut DSA,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_DSAPrivateKey(
        fp: *mut FILE,
        x: *mut DSA,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSA_PUBKEY(
        bp: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSA_PUBKEY(
        fp: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSA_PUBKEY(bp: *mut BIO, x: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_DSA_PUBKEY(fp: *mut FILE, x: *mut DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DSAparams(
        bp: *mut BIO,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_read_DSAparams(
        fp: *mut FILE,
        x: *mut *mut DSA,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DSA;
}
extern "C" {
    pub fn PEM_write_bio_DSAparams(bp: *mut BIO, x: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_DSAparams(fp: *mut FILE, x: *const DSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_ECPrivateKey(
        bp: *mut BIO,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_read_ECPrivateKey(
        fp: *mut FILE,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_write_bio_ECPrivateKey(
        bp: *mut BIO,
        x: *mut EC_KEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_ECPrivateKey(
        fp: *mut FILE,
        x: *mut EC_KEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_EC_PUBKEY(
        bp: *mut BIO,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_read_EC_PUBKEY(
        fp: *mut FILE,
        x: *mut *mut EC_KEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EC_KEY;
}
extern "C" {
    pub fn PEM_write_bio_EC_PUBKEY(bp: *mut BIO, x: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_EC_PUBKEY(fp: *mut FILE, x: *mut EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_DHparams(
        bp: *mut BIO,
        x: *mut *mut DH,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DH;
}
extern "C" {
    pub fn PEM_read_DHparams(
        fp: *mut FILE,
        x: *mut *mut DH,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut DH;
}
extern "C" {
    pub fn PEM_write_bio_DHparams(bp: *mut BIO, x: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_DHparams(fp: *mut FILE, x: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PrivateKey(
        bp: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PrivateKey(
        fp: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_bio_PrivateKey(
        bp: *mut BIO,
        x: *mut EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PrivateKey(
        fp: *mut FILE,
        x: *mut EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_PUBKEY(
        bp: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_read_PUBKEY(
        fp: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_bio_PUBKEY(bp: *mut BIO, x: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PUBKEY(fp: *mut FILE, x: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8PrivateKey_nid(
        bp: *mut BIO,
        x: *mut EVP_PKEY,
        nid: ::std::os::raw::c_int,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_bio_PKCS8PrivateKey(
        arg1: *mut BIO,
        arg2: *mut EVP_PKEY,
        arg3: *const EVP_CIPHER,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: pem_password_cb,
        arg7: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_bio(
        bp: *mut BIO,
        x: *mut EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_nid_bio(
        bp: *mut BIO,
        x: *mut EVP_PKEY,
        nid: ::std::os::raw::c_int,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8PrivateKey_bio(
        bp: *mut BIO,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_fp(
        fp: *mut FILE,
        x: *mut EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_PKCS8PrivateKey_nid_fp(
        fp: *mut FILE,
        x: *mut EVP_PKEY,
        nid: ::std::os::raw::c_int,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_PKCS8PrivateKey_nid(
        fp: *mut FILE,
        x: *mut EVP_PKEY,
        nid: ::std::os::raw::c_int,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_PKCS8PrivateKey_fp(
        fp: *mut FILE,
        x: *mut *mut EVP_PKEY,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn PEM_write_PKCS8PrivateKey(
        fp: *mut FILE,
        x: *mut EVP_PKEY,
        enc: *const EVP_CIPHER,
        kstr: *mut ::std::os::raw::c_char,
        klen: ::std::os::raw::c_int,
        cd: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
impl __itimer_which {
    pub const ITIMER_REAL: __itimer_which = __itimer_which(0);
}
impl __itimer_which {
    pub const ITIMER_VIRTUAL: __itimer_which = __itimer_which(1);
}
impl __itimer_which {
    pub const ITIMER_PROF: __itimer_which = __itimer_which(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct __itimer_which(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC(
        evp_md: *const EVP_MD,
        key: *const ::std::os::raw::c_void,
        key_len: usize,
        data: *const u8,
        data_len: usize,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> *mut u8;
}
extern "C" {
    pub fn HMAC_CTX_init(ctx: *mut HMAC_CTX);
}
extern "C" {
    pub fn HMAC_CTX_new() -> *mut HMAC_CTX;
}
extern "C" {
    pub fn HMAC_CTX_cleanup(ctx: *mut HMAC_CTX);
}
extern "C" {
    pub fn HMAC_CTX_free(ctx: *mut HMAC_CTX);
}
extern "C" {
    pub fn HMAC_Init_ex(
        ctx: *mut HMAC_CTX,
        key: *const ::std::os::raw::c_void,
        key_len: usize,
        md: *const EVP_MD,
        impl_: *mut ENGINE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC_Update(
        ctx: *mut HMAC_CTX,
        data: *const u8,
        data_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC_Final(
        ctx: *mut HMAC_CTX,
        out: *mut u8,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC_size(ctx: *const HMAC_CTX) -> usize;
}
extern "C" {
    pub fn HMAC_CTX_copy_ex(dest: *mut HMAC_CTX, src: *const HMAC_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC_CTX_reset(ctx: *mut HMAC_CTX);
}
extern "C" {
    pub fn HMAC_Init(
        ctx: *mut HMAC_CTX,
        key: *const ::std::os::raw::c_void,
        key_len: ::std::os::raw::c_int,
        md: *const EVP_MD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HMAC_CTX_copy(dest: *mut HMAC_CTX, src: *const HMAC_CTX) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct hmac_ctx_st {
    pub md: *const EVP_MD,
    pub md_ctx: EVP_MD_CTX,
    pub i_ctx: EVP_MD_CTX,
    pub o_ctx: EVP_MD_CTX,
}
#[test]
fn bindgen_test_layout_hmac_ctx_st() {
    assert_eq!(
        ::std::mem::size_of::<hmac_ctx_st>(),
        104usize,
        concat!("Size of: ", stringify!(hmac_ctx_st))
    );
    assert_eq!(
        ::std::mem::align_of::<hmac_ctx_st>(),
        8usize,
        concat!("Alignment of ", stringify!(hmac_ctx_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hmac_ctx_st>())).md as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hmac_ctx_st),
            "::",
            stringify!(md)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hmac_ctx_st>())).md_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hmac_ctx_st),
            "::",
            stringify!(md_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hmac_ctx_st>())).i_ctx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hmac_ctx_st),
            "::",
            stringify!(i_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hmac_ctx_st>())).o_ctx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hmac_ctx_st),
            "::",
            stringify!(o_ctx)
        )
    );
}
impl Default for hmac_ctx_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TLS_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLS_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLS_with_buffers_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLS_with_buffers_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn SSL_CTX_new(method: *const SSL_METHOD) -> *mut SSL_CTX;
}
extern "C" {
    pub fn SSL_CTX_up_ref(ctx: *mut SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_free(ctx: *mut SSL_CTX);
}
extern "C" {
    pub fn SSL_new(ctx: *mut SSL_CTX) -> *mut SSL;
}
extern "C" {
    pub fn SSL_free(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_get_SSL_CTX(ssl: *const SSL) -> *mut SSL_CTX;
}
extern "C" {
    pub fn SSL_set_connect_state(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_set_accept_state(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_is_server(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_is_dtls(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_bio(ssl: *mut SSL, rbio: *mut BIO, wbio: *mut BIO);
}
extern "C" {
    pub fn SSL_set0_rbio(ssl: *mut SSL, rbio: *mut BIO);
}
extern "C" {
    pub fn SSL_set0_wbio(ssl: *mut SSL, wbio: *mut BIO);
}
extern "C" {
    pub fn SSL_get_rbio(ssl: *const SSL) -> *mut BIO;
}
extern "C" {
    pub fn SSL_get_wbio(ssl: *const SSL) -> *mut BIO;
}
extern "C" {
    pub fn SSL_get_fd(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_rfd(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_wfd(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_fd(ssl: *mut SSL, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_rfd(ssl: *mut SSL, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_wfd(ssl: *mut SSL, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_do_handshake(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_connect(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_accept(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_read(
        ssl: *mut SSL,
        buf: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_peek(
        ssl: *mut SSL,
        buf: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_pending(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_write(
        ssl: *mut SSL,
        buf: *const ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_key_update(
        ssl: *mut SSL,
        request_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_shutdown(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_quiet_shutdown(ctx: *mut SSL_CTX, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_get_quiet_shutdown(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_quiet_shutdown(ssl: *mut SSL, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_get_quiet_shutdown(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_error(ssl: *const SSL, ret_code: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_error_description(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_set_mtu(ssl: *mut SSL, mtu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DTLSv1_set_initial_timeout_duration(ssl: *mut SSL, duration_ms: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DTLSv1_get_timeout(ssl: *const SSL, out: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DTLSv1_handle_timeout(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_min_proto_version(ctx: *mut SSL_CTX, version: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_max_proto_version(ctx: *mut SSL_CTX, version: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_min_proto_version(ctx: *const SSL_CTX) -> u16;
}
extern "C" {
    pub fn SSL_CTX_get_max_proto_version(ctx: *const SSL_CTX) -> u16;
}
extern "C" {
    pub fn SSL_set_min_proto_version(ssl: *mut SSL, version: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_max_proto_version(ssl: *mut SSL, version: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_min_proto_version(ssl: *const SSL) -> u16;
}
extern "C" {
    pub fn SSL_get_max_proto_version(ssl: *const SSL) -> u16;
}
extern "C" {
    pub fn SSL_version(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_options(ctx: *mut SSL_CTX, options: u32) -> u32;
}
extern "C" {
    pub fn SSL_CTX_clear_options(ctx: *mut SSL_CTX, options: u32) -> u32;
}
extern "C" {
    pub fn SSL_CTX_get_options(ctx: *const SSL_CTX) -> u32;
}
extern "C" {
    pub fn SSL_set_options(ssl: *mut SSL, options: u32) -> u32;
}
extern "C" {
    pub fn SSL_clear_options(ssl: *mut SSL, options: u32) -> u32;
}
extern "C" {
    pub fn SSL_get_options(ssl: *const SSL) -> u32;
}
extern "C" {
    pub fn SSL_CTX_set_mode(ctx: *mut SSL_CTX, mode: u32) -> u32;
}
extern "C" {
    pub fn SSL_CTX_clear_mode(ctx: *mut SSL_CTX, mode: u32) -> u32;
}
extern "C" {
    pub fn SSL_CTX_get_mode(ctx: *const SSL_CTX) -> u32;
}
extern "C" {
    pub fn SSL_set_mode(ssl: *mut SSL, mode: u32) -> u32;
}
extern "C" {
    pub fn SSL_clear_mode(ssl: *mut SSL, mode: u32) -> u32;
}
extern "C" {
    pub fn SSL_get_mode(ssl: *const SSL) -> u32;
}
extern "C" {
    pub fn SSL_CTX_set0_buffer_pool(ctx: *mut SSL_CTX, pool: *mut CRYPTO_BUFFER_POOL);
}
extern "C" {
    pub fn SSL_CTX_use_certificate(ctx: *mut SSL_CTX, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_certificate(ssl: *mut SSL, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_PrivateKey(ctx: *mut SSL_CTX, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_PrivateKey(ssl: *mut SSL, pkey: *mut EVP_PKEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set0_chain(
        ctx: *mut SSL_CTX,
        chain: *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set1_chain(
        ctx: *mut SSL_CTX,
        chain: *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set0_chain(ssl: *mut SSL, chain: *mut stack_st_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_chain(ssl: *mut SSL, chain: *mut stack_st_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_add0_chain_cert(ctx: *mut SSL_CTX, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_add1_chain_cert(ctx: *mut SSL_CTX, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_add0_chain_cert(ssl: *mut SSL, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_add_extra_chain_cert(
        ctx: *mut SSL_CTX,
        x509: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_add1_chain_cert(ssl: *mut SSL, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_clear_chain_certs(ctx: *mut SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_clear_extra_chain_certs(ctx: *mut SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_clear_chain_certs(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_cert_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_set_cert_cb(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_get0_certificate_types(ssl: *const SSL, out_types: *mut *const u8) -> usize;
}
extern "C" {
    pub fn SSL_get0_peer_verify_algorithms(ssl: *const SSL, out_sigalgs: *mut *const u16) -> usize;
}
extern "C" {
    pub fn SSL_get0_peer_delegation_algorithms(
        ssl: *const SSL,
        out_sigalgs: *mut *const u16,
    ) -> usize;
}
extern "C" {
    pub fn SSL_certs_clear(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_CTX_check_private_key(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_check_private_key(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get0_certificate(ctx: *const SSL_CTX) -> *mut X509;
}
extern "C" {
    pub fn SSL_get_certificate(ssl: *const SSL) -> *mut X509;
}
extern "C" {
    pub fn SSL_CTX_get0_privatekey(ctx: *const SSL_CTX) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn SSL_get_privatekey(ssl: *const SSL) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn SSL_CTX_get0_chain_certs(
        ctx: *const SSL_CTX,
        out_chain: *mut *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_extra_chain_certs(
        ctx: *const SSL_CTX,
        out_chain: *mut *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get0_chain_certs(
        ssl: *const SSL,
        out_chain: *mut *mut stack_st_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_signed_cert_timestamp_list(
        ctx: *mut SSL_CTX,
        list: *const u8,
        list_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_signed_cert_timestamp_list(
        ctx: *mut SSL,
        list: *const u8,
        list_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_ocsp_response(
        ctx: *mut SSL_CTX,
        response: *const u8,
        response_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_ocsp_response(
        ssl: *mut SSL,
        response: *const u8,
        response_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_signature_algorithm_name(
        sigalg: u16,
        include_curve: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_signature_algorithm_key_type(sigalg: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_signature_algorithm_digest(sigalg: u16) -> *const EVP_MD;
}
extern "C" {
    pub fn SSL_is_signature_algorithm_rsa_pss(sigalg: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_signing_algorithm_prefs(
        ctx: *mut SSL_CTX,
        prefs: *const u16,
        num_prefs: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_signing_algorithm_prefs(
        ssl: *mut SSL,
        prefs: *const u16,
        num_prefs: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_chain_and_key(
        ctx: *mut SSL_CTX,
        certs: *const *mut CRYPTO_BUFFER,
        num_certs: usize,
        privkey: *mut EVP_PKEY,
        privkey_method: *const SSL_PRIVATE_KEY_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_chain_and_key(
        ssl: *mut SSL,
        certs: *const *mut CRYPTO_BUFFER,
        num_certs: usize,
        privkey: *mut EVP_PKEY,
        privkey_method: *const SSL_PRIVATE_KEY_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get0_chain(ctx: *const SSL_CTX) -> *const stack_st_CRYPTO_BUFFER;
}
extern "C" {
    pub fn SSL_CTX_use_RSAPrivateKey(ctx: *mut SSL_CTX, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_RSAPrivateKey(ssl: *mut SSL, rsa: *mut RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_certificate_ASN1(
        ctx: *mut SSL_CTX,
        der_len: usize,
        der: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_certificate_ASN1(
        ssl: *mut SSL,
        der: *const u8,
        der_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_PrivateKey_ASN1(
        pk: ::std::os::raw::c_int,
        ctx: *mut SSL_CTX,
        der: *const u8,
        der_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_PrivateKey_ASN1(
        type_: ::std::os::raw::c_int,
        ssl: *mut SSL,
        der: *const u8,
        der_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_RSAPrivateKey_ASN1(
        ctx: *mut SSL_CTX,
        der: *const u8,
        der_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_RSAPrivateKey_ASN1(
        ssl: *mut SSL,
        der: *const u8,
        der_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_RSAPrivateKey_file(
        ctx: *mut SSL_CTX,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_RSAPrivateKey_file(
        ssl: *mut SSL,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_certificate_file(
        ctx: *mut SSL_CTX,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_certificate_file(
        ssl: *mut SSL,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_PrivateKey_file(
        ctx: *mut SSL_CTX,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_PrivateKey_file(
        ssl: *mut SSL,
        file: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_use_certificate_chain_file(
        ctx: *mut SSL_CTX,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_default_passwd_cb(ctx: *mut SSL_CTX, cb: pem_password_cb);
}
extern "C" {
    pub fn SSL_CTX_get_default_passwd_cb(ctx: *const SSL_CTX) -> pem_password_cb;
}
extern "C" {
    pub fn SSL_CTX_set_default_passwd_cb_userdata(
        ctx: *mut SSL_CTX,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_CTX_get_default_passwd_cb_userdata(
        ctx: *const SSL_CTX,
    ) -> *mut ::std::os::raw::c_void;
}
impl ssl_private_key_result_t {
    pub const ssl_private_key_success: ssl_private_key_result_t = ssl_private_key_result_t(0);
}
impl ssl_private_key_result_t {
    pub const ssl_private_key_retry: ssl_private_key_result_t = ssl_private_key_result_t(1);
}
impl ssl_private_key_result_t {
    pub const ssl_private_key_failure: ssl_private_key_result_t = ssl_private_key_result_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_private_key_result_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ssl_private_key_method_st {
    pub sign: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            out: *mut u8,
            out_len: *mut usize,
            max_out: usize,
            signature_algorithm: u16,
            in_: *const u8,
            in_len: usize,
        ) -> ssl_private_key_result_t,
    >,
    pub decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            out: *mut u8,
            out_len: *mut usize,
            max_out: usize,
            in_: *const u8,
            in_len: usize,
        ) -> ssl_private_key_result_t,
    >,
    pub complete: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            out: *mut u8,
            out_len: *mut usize,
            max_out: usize,
        ) -> ssl_private_key_result_t,
    >,
}
#[test]
fn bindgen_test_layout_ssl_private_key_method_st() {
    assert_eq!(
        ::std::mem::size_of::<ssl_private_key_method_st>(),
        24usize,
        concat!("Size of: ", stringify!(ssl_private_key_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ssl_private_key_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ssl_private_key_method_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_private_key_method_st>())).sign as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_private_key_method_st),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_private_key_method_st>())).decrypt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_private_key_method_st),
            "::",
            stringify!(decrypt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_private_key_method_st>())).complete as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_private_key_method_st),
            "::",
            stringify!(complete)
        )
    );
}
extern "C" {
    pub fn SSL_set_private_key_method(ssl: *mut SSL, key_method: *const SSL_PRIVATE_KEY_METHOD);
}
extern "C" {
    pub fn SSL_CTX_set_private_key_method(
        ctx: *mut SSL_CTX,
        key_method: *const SSL_PRIVATE_KEY_METHOD,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_SSL_CIPHER {
    _unused: [u8; 0],
}
pub type stack_SSL_CIPHER_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const SSL_CIPHER)>;
pub type stack_SSL_CIPHER_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const SSL_CIPHER) -> *const SSL_CIPHER>;
pub type stack_SSL_CIPHER_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const SSL_CIPHER,
        b: *mut *const SSL_CIPHER,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn SSL_get_cipher_by_value(value: u16) -> *const SSL_CIPHER;
}
extern "C" {
    pub fn SSL_CIPHER_get_id(cipher: *const SSL_CIPHER) -> u32;
}
extern "C" {
    pub fn SSL_CIPHER_get_protocol_id(cipher: *const SSL_CIPHER) -> u16;
}
extern "C" {
    pub fn SSL_CIPHER_is_aead(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_is_block_cipher(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_cipher_nid(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_digest_nid(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_kx_nid(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_auth_nid(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_prf_nid(cipher: *const SSL_CIPHER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_min_version(cipher: *const SSL_CIPHER) -> u16;
}
extern "C" {
    pub fn SSL_CIPHER_get_max_version(cipher: *const SSL_CIPHER) -> u16;
}
extern "C" {
    pub fn SSL_CIPHER_standard_name(cipher: *const SSL_CIPHER) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CIPHER_get_name(cipher: *const SSL_CIPHER) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CIPHER_get_kx_name(cipher: *const SSL_CIPHER) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CIPHER_get_bits(
        cipher: *const SSL_CIPHER,
        out_alg_bits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_strict_cipher_list(
        ctx: *mut SSL_CTX,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_cipher_list(
        ctx: *mut SSL_CTX,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_strict_cipher_list(
        ssl: *mut SSL,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_cipher_list(
        ssl: *mut SSL,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_ciphers(ctx: *const SSL_CTX) -> *mut stack_st_SSL_CIPHER;
}
extern "C" {
    pub fn SSL_CTX_cipher_in_group(ctx: *const SSL_CTX, i: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_ciphers(ssl: *const SSL) -> *mut stack_st_SSL_CIPHER;
}
extern "C" {
    pub fn SSL_is_init_finished(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_in_init(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_in_false_start(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_peer_certificate(ssl: *const SSL) -> *mut X509;
}
extern "C" {
    pub fn SSL_get_peer_cert_chain(ssl: *const SSL) -> *mut stack_st_X509;
}
extern "C" {
    pub fn SSL_get_peer_full_cert_chain(ssl: *const SSL) -> *mut stack_st_X509;
}
extern "C" {
    pub fn SSL_get0_peer_certificates(ssl: *const SSL) -> *const stack_st_CRYPTO_BUFFER;
}
extern "C" {
    pub fn SSL_get0_signed_cert_timestamp_list(
        ssl: *const SSL,
        out: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_get0_ocsp_response(ssl: *const SSL, out: *mut *const u8, out_len: *mut usize);
}
extern "C" {
    pub fn SSL_get_tls_unique(
        ssl: *const SSL,
        out: *mut u8,
        out_len: *mut usize,
        max_out: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_extms_support(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_current_cipher(ssl: *const SSL) -> *const SSL_CIPHER;
}
extern "C" {
    pub fn SSL_session_reused(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_secure_renegotiation_support(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_export_keying_material(
        ssl: *mut SSL,
        out: *mut u8,
        out_len: usize,
        label: *const ::std::os::raw::c_char,
        label_len: usize,
        context: *const u8,
        context_len: usize,
        use_context: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_read_bio_SSL_SESSION(
        bp: *mut BIO,
        x: *mut *mut SSL_SESSION,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn PEM_read_SSL_SESSION(
        fp: *mut FILE,
        x: *mut *mut SSL_SESSION,
        cb: pem_password_cb,
        u: *mut ::std::os::raw::c_void,
    ) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn PEM_write_bio_SSL_SESSION(bp: *mut BIO, x: *mut SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PEM_write_SSL_SESSION(fp: *mut FILE, x: *mut SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_new(ctx: *const SSL_CTX) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_SESSION_up_ref(session: *mut SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_free(session: *mut SSL_SESSION);
}
extern "C" {
    pub fn SSL_SESSION_to_bytes(
        in_: *const SSL_SESSION,
        out_data: *mut *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_to_bytes_for_ticket(
        in_: *const SSL_SESSION,
        out_data: *mut *mut u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_from_bytes(
        in_: *const u8,
        in_len: usize,
        ctx: *const SSL_CTX,
    ) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_SESSION_get_version(session: *const SSL_SESSION) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_SESSION_get_protocol_version(session: *const SSL_SESSION) -> u16;
}
extern "C" {
    pub fn SSL_SESSION_set_protocol_version(
        session: *mut SSL_SESSION,
        version: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get_id(
        session: *const SSL_SESSION,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> *const u8;
}
extern "C" {
    pub fn SSL_SESSION_set1_id(
        session: *mut SSL_SESSION,
        sid: *const u8,
        sid_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get_time(session: *const SSL_SESSION) -> u64;
}
extern "C" {
    pub fn SSL_SESSION_get_timeout(session: *const SSL_SESSION) -> u32;
}
extern "C" {
    pub fn SSL_SESSION_get0_peer(session: *const SSL_SESSION) -> *mut X509;
}
extern "C" {
    pub fn SSL_SESSION_get0_peer_certificates(
        session: *const SSL_SESSION,
    ) -> *const stack_st_CRYPTO_BUFFER;
}
extern "C" {
    pub fn SSL_SESSION_get0_signed_cert_timestamp_list(
        session: *const SSL_SESSION,
        out: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_SESSION_get0_ocsp_response(
        session: *const SSL_SESSION,
        out: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_SESSION_get_master_key(
        session: *const SSL_SESSION,
        out: *mut u8,
        max_out: usize,
    ) -> usize;
}
extern "C" {
    pub fn SSL_SESSION_set_time(session: *mut SSL_SESSION, time: u64) -> u64;
}
extern "C" {
    pub fn SSL_SESSION_set_timeout(session: *mut SSL_SESSION, timeout: u32) -> u32;
}
extern "C" {
    pub fn SSL_SESSION_get0_id_context(
        session: *const SSL_SESSION,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> *const u8;
}
extern "C" {
    pub fn SSL_SESSION_set1_id_context(
        session: *mut SSL_SESSION,
        sid_ctx: *const u8,
        sid_ctx_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_should_be_single_use(session: *const SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_is_resumable(session: *const SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_has_ticket(session: *const SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get0_ticket(
        session: *const SSL_SESSION,
        out_ticket: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_SESSION_set_ticket(
        session: *mut SSL_SESSION,
        ticket: *const u8,
        ticket_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get_ticket_lifetime_hint(session: *const SSL_SESSION) -> u32;
}
extern "C" {
    pub fn SSL_SESSION_get0_cipher(session: *const SSL_SESSION) -> *const SSL_CIPHER;
}
extern "C" {
    pub fn SSL_SESSION_has_peer_sha256(session: *const SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get0_peer_sha256(
        session: *const SSL_SESSION,
        out_ptr: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_CTX_set_session_cache_mode(
        ctx: *mut SSL_CTX,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_session_cache_mode(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_session(ssl: *mut SSL, session: *mut SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_timeout(ctx: *mut SSL_CTX, timeout: u32) -> u32;
}
extern "C" {
    pub fn SSL_CTX_set_session_psk_dhe_timeout(ctx: *mut SSL_CTX, timeout: u32);
}
extern "C" {
    pub fn SSL_CTX_get_timeout(ctx: *const SSL_CTX) -> u32;
}
extern "C" {
    pub fn SSL_CTX_set_session_id_context(
        ctx: *mut SSL_CTX,
        sid_ctx: *const u8,
        sid_ctx_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_session_id_context(
        ssl: *mut SSL,
        sid_ctx: *const u8,
        sid_ctx_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get0_session_id_context(ssl: *const SSL, out_len: *mut usize) -> *const u8;
}
extern "C" {
    pub fn SSL_CTX_sess_set_cache_size(
        ctx: *mut SSL_CTX,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn SSL_CTX_sess_get_cache_size(ctx: *const SSL_CTX) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn SSL_CTX_sess_number(ctx: *const SSL_CTX) -> usize;
}
extern "C" {
    pub fn SSL_CTX_add_session(
        ctx: *mut SSL_CTX,
        session: *mut SSL_SESSION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_remove_session(
        ctx: *mut SSL_CTX,
        session: *mut SSL_SESSION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_flush_sessions(ctx: *mut SSL_CTX, time: u64);
}
extern "C" {
    pub fn SSL_CTX_sess_set_new_cb(
        ctx: *mut SSL_CTX,
        new_session_cb: ::std::option::Option<
            unsafe extern "C" fn(ssl: *mut SSL, session: *mut SSL_SESSION) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_sess_get_new_cb(
        ctx: *mut SSL_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut SSL, arg1: *mut SSL_SESSION) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn SSL_CTX_sess_set_remove_cb(
        ctx: *mut SSL_CTX,
        remove_session_cb: ::std::option::Option<
            unsafe extern "C" fn(ctx: *mut SSL_CTX, session: *mut SSL_SESSION),
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_sess_get_remove_cb(
        ctx: *mut SSL_CTX,
    ) -> ::std::option::Option<unsafe extern "C" fn(ctx: *mut SSL_CTX, arg1: *mut SSL_SESSION)>;
}
extern "C" {
    pub fn SSL_CTX_sess_set_get_cb(
        ctx: *mut SSL_CTX,
        get_session_cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                id: *const u8,
                id_len: ::std::os::raw::c_int,
                out_copy: *mut ::std::os::raw::c_int,
            ) -> *mut SSL_SESSION,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_sess_get_get_cb(
        ctx: *mut SSL_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut SSL,
            arg1: *const u8,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
        ) -> *mut SSL_SESSION,
    >;
}
extern "C" {
    pub fn SSL_magic_pending_session_ptr() -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_CTX_get_tlsext_ticket_keys(
        ctx: *mut SSL_CTX,
        out: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_ticket_keys(
        ctx: *mut SSL_CTX,
        in_: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_ticket_key_cb(
        ctx: *mut SSL_CTX,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                key_name: *mut u8,
                iv: *mut u8,
                ctx: *mut EVP_CIPHER_CTX,
                hmac_ctx: *mut HMAC_CTX,
                encrypt: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
impl ssl_ticket_aead_result_t {
    pub const ssl_ticket_aead_success: ssl_ticket_aead_result_t = ssl_ticket_aead_result_t(0);
}
impl ssl_ticket_aead_result_t {
    pub const ssl_ticket_aead_retry: ssl_ticket_aead_result_t = ssl_ticket_aead_result_t(1);
}
impl ssl_ticket_aead_result_t {
    pub const ssl_ticket_aead_ignore_ticket: ssl_ticket_aead_result_t = ssl_ticket_aead_result_t(2);
}
impl ssl_ticket_aead_result_t {
    pub const ssl_ticket_aead_error: ssl_ticket_aead_result_t = ssl_ticket_aead_result_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_ticket_aead_result_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ssl_ticket_aead_method_st {
    pub max_overhead: ::std::option::Option<unsafe extern "C" fn(ssl: *mut SSL) -> usize>,
    pub seal: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            out: *mut u8,
            out_len: *mut usize,
            max_out_len: usize,
            in_: *const u8,
            in_len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            out: *mut u8,
            out_len: *mut usize,
            max_out_len: usize,
            in_: *const u8,
            in_len: usize,
        ) -> ssl_ticket_aead_result_t,
    >,
}
#[test]
fn bindgen_test_layout_ssl_ticket_aead_method_st() {
    assert_eq!(
        ::std::mem::size_of::<ssl_ticket_aead_method_st>(),
        24usize,
        concat!("Size of: ", stringify!(ssl_ticket_aead_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ssl_ticket_aead_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ssl_ticket_aead_method_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_ticket_aead_method_st>())).max_overhead as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_ticket_aead_method_st),
            "::",
            stringify!(max_overhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_ticket_aead_method_st>())).seal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_ticket_aead_method_st),
            "::",
            stringify!(seal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_ticket_aead_method_st>())).open as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_ticket_aead_method_st),
            "::",
            stringify!(open)
        )
    );
}
extern "C" {
    pub fn SSL_CTX_set_ticket_aead_method(
        ctx: *mut SSL_CTX,
        aead_method: *const SSL_TICKET_AEAD_METHOD,
    );
}
extern "C" {
    pub fn SSL_process_tls13_new_session_ticket(
        ssl: *mut SSL,
        buf: *const u8,
        buf_len: usize,
    ) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_CTX_set1_curves(
        ctx: *mut SSL_CTX,
        curves: *const ::std::os::raw::c_int,
        curves_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_curves(
        ssl: *mut SSL,
        curves: *const ::std::os::raw::c_int,
        curves_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set1_curves_list(
        ctx: *mut SSL_CTX,
        curves: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_curves_list(
        ssl: *mut SSL,
        curves: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_curve_id(ssl: *const SSL) -> u16;
}
extern "C" {
    pub fn SSL_get_curve_name(curve_id: u16) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CTX_set_verify(
        ctx: *mut SSL_CTX,
        mode: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ok: ::std::os::raw::c_int,
                store_ctx: *mut X509_STORE_CTX,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SSL_set_verify(
        ssl: *mut SSL,
        mode: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ok: ::std::os::raw::c_int,
                store_ctx: *mut X509_STORE_CTX,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
impl ssl_verify_result_t {
    pub const ssl_verify_ok: ssl_verify_result_t = ssl_verify_result_t(0);
}
impl ssl_verify_result_t {
    pub const ssl_verify_invalid: ssl_verify_result_t = ssl_verify_result_t(1);
}
impl ssl_verify_result_t {
    pub const ssl_verify_retry: ssl_verify_result_t = ssl_verify_result_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_verify_result_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn SSL_CTX_set_custom_verify(
        ctx: *mut SSL_CTX,
        mode: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(ssl: *mut SSL, out_alert: *mut u8) -> ssl_verify_result_t,
        >,
    );
}
extern "C" {
    pub fn SSL_set_custom_verify(
        ssl: *mut SSL,
        mode: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(ssl: *mut SSL, out_alert: *mut u8) -> ssl_verify_result_t,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_get_verify_mode(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_verify_mode(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_verify_callback(
        ctx: *const SSL_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ctx: ::std::os::raw::c_int,
            arg1: *mut X509_STORE_CTX,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn SSL_get_verify_callback(
        ssl: *const SSL,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ssl: ::std::os::raw::c_int,
            arg1: *mut X509_STORE_CTX,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn SSL_CTX_set_verify_depth(ctx: *mut SSL_CTX, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_verify_depth(ssl: *mut SSL, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_get_verify_depth(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_verify_depth(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set1_param(
        ctx: *mut SSL_CTX,
        param: *const X509_VERIFY_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_param(ssl: *mut SSL, param: *const X509_VERIFY_PARAM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get0_param(ctx: *mut SSL_CTX) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn SSL_get0_param(ssl: *mut SSL) -> *mut X509_VERIFY_PARAM;
}
extern "C" {
    pub fn SSL_CTX_set_purpose(
        ctx: *mut SSL_CTX,
        purpose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_purpose(ssl: *mut SSL, purpose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_trust(
        ctx: *mut SSL_CTX,
        trust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_trust(ssl: *mut SSL, trust: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_cert_store(ctx: *mut SSL_CTX, store: *mut X509_STORE);
}
extern "C" {
    pub fn SSL_CTX_get_cert_store(ctx: *const SSL_CTX) -> *mut X509_STORE;
}
extern "C" {
    pub fn SSL_CTX_set_default_verify_paths(ctx: *mut SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_load_verify_locations(
        ctx: *mut SSL_CTX,
        ca_file: *const ::std::os::raw::c_char,
        ca_dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_verify_result(ssl: *const SSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SSL_alert_from_verify_result(result: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_ex_data_X509_STORE_CTX_idx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_cert_verify_callback(
        ctx: *mut SSL_CTX,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                store_ctx: *mut X509_STORE_CTX,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_enable_signed_cert_timestamps(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_CTX_enable_signed_cert_timestamps(ctx: *mut SSL_CTX);
}
extern "C" {
    pub fn SSL_enable_ocsp_stapling(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_CTX_enable_ocsp_stapling(ctx: *mut SSL_CTX);
}
extern "C" {
    pub fn SSL_CTX_set0_verify_cert_store(
        ctx: *mut SSL_CTX,
        store: *mut X509_STORE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set1_verify_cert_store(
        ctx: *mut SSL_CTX,
        store: *mut X509_STORE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set0_verify_cert_store(
        ssl: *mut SSL,
        store: *mut X509_STORE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_verify_cert_store(
        ssl: *mut SSL,
        store: *mut X509_STORE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_verify_algorithm_prefs(
        ctx: *mut SSL_CTX,
        prefs: *const u16,
        num_prefs: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_verify_algorithm_prefs(
        ssl: *mut SSL,
        prefs: *const u16,
        num_prefs: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_client_CA_list(ssl: *mut SSL, name_list: *mut stack_st_X509_NAME);
}
extern "C" {
    pub fn SSL_CTX_set_client_CA_list(ctx: *mut SSL_CTX, name_list: *mut stack_st_X509_NAME);
}
extern "C" {
    pub fn SSL_set0_client_CAs(ssl: *mut SSL, name_list: *mut stack_st_CRYPTO_BUFFER);
}
extern "C" {
    pub fn SSL_CTX_set0_client_CAs(ctx: *mut SSL_CTX, name_list: *mut stack_st_CRYPTO_BUFFER);
}
extern "C" {
    pub fn SSL_get_client_CA_list(ssl: *const SSL) -> *mut stack_st_X509_NAME;
}
extern "C" {
    pub fn SSL_get0_server_requested_CAs(ssl: *const SSL) -> *const stack_st_CRYPTO_BUFFER;
}
extern "C" {
    pub fn SSL_CTX_get_client_CA_list(ctx: *const SSL_CTX) -> *mut stack_st_X509_NAME;
}
extern "C" {
    pub fn SSL_add_client_CA(ssl: *mut SSL, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_add_client_CA(ctx: *mut SSL_CTX, x509: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_load_client_CA_file(file: *const ::std::os::raw::c_char) -> *mut stack_st_X509_NAME;
}
extern "C" {
    pub fn SSL_dup_CA_list(list: *mut stack_st_X509_NAME) -> *mut stack_st_X509_NAME;
}
extern "C" {
    pub fn SSL_add_file_cert_subjects_to_stack(
        out: *mut stack_st_X509_NAME,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tlsext_host_name(
        ssl: *mut SSL,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_servername(
        ssl: *const SSL,
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_servername_type(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_servername_callback(
        ctx: *mut SSL_CTX,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                out_alert: *mut ::std::os::raw::c_int,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_servername_arg(
        ctx: *mut SSL_CTX,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_SSL_CTX(ssl: *mut SSL, ctx: *mut SSL_CTX) -> *mut SSL_CTX;
}
extern "C" {
    pub fn SSL_CTX_set_alpn_protos(
        ctx: *mut SSL_CTX,
        protos: *const u8,
        protos_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_alpn_protos(
        ssl: *mut SSL,
        protos: *const u8,
        protos_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_alpn_select_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                out: *mut *const u8,
                out_len: *mut u8,
                in_: *const u8,
                in_len: ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_get0_alpn_selected(
        ssl: *const SSL,
        out_data: *mut *const u8,
        out_len: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn SSL_CTX_set_allow_unknown_alpn_protos(ctx: *mut SSL_CTX, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_add_application_settings(
        ssl: *mut SSL,
        proto: *const u8,
        proto_len: usize,
        settings: *const u8,
        settings_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get0_peer_application_settings(
        ssl: *const SSL,
        out_data: *mut *const u8,
        out_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_has_application_settings(ssl: *const SSL) -> ::std::os::raw::c_int;
}
pub type ssl_cert_compression_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut SSL,
        out: *mut CBB,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type ssl_cert_decompression_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut SSL,
        out: *mut *mut CRYPTO_BUFFER,
        uncompressed_len: usize,
        in_: *const u8,
        in_len: usize,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn SSL_CTX_add_cert_compression_alg(
        ctx: *mut SSL_CTX,
        alg_id: u16,
        compress: ssl_cert_compression_func_t,
        decompress: ssl_cert_decompression_func_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_next_protos_advertised_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                out: *mut *const u8,
                out_len: *mut ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_CTX_set_next_proto_select_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                out: *mut *mut u8,
                out_len: *mut u8,
                in_: *const u8,
                in_len: ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SSL_get0_next_proto_negotiated(
        ssl: *const SSL,
        out_data: *mut *const u8,
        out_len: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn SSL_select_next_proto(
        out: *mut *mut u8,
        out_len: *mut u8,
        peer: *const u8,
        peer_len: ::std::os::raw::c_uint,
        supported: *const u8,
        supported_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tls_channel_id_enabled(ctx: *mut SSL_CTX, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_tls_channel_id_enabled(ssl: *mut SSL, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_set1_tls_channel_id(
        ctx: *mut SSL_CTX,
        private_key: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_tls_channel_id(
        ssl: *mut SSL,
        private_key: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_tls_channel_id(ssl: *mut SSL, out: *mut u8, max_out: usize) -> usize;
}
extern "C" {
    pub fn SSL_CTX_set_channel_id_cb(
        ctx: *mut SSL_CTX,
        channel_id_cb: ::std::option::Option<
            unsafe extern "C" fn(ssl: *mut SSL, out_pkey: *mut *mut EVP_PKEY),
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_get_channel_id_cb(
        ctx: *mut SSL_CTX,
    ) -> ::std::option::Option<unsafe extern "C" fn(ctx: *mut SSL, arg1: *mut *mut EVP_PKEY)>;
}
extern "C" {
    pub fn SSL_set_token_binding_params(
        ssl: *mut SSL,
        params: *const u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_is_token_binding_negotiated(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_negotiated_token_binding_param(ssl: *const SSL) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct srtp_protection_profile_st {
    pub name: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_srtp_protection_profile_st() {
    assert_eq!(
        ::std::mem::size_of::<srtp_protection_profile_st>(),
        16usize,
        concat!("Size of: ", stringify!(srtp_protection_profile_st))
    );
    assert_eq!(
        ::std::mem::align_of::<srtp_protection_profile_st>(),
        8usize,
        concat!("Alignment of ", stringify!(srtp_protection_profile_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_protection_profile_st>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_protection_profile_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<srtp_protection_profile_st>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(srtp_protection_profile_st),
            "::",
            stringify!(id)
        )
    );
}
impl Default for srtp_protection_profile_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_SRTP_PROTECTION_PROFILE {
    _unused: [u8; 0],
}
pub type stack_SRTP_PROTECTION_PROFILE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const SRTP_PROTECTION_PROFILE)>;
pub type stack_SRTP_PROTECTION_PROFILE_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const SRTP_PROTECTION_PROFILE) -> *const SRTP_PROTECTION_PROFILE,
>;
pub type stack_SRTP_PROTECTION_PROFILE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const SRTP_PROTECTION_PROFILE,
        b: *mut *const SRTP_PROTECTION_PROFILE,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn SSL_CTX_set_srtp_profiles(
        ctx: *mut SSL_CTX,
        profiles: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_srtp_profiles(
        ssl: *mut SSL,
        profiles: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_srtp_profiles(ssl: *mut SSL) -> *mut stack_st_SRTP_PROTECTION_PROFILE;
}
extern "C" {
    pub fn SSL_get_selected_srtp_profile(ssl: *mut SSL) -> *const SRTP_PROTECTION_PROFILE;
}
extern "C" {
    pub fn SSL_CTX_set_psk_client_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                hint: *const ::std::os::raw::c_char,
                identity: *mut ::std::os::raw::c_char,
                max_identity_len: ::std::os::raw::c_uint,
                psk: *mut u8,
                max_psk_len: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_uint,
        >,
    );
}
extern "C" {
    pub fn SSL_set_psk_client_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                hint: *const ::std::os::raw::c_char,
                identity: *mut ::std::os::raw::c_char,
                max_identity_len: ::std::os::raw::c_uint,
                psk: *mut u8,
                max_psk_len: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_uint,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_set_psk_server_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                identity: *const ::std::os::raw::c_char,
                psk: *mut u8,
                max_psk_len: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_uint,
        >,
    );
}
extern "C" {
    pub fn SSL_set_psk_server_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                identity: *const ::std::os::raw::c_char,
                psk: *mut u8,
                max_psk_len: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_uint,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_use_psk_identity_hint(
        ctx: *mut SSL_CTX,
        identity_hint: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_use_psk_identity_hint(
        ssl: *mut SSL,
        identity_hint: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_psk_identity_hint(ssl: *const SSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_psk_identity(ssl: *const SSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_set1_delegated_credential(
        ssl: *mut SSL,
        dc: *mut CRYPTO_BUFFER,
        pkey: *mut EVP_PKEY,
        key_method: *const SSL_PRIVATE_KEY_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_delegated_credential_used(ssl: *const SSL) -> ::std::os::raw::c_int;
}
impl ssl_encryption_level_t {
    pub const ssl_encryption_initial: ssl_encryption_level_t = ssl_encryption_level_t(0);
}
impl ssl_encryption_level_t {
    pub const ssl_encryption_early_data: ssl_encryption_level_t = ssl_encryption_level_t(1);
}
impl ssl_encryption_level_t {
    pub const ssl_encryption_handshake: ssl_encryption_level_t = ssl_encryption_level_t(2);
}
impl ssl_encryption_level_t {
    pub const ssl_encryption_application: ssl_encryption_level_t = ssl_encryption_level_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_encryption_level_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ssl_quic_method_st {
    pub set_read_secret: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            level: ssl_encryption_level_t,
            cipher: *const SSL_CIPHER,
            secret: *const u8,
            secret_len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_write_secret: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            level: ssl_encryption_level_t,
            cipher: *const SSL_CIPHER,
            secret: *const u8,
            secret_len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_handshake_data: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            level: ssl_encryption_level_t,
            data: *const u8,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_flight:
        ::std::option::Option<unsafe extern "C" fn(ssl: *mut SSL) -> ::std::os::raw::c_int>,
    pub send_alert: ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *mut SSL,
            level: ssl_encryption_level_t,
            alert: u8,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_ssl_quic_method_st() {
    assert_eq!(
        ::std::mem::size_of::<ssl_quic_method_st>(),
        40usize,
        concat!("Size of: ", stringify!(ssl_quic_method_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ssl_quic_method_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ssl_quic_method_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_quic_method_st>())).set_read_secret as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_quic_method_st),
            "::",
            stringify!(set_read_secret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_quic_method_st>())).set_write_secret as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_quic_method_st),
            "::",
            stringify!(set_write_secret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_quic_method_st>())).add_handshake_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_quic_method_st),
            "::",
            stringify!(add_handshake_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_quic_method_st>())).flush_flight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_quic_method_st),
            "::",
            stringify!(flush_flight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_quic_method_st>())).send_alert as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_quic_method_st),
            "::",
            stringify!(send_alert)
        )
    );
}
extern "C" {
    pub fn SSL_quic_max_handshake_flight_len(
        ssl: *const SSL,
        level: ssl_encryption_level_t,
    ) -> usize;
}
extern "C" {
    pub fn SSL_quic_read_level(ssl: *const SSL) -> ssl_encryption_level_t;
}
extern "C" {
    pub fn SSL_quic_write_level(ssl: *const SSL) -> ssl_encryption_level_t;
}
extern "C" {
    pub fn SSL_provide_quic_data(
        ssl: *mut SSL,
        level: ssl_encryption_level_t,
        data: *const u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_process_quic_post_handshake(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_quic_method(
        ctx: *mut SSL_CTX,
        quic_method: *const SSL_QUIC_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_quic_method(
        ssl: *mut SSL,
        quic_method: *const SSL_QUIC_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_quic_transport_params(
        ssl: *mut SSL,
        params: *const u8,
        params_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_peer_quic_transport_params(
        ssl: *const SSL,
        out_params: *mut *const u8,
        out_params_len: *mut usize,
    );
}
extern "C" {
    pub fn SSL_set_quic_use_legacy_codepoint(ssl: *mut SSL, use_legacy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_quic_early_data_context(
        ssl: *mut SSL,
        context: *const u8,
        context_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_early_data_enabled(ctx: *mut SSL_CTX, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_early_data_enabled(ssl: *mut SSL, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_in_early_data(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_early_data_capable(session: *const SSL_SESSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_copy_without_early_data(session: *mut SSL_SESSION) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_early_data_accepted(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_reset_early_data_reject(ssl: *mut SSL);
}
extern "C" {
    pub fn SSL_get_ticket_age_skew(ssl: *const SSL) -> i32;
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_unknown: ssl_early_data_reason_t = ssl_early_data_reason_t(0);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_disabled: ssl_early_data_reason_t = ssl_early_data_reason_t(1);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_accepted: ssl_early_data_reason_t = ssl_early_data_reason_t(2);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_protocol_version: ssl_early_data_reason_t = ssl_early_data_reason_t(3);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_peer_declined: ssl_early_data_reason_t = ssl_early_data_reason_t(4);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_no_session_offered: ssl_early_data_reason_t =
        ssl_early_data_reason_t(5);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_session_not_resumed: ssl_early_data_reason_t =
        ssl_early_data_reason_t(6);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_unsupported_for_session: ssl_early_data_reason_t =
        ssl_early_data_reason_t(7);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_hello_retry_request: ssl_early_data_reason_t =
        ssl_early_data_reason_t(8);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_alpn_mismatch: ssl_early_data_reason_t = ssl_early_data_reason_t(9);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_channel_id: ssl_early_data_reason_t = ssl_early_data_reason_t(10);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_token_binding: ssl_early_data_reason_t = ssl_early_data_reason_t(11);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_ticket_age_skew: ssl_early_data_reason_t = ssl_early_data_reason_t(12);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_quic_parameter_mismatch: ssl_early_data_reason_t =
        ssl_early_data_reason_t(13);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_alps_mismatch: ssl_early_data_reason_t = ssl_early_data_reason_t(14);
}
impl ssl_early_data_reason_t {
    pub const ssl_early_data_reason_max_value: ssl_early_data_reason_t =
        ssl_early_data_reason_t(14);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_early_data_reason_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn SSL_get_early_data_reason(ssl: *const SSL) -> ssl_early_data_reason_t;
}
extern "C" {
    pub fn SSL_early_data_reason_string(
        reason: ssl_early_data_reason_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_set_enable_ech_grease(ssl: *mut SSL, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_alert_type_string_long(
        value: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_alert_desc_string_long(
        value: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_send_fatal_alert(ssl: *mut SSL, alert: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_ex_data(
        ssl: *mut SSL,
        idx: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_ex_data(
        ssl: *const SSL,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SSL_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_set_ex_data(
        session: *mut SSL_SESSION,
        idx: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_SESSION_get_ex_data(
        session: *const SSL_SESSION,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SSL_SESSION_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_ex_data(
        ctx: *mut SSL_CTX,
        idx: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_ex_data(
        ctx: *const SSL_CTX,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SSL_CTX_get_ex_new_index(
        argl: ::std::os::raw::c_long,
        argp: *mut ::std::os::raw::c_void,
        unused: *mut CRYPTO_EX_unused,
        dup_unused: CRYPTO_EX_dup,
        free_func: CRYPTO_EX_free,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_ivs(
        ssl: *const SSL,
        out_read_iv: *mut *const u8,
        out_write_iv: *mut *const u8,
        out_iv_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_key_block_len(ssl: *const SSL) -> usize;
}
extern "C" {
    pub fn SSL_generate_key_block(
        ssl: *const SSL,
        out: *mut u8,
        out_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_read_sequence(ssl: *const SSL) -> u64;
}
extern "C" {
    pub fn SSL_get_write_sequence(ssl: *const SSL) -> u64;
}
extern "C" {
    pub fn SSL_CTX_set_msg_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                write_p: ::std::os::raw::c_int,
                version: ::std::os::raw::c_int,
                content_type: ::std::os::raw::c_int,
                buf: *const ::std::os::raw::c_void,
                len: usize,
                ssl: *mut SSL,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_set_msg_callback_arg(ctx: *mut SSL_CTX, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SSL_set_msg_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                write_p: ::std::os::raw::c_int,
                version: ::std::os::raw::c_int,
                content_type: ::std::os::raw::c_int,
                buf: *const ::std::os::raw::c_void,
                len: usize,
                ssl: *mut SSL,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
extern "C" {
    pub fn SSL_set_msg_callback_arg(ssl: *mut SSL, arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SSL_CTX_set_keylog_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(ssl: *const SSL, line: *const ::std::os::raw::c_char),
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_get_keylog_callback(
        ctx: *const SSL_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(ctx: *const SSL, arg1: *const ::std::os::raw::c_char),
    >;
}
extern "C" {
    pub fn SSL_CTX_set_current_time_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<unsafe extern "C" fn(ssl: *const SSL, out_clock: *mut timeval)>,
    );
}
extern "C" {
    pub fn SSL_set_shed_handshake_config(ssl: *mut SSL, enable: ::std::os::raw::c_int);
}
impl ssl_renegotiate_mode_t {
    pub const ssl_renegotiate_never: ssl_renegotiate_mode_t = ssl_renegotiate_mode_t(0);
}
impl ssl_renegotiate_mode_t {
    pub const ssl_renegotiate_once: ssl_renegotiate_mode_t = ssl_renegotiate_mode_t(1);
}
impl ssl_renegotiate_mode_t {
    pub const ssl_renegotiate_freely: ssl_renegotiate_mode_t = ssl_renegotiate_mode_t(2);
}
impl ssl_renegotiate_mode_t {
    pub const ssl_renegotiate_ignore: ssl_renegotiate_mode_t = ssl_renegotiate_mode_t(3);
}
impl ssl_renegotiate_mode_t {
    pub const ssl_renegotiate_explicit: ssl_renegotiate_mode_t = ssl_renegotiate_mode_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_renegotiate_mode_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn SSL_set_renegotiate_mode(ssl: *mut SSL, mode: ssl_renegotiate_mode_t);
}
extern "C" {
    pub fn SSL_renegotiate(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_renegotiate_pending(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_total_renegotiations(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_max_cert_list(ctx: *const SSL_CTX) -> usize;
}
extern "C" {
    pub fn SSL_CTX_set_max_cert_list(ctx: *mut SSL_CTX, max_cert_list: usize);
}
extern "C" {
    pub fn SSL_get_max_cert_list(ssl: *const SSL) -> usize;
}
extern "C" {
    pub fn SSL_set_max_cert_list(ssl: *mut SSL, max_cert_list: usize);
}
extern "C" {
    pub fn SSL_CTX_set_max_send_fragment(
        ctx: *mut SSL_CTX,
        max_send_fragment: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_max_send_fragment(
        ssl: *mut SSL,
        max_send_fragment: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ssl_early_callback_ctx {
    pub ssl: *mut SSL,
    pub client_hello: *const u8,
    pub client_hello_len: usize,
    pub version: u16,
    pub random: *const u8,
    pub random_len: usize,
    pub session_id: *const u8,
    pub session_id_len: usize,
    pub cipher_suites: *const u8,
    pub cipher_suites_len: usize,
    pub compression_methods: *const u8,
    pub compression_methods_len: usize,
    pub extensions: *const u8,
    pub extensions_len: usize,
}
#[test]
fn bindgen_test_layout_ssl_early_callback_ctx() {
    assert_eq!(
        ::std::mem::size_of::<ssl_early_callback_ctx>(),
        112usize,
        concat!("Size of: ", stringify!(ssl_early_callback_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<ssl_early_callback_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(ssl_early_callback_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_early_callback_ctx>())).ssl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(ssl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).client_hello as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(client_hello)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).client_hello_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(client_hello_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_early_callback_ctx>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_early_callback_ctx>())).random as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).random_len as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(random_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).session_id as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).session_id_len as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(session_id_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).cipher_suites as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(cipher_suites)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).cipher_suites_len as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(cipher_suites_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).compression_methods as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(compression_methods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).compression_methods_len as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(compression_methods_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).extensions as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ssl_early_callback_ctx>())).extensions_len as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_early_callback_ctx),
            "::",
            stringify!(extensions_len)
        )
    );
}
impl Default for ssl_early_callback_ctx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type SSL_CLIENT_HELLO = ssl_early_callback_ctx;
impl ssl_select_cert_result_t {
    pub const ssl_select_cert_success: ssl_select_cert_result_t = ssl_select_cert_result_t(1);
}
impl ssl_select_cert_result_t {
    pub const ssl_select_cert_retry: ssl_select_cert_result_t = ssl_select_cert_result_t(0);
}
impl ssl_select_cert_result_t {
    pub const ssl_select_cert_error: ssl_select_cert_result_t = ssl_select_cert_result_t(-1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ssl_select_cert_result_t(pub ::std::os::raw::c_int);
extern "C" {
    pub fn SSL_early_callback_ctx_extension_get(
        client_hello: *const SSL_CLIENT_HELLO,
        extension_type: u16,
        out_data: *mut *const u8,
        out_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_select_certificate_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const SSL_CLIENT_HELLO) -> ssl_select_cert_result_t,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_set_dos_protection_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const SSL_CLIENT_HELLO) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_set_reverify_on_resume(ctx: *mut SSL_CTX, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_enforce_rsa_key_usage(ssl: *mut SSL, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_set_info_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *const SSL,
                type_: ::std::os::raw::c_int,
                value: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_get_info_callback(
        ctx: *mut SSL_CTX,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *const SSL,
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub fn SSL_set_info_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *const SSL,
                type_: ::std::os::raw::c_int,
                value: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn SSL_get_info_callback(
        ssl: *const SSL,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            ssl: *const SSL,
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub fn SSL_state_string_long(ssl: *const SSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_shutdown(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_peer_signature_algorithm(ssl: *const SSL) -> u16;
}
extern "C" {
    pub fn SSL_get_client_random(ssl: *const SSL, out: *mut u8, max_out: usize) -> usize;
}
extern "C" {
    pub fn SSL_get_server_random(ssl: *const SSL, out: *mut u8, max_out: usize) -> usize;
}
extern "C" {
    pub fn SSL_get_pending_cipher(ssl: *const SSL) -> *const SSL_CIPHER;
}
extern "C" {
    pub fn SSL_set_retain_only_sha256_of_client_certs(ssl: *mut SSL, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_set_retain_only_sha256_of_client_certs(
        ctx: *mut SSL_CTX,
        enable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SSL_CTX_set_grease_enabled(ctx: *mut SSL_CTX, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_max_seal_overhead(ssl: *const SSL) -> usize;
}
extern "C" {
    pub fn SSL_CTX_set_false_start_allowed_without_alpn(
        ctx: *mut SSL_CTX,
        allowed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SSL_used_hello_retry_request(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_jdk11_workaround(ssl: *mut SSL, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_library_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_description(
        cipher: *const SSL_CIPHER,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CIPHER_get_version(cipher: *const SSL_CIPHER) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CIPHER_get_rfc_name(cipher: *const SSL_CIPHER) -> *mut ::std::os::raw::c_char;
}
pub type COMP_METHOD = ::std::os::raw::c_void;
pub type SSL_COMP = ssl_comp_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_SSL_COMP {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SSL_COMP_get_compression_methods() -> *mut stack_st_SSL_COMP;
}
extern "C" {
    pub fn SSL_COMP_add_compression_method(
        id: ::std::os::raw::c_int,
        cm: *mut COMP_METHOD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_COMP_get_name(comp: *const COMP_METHOD) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_COMP_get0_name(comp: *const SSL_COMP) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_COMP_get_id(comp: *const SSL_COMP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_COMP_free_compression_methods();
}
extern "C" {
    pub fn SSLv23_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_1_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_2_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_2_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLS_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLS_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn SSLv23_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn SSLv23_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_1_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_1_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_2_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn TLSv1_2_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLS_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLS_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_2_server_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn DTLSv1_2_client_method() -> *const SSL_METHOD;
}
extern "C" {
    pub fn SSL_clear(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tmp_rsa_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                is_export: ::std::os::raw::c_int,
                keylength: ::std::os::raw::c_int,
            ) -> *mut RSA,
        >,
    );
}
extern "C" {
    pub fn SSL_set_tmp_rsa_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                is_export: ::std::os::raw::c_int,
                keylength: ::std::os::raw::c_int,
            ) -> *mut RSA,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_sess_connect(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_connect_good(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_connect_renegotiate(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_accept(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_accept_renegotiate(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_accept_good(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_hits(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_cb_hits(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_misses(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_timeouts(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_sess_cache_full(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_cutthrough_complete(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_num_renegotiations(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_need_tmp_RSA(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_need_tmp_RSA(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tmp_rsa(ctx: *mut SSL_CTX, rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tmp_rsa(ssl: *mut SSL, rsa: *const RSA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_get_read_ahead(ctx: *const SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_read_ahead(
        ctx: *mut SSL_CTX,
        yes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_read_ahead(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_read_ahead(ssl: *mut SSL, yes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_state(ssl: *mut SSL, state: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_get_shared_ciphers(
        ssl: *const SSL,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_shared_sigalgs(
        ssl: *mut SSL,
        idx: ::std::os::raw::c_int,
        psign: *mut ::std::os::raw::c_int,
        phash: *mut ::std::os::raw::c_int,
        psignandhash: *mut ::std::os::raw::c_int,
        rsig: *mut u8,
        rhash: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2d_SSL_SESSION(in_: *mut SSL_SESSION, pp: *mut *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_SSL_SESSION(
        a: *mut *mut SSL_SESSION,
        pp: *mut *const u8,
        length: ::std::os::raw::c_long,
    ) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn i2d_SSL_SESSION_bio(bio: *mut BIO, session: *const SSL_SESSION)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d2i_SSL_SESSION_bio(bio: *mut BIO, out: *mut *mut SSL_SESSION) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn ERR_load_SSL_strings();
}
extern "C" {
    pub fn SSL_load_error_strings();
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_use_srtp(
        ctx: *mut SSL_CTX,
        profiles: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tlsext_use_srtp(
        ssl: *mut SSL,
        profiles: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_current_compression(ssl: *mut SSL) -> *const COMP_METHOD;
}
extern "C" {
    pub fn SSL_get_current_expansion(ssl: *mut SSL) -> *const COMP_METHOD;
}
extern "C" {
    pub fn SSL_get_server_tmp_key(
        ssl: *mut SSL,
        out_key: *mut *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tmp_dh(ctx: *mut SSL_CTX, dh: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tmp_dh(ssl: *mut SSL, dh: *const DH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tmp_dh_callback(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                is_export: ::std::os::raw::c_int,
                keylength: ::std::os::raw::c_int,
            ) -> *mut DH,
        >,
    );
}
extern "C" {
    pub fn SSL_set_tmp_dh_callback(
        ssl: *mut SSL,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                is_export: ::std::os::raw::c_int,
                keylength: ::std::os::raw::c_int,
            ) -> *mut DH,
        >,
    );
}
extern "C" {
    pub fn SSL_CTX_set1_sigalgs(
        ctx: *mut SSL_CTX,
        values: *const ::std::os::raw::c_int,
        num_values: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_sigalgs(
        ssl: *mut SSL,
        values: *const ::std::os::raw::c_int,
        num_values: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set1_sigalgs_list(
        ctx: *mut SSL_CTX,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set1_sigalgs_list(
        ssl: *mut SSL,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ssl_comp_st {
    pub id: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub method: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ssl_comp_st() {
    assert_eq!(
        ::std::mem::size_of::<ssl_comp_st>(),
        24usize,
        concat!("Size of: ", stringify!(ssl_comp_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ssl_comp_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ssl_comp_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_comp_st>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_comp_st),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_comp_st>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_comp_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ssl_comp_st>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ssl_comp_st),
            "::",
            stringify!(method)
        )
    );
}
impl Default for ssl_comp_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_SSL_COMP_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut SSL_COMP)>;
pub type stack_SSL_COMP_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut SSL_COMP) -> *mut SSL_COMP>;
pub type stack_SSL_COMP_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(a: *mut *const SSL_COMP, b: *mut *const SSL_COMP) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn SSL_cache_hit(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_default_timeout(ssl: *const SSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SSL_get_version(ssl: *const SSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_get_cipher_list(
        ssl: *const SSL,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_CTX_set_client_cert_cb(
        ctx: *mut SSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                out_x509: *mut *mut X509,
                out_pkey: *mut *mut EVP_PKEY,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SSL_want(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_finished(
        ssl: *const SSL,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn SSL_get_peer_finished(
        ssl: *const SSL,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> usize;
}
extern "C" {
    pub fn SSL_alert_type_string(value: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_alert_desc_string(value: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSL_state_string(ssl: *const SSL) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_conf_ctx_st {
    _unused: [u8; 0],
}
pub type SSL_CONF_CTX = ssl_conf_ctx_st;
extern "C" {
    pub fn SSL_state(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_shutdown(ssl: *mut SSL, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_CTX_set_tmp_ecdh(ctx: *mut SSL_CTX, ec_key: *const EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tmp_ecdh(ssl: *mut SSL, ec_key: *const EC_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_add_dir_cert_subjects_to_stack(
        out: *mut stack_st_X509_NAME,
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_verify_result(ssl: *mut SSL, result: ::std::os::raw::c_long);
}
extern "C" {
    pub fn SSL_CTX_enable_tls_channel_id(ctx: *mut SSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_enable_tls_channel_id(ssl: *mut SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BIO_f_ssl() -> *const BIO_METHOD;
}
extern "C" {
    pub fn BIO_set_ssl(
        bio: *mut BIO,
        ssl: *mut SSL,
        take_owership: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SSL_get_session(ssl: *const SSL) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn SSL_get1_session(ssl: *mut SSL) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn OPENSSL_init_ssl(
        opts: u64,
        settings: *const OPENSSL_INIT_SETTINGS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tlsext_status_type(
        ssl: *mut SSL,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_tlsext_status_type(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_set_tlsext_status_ocsp_resp(
        ssl: *mut SSL,
        resp: *mut u8,
        resp_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_get_tlsext_status_ocsp_resp(ssl: *const SSL, out: *mut *const u8) -> usize;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_status_cb(
        ctx: *mut SSL_CTX,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut SSL,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CTX_set_tlsext_status_arg(
        ctx: *mut SSL_CTX,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SSL_CIPHER_get_value(cipher: *const SSL_CIPHER) -> u16;
}
extern "C" {
    pub fn SSL_CTX_set_ignore_tls13_downgrade(ctx: *mut SSL_CTX, ignore: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_set_ignore_tls13_downgrade(ssl: *mut SSL, ignore: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SSL_is_tls13_downgrade(ssl: *const SSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_experiment_v1() -> *const TRUST_TOKEN_METHOD;
}
extern "C" {
    pub fn TRUST_TOKEN_experiment_v2_voprf() -> *const TRUST_TOKEN_METHOD;
}
extern "C" {
    pub fn TRUST_TOKEN_experiment_v2_pmb() -> *const TRUST_TOKEN_METHOD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct trust_token_st {
    pub data: *mut u8,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_trust_token_st() {
    assert_eq!(
        ::std::mem::size_of::<trust_token_st>(),
        16usize,
        concat!("Size of: ", stringify!(trust_token_st))
    );
    assert_eq!(
        ::std::mem::align_of::<trust_token_st>(),
        8usize,
        concat!("Alignment of ", stringify!(trust_token_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trust_token_st>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trust_token_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trust_token_st>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trust_token_st),
            "::",
            stringify!(len)
        )
    );
}
impl Default for trust_token_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_TRUST_TOKEN {
    _unused: [u8; 0],
}
pub type stack_TRUST_TOKEN_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TRUST_TOKEN)>;
pub type stack_TRUST_TOKEN_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TRUST_TOKEN) -> *mut TRUST_TOKEN>;
pub type stack_TRUST_TOKEN_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const TRUST_TOKEN,
        b: *mut *const TRUST_TOKEN,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn TRUST_TOKEN_new(data: *const u8, len: usize) -> *mut TRUST_TOKEN;
}
extern "C" {
    pub fn TRUST_TOKEN_free(token: *mut TRUST_TOKEN);
}
extern "C" {
    pub fn TRUST_TOKEN_generate_key(
        method: *const TRUST_TOKEN_METHOD,
        out_priv_key: *mut u8,
        out_priv_key_len: *mut usize,
        max_priv_key_len: usize,
        out_pub_key: *mut u8,
        out_pub_key_len: *mut usize,
        max_pub_key_len: usize,
        id: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_new(
        method: *const TRUST_TOKEN_METHOD,
        max_batchsize: usize,
    ) -> *mut TRUST_TOKEN_CLIENT;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_free(ctx: *mut TRUST_TOKEN_CLIENT);
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_add_key(
        ctx: *mut TRUST_TOKEN_CLIENT,
        out_key_index: *mut usize,
        key: *const u8,
        key_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_set_srr_key(
        ctx: *mut TRUST_TOKEN_CLIENT,
        key: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_begin_issuance(
        ctx: *mut TRUST_TOKEN_CLIENT,
        out: *mut *mut u8,
        out_len: *mut usize,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_finish_issuance(
        ctx: *mut TRUST_TOKEN_CLIENT,
        out_key_index: *mut usize,
        response: *const u8,
        response_len: usize,
    ) -> *mut stack_st_TRUST_TOKEN;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_begin_redemption(
        ctx: *mut TRUST_TOKEN_CLIENT,
        out: *mut *mut u8,
        out_len: *mut usize,
        token: *const TRUST_TOKEN,
        data: *const u8,
        data_len: usize,
        time: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_CLIENT_finish_redemption(
        ctx: *mut TRUST_TOKEN_CLIENT,
        out_rr: *mut *mut u8,
        out_rr_len: *mut usize,
        out_sig: *mut *mut u8,
        out_sig_len: *mut usize,
        response: *const u8,
        response_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_new(
        method: *const TRUST_TOKEN_METHOD,
        max_batchsize: usize,
    ) -> *mut TRUST_TOKEN_ISSUER;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_free(ctx: *mut TRUST_TOKEN_ISSUER);
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_add_key(
        ctx: *mut TRUST_TOKEN_ISSUER,
        key: *const u8,
        key_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_set_srr_key(
        ctx: *mut TRUST_TOKEN_ISSUER,
        key: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_set_metadata_key(
        ctx: *mut TRUST_TOKEN_ISSUER,
        key: *const u8,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_issue(
        ctx: *const TRUST_TOKEN_ISSUER,
        out: *mut *mut u8,
        out_len: *mut usize,
        out_tokens_issued: *mut usize,
        request: *const u8,
        request_len: usize,
        public_metadata: u32,
        private_metadata: u8,
        max_issuance: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_redeem(
        ctx: *const TRUST_TOKEN_ISSUER,
        out: *mut *mut u8,
        out_len: *mut usize,
        out_token: *mut *mut TRUST_TOKEN,
        out_client_data: *mut *mut u8,
        out_client_data_len: *mut usize,
        out_redemption_time: *mut u64,
        request: *const u8,
        request_len: usize,
        lifetime: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_ISSUER_redeem_raw(
        ctx: *const TRUST_TOKEN_ISSUER,
        out_public: *mut u32,
        out_private: *mut u8,
        out_token: *mut *mut TRUST_TOKEN,
        out_client_data: *mut *mut u8,
        out_client_data_len: *mut usize,
        request: *const u8,
        request_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TRUST_TOKEN_decode_private_metadata(
        method: *const TRUST_TOKEN_METHOD,
        out_value: *mut u8,
        key: *const u8,
        key_len: usize,
        nonce: *const u8,
        nonce_len: usize,
        encrypted_bit: u8,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct lhash_item_st {
    pub data: *mut ::std::os::raw::c_void,
    pub next: *mut lhash_item_st,
    pub hash: u32,
}
#[test]
fn bindgen_test_layout_lhash_item_st() {
    assert_eq!(
        ::std::mem::size_of::<lhash_item_st>(),
        24usize,
        concat!("Size of: ", stringify!(lhash_item_st))
    );
    assert_eq!(
        ::std::mem::align_of::<lhash_item_st>(),
        8usize,
        concat!("Alignment of ", stringify!(lhash_item_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lhash_item_st>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lhash_item_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lhash_item_st>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lhash_item_st),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lhash_item_st>())).hash as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lhash_item_st),
            "::",
            stringify!(hash)
        )
    );
}
impl Default for lhash_item_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type LHASH_ITEM = lhash_item_st;
pub type lhash_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type lhash_cmp_func_helper = ::std::option::Option<
    unsafe extern "C" fn(
        func: lhash_cmp_func,
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type lhash_hash_func =
    ::std::option::Option<unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> u32>;
pub type lhash_hash_func_helper = ::std::option::Option<
    unsafe extern "C" fn(func: lhash_hash_func, a: *const ::std::os::raw::c_void) -> u32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lhash_st {
    _unused: [u8; 0],
}
pub type _LHASH = lhash_st;
extern "C" {
    pub fn lh_new(hash: lhash_hash_func, comp: lhash_cmp_func) -> *mut _LHASH;
}
extern "C" {
    pub fn lh_free(lh: *mut _LHASH);
}
extern "C" {
    pub fn lh_num_items(lh: *const _LHASH) -> usize;
}
extern "C" {
    pub fn lh_retrieve(
        lh: *const _LHASH,
        data: *const ::std::os::raw::c_void,
        call_hash_func: lhash_hash_func_helper,
        call_cmp_func: lhash_cmp_func_helper,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lh_retrieve_key(
        lh: *const _LHASH,
        key: *const ::std::os::raw::c_void,
        key_hash: u32,
        cmp_key: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_void,
                value: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lh_insert(
        lh: *mut _LHASH,
        old_data: *mut *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        call_hash_func: lhash_hash_func_helper,
        call_cmp_func: lhash_cmp_func_helper,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lh_delete(
        lh: *mut _LHASH,
        data: *const ::std::os::raw::c_void,
        call_hash_func: lhash_hash_func_helper,
        call_cmp_func: lhash_cmp_func_helper,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lh_doall_arg(
        lh: *mut _LHASH,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lh_strhash(c: *const ::std::os::raw::c_char) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct conf_value_st {
    pub section: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_conf_value_st() {
    assert_eq!(
        ::std::mem::size_of::<conf_value_st>(),
        24usize,
        concat!("Size of: ", stringify!(conf_value_st))
    );
    assert_eq!(
        ::std::mem::align_of::<conf_value_st>(),
        8usize,
        concat!("Alignment of ", stringify!(conf_value_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conf_value_st>())).section as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(conf_value_st),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conf_value_st>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(conf_value_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conf_value_st>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(conf_value_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for conf_value_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_CONF_VALUE {
    _unused: [u8; 0],
}
pub type stack_CONF_VALUE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CONF_VALUE)>;
pub type stack_CONF_VALUE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CONF_VALUE) -> *mut CONF_VALUE>;
pub type stack_CONF_VALUE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const CONF_VALUE,
        b: *mut *const CONF_VALUE,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lhash_st_CONF_VALUE {
    _unused: [u8; 0],
}
extern "C" {
    pub fn NCONF_new(method: *mut ::std::os::raw::c_void) -> *mut CONF;
}
extern "C" {
    pub fn NCONF_free(conf: *mut CONF);
}
extern "C" {
    pub fn NCONF_load(
        conf: *mut CONF,
        filename: *const ::std::os::raw::c_char,
        out_error_line: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NCONF_load_bio(
        conf: *mut CONF,
        bio: *mut BIO,
        out_error_line: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NCONF_get_section(
        conf: *const CONF,
        section: *const ::std::os::raw::c_char,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn NCONF_get_string(
        conf: *const CONF,
        section: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CONF_parse_list(
        list: *const ::std::os::raw::c_char,
        sep: ::std::os::raw::c_char,
        remove_whitespace: ::std::os::raw::c_int,
        list_cb: ::std::option::Option<
            unsafe extern "C" fn(
                elem: *const ::std::os::raw::c_char,
                len: ::std::os::raw::c_int,
                usr: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONF_modules_load_file(
        filename: *const ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONF_modules_free();
}
extern "C" {
    pub fn OPENSSL_config(config_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OPENSSL_no_config();
}
pub type X509V3_EXT_NEW =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type X509V3_EXT_FREE =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type X509V3_EXT_D2I = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type X509V3_EXT_I2D = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type X509V3_EXT_I2V = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ext: *mut ::std::os::raw::c_void,
        extlist: *mut stack_st_CONF_VALUE,
    ) -> *mut stack_st_CONF_VALUE,
>;
pub type X509V3_EXT_V2I = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ctx: *mut v3_ext_ctx,
        values: *mut stack_st_CONF_VALUE,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type X509V3_EXT_I2S = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ext: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type X509V3_EXT_S2I = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ctx: *mut v3_ext_ctx,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type X509V3_EXT_I2R = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ext: *mut ::std::os::raw::c_void,
        out: *mut BIO,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type X509V3_EXT_R2I = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const v3_ext_method,
        ctx: *mut v3_ext_ctx,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct v3_ext_method {
    pub ext_nid: ::std::os::raw::c_int,
    pub ext_flags: ::std::os::raw::c_int,
    pub it: *mut ASN1_ITEM_EXP,
    pub ext_new: X509V3_EXT_NEW,
    pub ext_free: X509V3_EXT_FREE,
    pub d2i: X509V3_EXT_D2I,
    pub i2d: X509V3_EXT_I2D,
    pub i2s: X509V3_EXT_I2S,
    pub s2i: X509V3_EXT_S2I,
    pub i2v: X509V3_EXT_I2V,
    pub v2i: X509V3_EXT_V2I,
    pub i2r: X509V3_EXT_I2R,
    pub r2i: X509V3_EXT_R2I,
    pub usr_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_v3_ext_method() {
    assert_eq!(
        ::std::mem::size_of::<v3_ext_method>(),
        104usize,
        concat!("Size of: ", stringify!(v3_ext_method))
    );
    assert_eq!(
        ::std::mem::align_of::<v3_ext_method>(),
        8usize,
        concat!("Alignment of ", stringify!(v3_ext_method))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).ext_nid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(ext_nid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).ext_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(ext_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).it as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(it)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).ext_new as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(ext_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).ext_free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(ext_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).d2i as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(d2i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).i2d as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(i2d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).i2s as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(i2s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).s2i as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(s2i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).i2v as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(i2v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).v2i as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(v2i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).i2r as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(i2r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).r2i as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(r2i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_method>())).usr_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_method),
            "::",
            stringify!(usr_data)
        )
    );
}
impl Default for v3_ext_method {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct X509V3_CONF_METHOD_st {
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut ::std::os::raw::c_void,
            section: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub get_section: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut ::std::os::raw::c_void,
            section: *const ::std::os::raw::c_char,
        ) -> *mut stack_st_CONF_VALUE,
    >,
    pub free_string: ::std::option::Option<
        unsafe extern "C" fn(db: *mut ::std::os::raw::c_void, string: *mut ::std::os::raw::c_char),
    >,
    pub free_section: ::std::option::Option<
        unsafe extern "C" fn(db: *mut ::std::os::raw::c_void, section: *mut stack_st_CONF_VALUE),
    >,
}
#[test]
fn bindgen_test_layout_X509V3_CONF_METHOD_st() {
    assert_eq!(
        ::std::mem::size_of::<X509V3_CONF_METHOD_st>(),
        32usize,
        concat!("Size of: ", stringify!(X509V3_CONF_METHOD_st))
    );
    assert_eq!(
        ::std::mem::align_of::<X509V3_CONF_METHOD_st>(),
        8usize,
        concat!("Alignment of ", stringify!(X509V3_CONF_METHOD_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<X509V3_CONF_METHOD_st>())).get_string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(X509V3_CONF_METHOD_st),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<X509V3_CONF_METHOD_st>())).get_section as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(X509V3_CONF_METHOD_st),
            "::",
            stringify!(get_section)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<X509V3_CONF_METHOD_st>())).free_string as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(X509V3_CONF_METHOD_st),
            "::",
            stringify!(free_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<X509V3_CONF_METHOD_st>())).free_section as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(X509V3_CONF_METHOD_st),
            "::",
            stringify!(free_section)
        )
    );
}
pub type X509V3_CONF_METHOD = X509V3_CONF_METHOD_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct v3_ext_ctx {
    pub flags: ::std::os::raw::c_int,
    pub issuer_cert: *mut X509,
    pub subject_cert: *mut X509,
    pub subject_req: *mut X509_REQ,
    pub crl: *mut X509_CRL,
    pub db_meth: *const X509V3_CONF_METHOD,
    pub db: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_v3_ext_ctx() {
    assert_eq!(
        ::std::mem::size_of::<v3_ext_ctx>(),
        56usize,
        concat!("Size of: ", stringify!(v3_ext_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<v3_ext_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(v3_ext_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).issuer_cert as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(issuer_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).subject_cert as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(subject_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).subject_req as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(subject_req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).crl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).db_meth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(db_meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<v3_ext_ctx>())).db as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v3_ext_ctx),
            "::",
            stringify!(db)
        )
    );
}
impl Default for v3_ext_ctx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X509V3_EXT_METHOD = v3_ext_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509V3_EXT_METHOD {
    _unused: [u8; 0],
}
pub type stack_X509V3_EXT_METHOD_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509V3_EXT_METHOD)>;
pub type stack_X509V3_EXT_METHOD_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut X509V3_EXT_METHOD) -> *mut X509V3_EXT_METHOD,
>;
pub type stack_X509V3_EXT_METHOD_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509V3_EXT_METHOD,
        b: *mut *const X509V3_EXT_METHOD,
    ) -> ::std::os::raw::c_int,
>;
pub type ENUMERATED_NAMES = BIT_STRING_BITNAME;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct BASIC_CONSTRAINTS_st {
    pub ca: ::std::os::raw::c_int,
    pub pathlen: *mut ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_BASIC_CONSTRAINTS_st() {
    assert_eq!(
        ::std::mem::size_of::<BASIC_CONSTRAINTS_st>(),
        16usize,
        concat!("Size of: ", stringify!(BASIC_CONSTRAINTS_st))
    );
    assert_eq!(
        ::std::mem::align_of::<BASIC_CONSTRAINTS_st>(),
        8usize,
        concat!("Alignment of ", stringify!(BASIC_CONSTRAINTS_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BASIC_CONSTRAINTS_st>())).ca as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BASIC_CONSTRAINTS_st),
            "::",
            stringify!(ca)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BASIC_CONSTRAINTS_st>())).pathlen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BASIC_CONSTRAINTS_st),
            "::",
            stringify!(pathlen)
        )
    );
}
impl Default for BASIC_CONSTRAINTS_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct otherName_st {
    pub type_id: *mut ASN1_OBJECT,
    pub value: *mut ASN1_TYPE,
}
#[test]
fn bindgen_test_layout_otherName_st() {
    assert_eq!(
        ::std::mem::size_of::<otherName_st>(),
        16usize,
        concat!("Size of: ", stringify!(otherName_st))
    );
    assert_eq!(
        ::std::mem::align_of::<otherName_st>(),
        8usize,
        concat!("Alignment of ", stringify!(otherName_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<otherName_st>())).type_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(otherName_st),
            "::",
            stringify!(type_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<otherName_st>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(otherName_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for otherName_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type OTHERNAME = otherName_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct EDIPartyName_st {
    pub nameAssigner: *mut ASN1_STRING,
    pub partyName: *mut ASN1_STRING,
}
#[test]
fn bindgen_test_layout_EDIPartyName_st() {
    assert_eq!(
        ::std::mem::size_of::<EDIPartyName_st>(),
        16usize,
        concat!("Size of: ", stringify!(EDIPartyName_st))
    );
    assert_eq!(
        ::std::mem::align_of::<EDIPartyName_st>(),
        8usize,
        concat!("Alignment of ", stringify!(EDIPartyName_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EDIPartyName_st>())).nameAssigner as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EDIPartyName_st),
            "::",
            stringify!(nameAssigner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EDIPartyName_st>())).partyName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EDIPartyName_st),
            "::",
            stringify!(partyName)
        )
    );
}
impl Default for EDIPartyName_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EDIPARTYNAME = EDIPartyName_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GENERAL_NAME_st {
    pub type_: ::std::os::raw::c_int,
    pub d: GENERAL_NAME_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GENERAL_NAME_st__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub otherName: *mut OTHERNAME,
    pub rfc822Name: *mut ASN1_IA5STRING,
    pub dNSName: *mut ASN1_IA5STRING,
    pub x400Address: *mut ASN1_TYPE,
    pub directoryName: *mut X509_NAME,
    pub ediPartyName: *mut EDIPARTYNAME,
    pub uniformResourceIdentifier: *mut ASN1_IA5STRING,
    pub iPAddress: *mut ASN1_OCTET_STRING,
    pub registeredID: *mut ASN1_OBJECT,
    pub ip: *mut ASN1_OCTET_STRING,
    pub dirn: *mut X509_NAME,
    pub ia5: *mut ASN1_IA5STRING,
    pub rid: *mut ASN1_OBJECT,
    pub other: *mut ASN1_TYPE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_GENERAL_NAME_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<GENERAL_NAME_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(GENERAL_NAME_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GENERAL_NAME_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(GENERAL_NAME_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).otherName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(otherName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).rfc822Name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(rfc822Name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).dNSName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(dNSName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).x400Address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(x400Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).directoryName as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(directoryName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).ediPartyName as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(ediPartyName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).uniformResourceIdentifier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(uniformResourceIdentifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).iPAddress as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(iPAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).registeredID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(registeredID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).ip as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).dirn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(dirn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).ia5 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(ia5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).rid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(rid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GENERAL_NAME_st__bindgen_ty_1>())).other as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st__bindgen_ty_1),
            "::",
            stringify!(other)
        )
    );
}
impl Default for GENERAL_NAME_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_GENERAL_NAME_st() {
    assert_eq!(
        ::std::mem::size_of::<GENERAL_NAME_st>(),
        16usize,
        concat!("Size of: ", stringify!(GENERAL_NAME_st))
    );
    assert_eq!(
        ::std::mem::align_of::<GENERAL_NAME_st>(),
        8usize,
        concat!("Alignment of ", stringify!(GENERAL_NAME_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GENERAL_NAME_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GENERAL_NAME_st>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_NAME_st),
            "::",
            stringify!(d)
        )
    );
}
impl Default for GENERAL_NAME_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GENERAL_NAME = GENERAL_NAME_st;
pub type stack_GENERAL_NAME_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_NAME)>;
pub type stack_GENERAL_NAME_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_NAME) -> *mut GENERAL_NAME>;
pub type stack_GENERAL_NAME_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const GENERAL_NAME,
        b: *mut *const GENERAL_NAME,
    ) -> ::std::os::raw::c_int,
>;
pub type GENERAL_NAMES = stack_st_GENERAL_NAME;
pub type stack_GENERAL_NAMES_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_NAMES)>;
pub type stack_GENERAL_NAMES_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_NAMES) -> *mut GENERAL_NAMES>;
pub type stack_GENERAL_NAMES_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const GENERAL_NAMES,
        b: *mut *const GENERAL_NAMES,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ACCESS_DESCRIPTION_st {
    pub method: *mut ASN1_OBJECT,
    pub location: *mut GENERAL_NAME,
}
#[test]
fn bindgen_test_layout_ACCESS_DESCRIPTION_st() {
    assert_eq!(
        ::std::mem::size_of::<ACCESS_DESCRIPTION_st>(),
        16usize,
        concat!("Size of: ", stringify!(ACCESS_DESCRIPTION_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ACCESS_DESCRIPTION_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ACCESS_DESCRIPTION_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ACCESS_DESCRIPTION_st>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACCESS_DESCRIPTION_st),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ACCESS_DESCRIPTION_st>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ACCESS_DESCRIPTION_st),
            "::",
            stringify!(location)
        )
    );
}
impl Default for ACCESS_DESCRIPTION_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ACCESS_DESCRIPTION = ACCESS_DESCRIPTION_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_ACCESS_DESCRIPTION {
    _unused: [u8; 0],
}
pub type stack_ACCESS_DESCRIPTION_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ACCESS_DESCRIPTION)>;
pub type stack_ACCESS_DESCRIPTION_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ACCESS_DESCRIPTION) -> *mut ACCESS_DESCRIPTION,
>;
pub type stack_ACCESS_DESCRIPTION_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const ACCESS_DESCRIPTION,
        b: *mut *const ACCESS_DESCRIPTION,
    ) -> ::std::os::raw::c_int,
>;
pub type AUTHORITY_INFO_ACCESS = stack_st_ACCESS_DESCRIPTION;
pub type EXTENDED_KEY_USAGE = stack_st_ASN1_OBJECT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIST_POINT_NAME_st {
    pub type_: ::std::os::raw::c_int,
    pub name: DIST_POINT_NAME_st__bindgen_ty_1,
    pub dpname: *mut X509_NAME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DIST_POINT_NAME_st__bindgen_ty_1 {
    pub fullname: *mut GENERAL_NAMES,
    pub relativename: *mut stack_st_X509_NAME_ENTRY,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_DIST_POINT_NAME_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<DIST_POINT_NAME_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DIST_POINT_NAME_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DIST_POINT_NAME_st__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(DIST_POINT_NAME_st__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DIST_POINT_NAME_st__bindgen_ty_1>())).fullname as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_NAME_st__bindgen_ty_1),
            "::",
            stringify!(fullname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DIST_POINT_NAME_st__bindgen_ty_1>())).relativename as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_NAME_st__bindgen_ty_1),
            "::",
            stringify!(relativename)
        )
    );
}
impl Default for DIST_POINT_NAME_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_DIST_POINT_NAME_st() {
    assert_eq!(
        ::std::mem::size_of::<DIST_POINT_NAME_st>(),
        24usize,
        concat!("Size of: ", stringify!(DIST_POINT_NAME_st))
    );
    assert_eq!(
        ::std::mem::align_of::<DIST_POINT_NAME_st>(),
        8usize,
        concat!("Alignment of ", stringify!(DIST_POINT_NAME_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_NAME_st>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_NAME_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_NAME_st>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_NAME_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_NAME_st>())).dpname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_NAME_st),
            "::",
            stringify!(dpname)
        )
    );
}
impl Default for DIST_POINT_NAME_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DIST_POINT_NAME = DIST_POINT_NAME_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct DIST_POINT_st {
    pub distpoint: *mut DIST_POINT_NAME,
    pub reasons: *mut ASN1_BIT_STRING,
    pub CRLissuer: *mut GENERAL_NAMES,
    pub dp_reasons: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DIST_POINT_st() {
    assert_eq!(
        ::std::mem::size_of::<DIST_POINT_st>(),
        32usize,
        concat!("Size of: ", stringify!(DIST_POINT_st))
    );
    assert_eq!(
        ::std::mem::align_of::<DIST_POINT_st>(),
        8usize,
        concat!("Alignment of ", stringify!(DIST_POINT_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_st>())).distpoint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_st),
            "::",
            stringify!(distpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_st>())).reasons as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_st),
            "::",
            stringify!(reasons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_st>())).CRLissuer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_st),
            "::",
            stringify!(CRLissuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIST_POINT_st>())).dp_reasons as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIST_POINT_st),
            "::",
            stringify!(dp_reasons)
        )
    );
}
impl Default for DIST_POINT_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CRL_DIST_POINTS = stack_st_DIST_POINT;
pub type stack_DIST_POINT_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut DIST_POINT)>;
pub type stack_DIST_POINT_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut DIST_POINT) -> *mut DIST_POINT>;
pub type stack_DIST_POINT_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const DIST_POINT,
        b: *mut *const DIST_POINT,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct AUTHORITY_KEYID_st {
    pub keyid: *mut ASN1_OCTET_STRING,
    pub issuer: *mut GENERAL_NAMES,
    pub serial: *mut ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_AUTHORITY_KEYID_st() {
    assert_eq!(
        ::std::mem::size_of::<AUTHORITY_KEYID_st>(),
        24usize,
        concat!("Size of: ", stringify!(AUTHORITY_KEYID_st))
    );
    assert_eq!(
        ::std::mem::align_of::<AUTHORITY_KEYID_st>(),
        8usize,
        concat!("Alignment of ", stringify!(AUTHORITY_KEYID_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUTHORITY_KEYID_st>())).keyid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUTHORITY_KEYID_st),
            "::",
            stringify!(keyid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUTHORITY_KEYID_st>())).issuer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUTHORITY_KEYID_st),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUTHORITY_KEYID_st>())).serial as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AUTHORITY_KEYID_st),
            "::",
            stringify!(serial)
        )
    );
}
impl Default for AUTHORITY_KEYID_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct NOTICEREF_st {
    pub organization: *mut ASN1_STRING,
    pub noticenos: *mut stack_st_ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_NOTICEREF_st() {
    assert_eq!(
        ::std::mem::size_of::<NOTICEREF_st>(),
        16usize,
        concat!("Size of: ", stringify!(NOTICEREF_st))
    );
    assert_eq!(
        ::std::mem::align_of::<NOTICEREF_st>(),
        8usize,
        concat!("Alignment of ", stringify!(NOTICEREF_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NOTICEREF_st>())).organization as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NOTICEREF_st),
            "::",
            stringify!(organization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NOTICEREF_st>())).noticenos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NOTICEREF_st),
            "::",
            stringify!(noticenos)
        )
    );
}
impl Default for NOTICEREF_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type NOTICEREF = NOTICEREF_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct USERNOTICE_st {
    pub noticeref: *mut NOTICEREF,
    pub exptext: *mut ASN1_STRING,
}
#[test]
fn bindgen_test_layout_USERNOTICE_st() {
    assert_eq!(
        ::std::mem::size_of::<USERNOTICE_st>(),
        16usize,
        concat!("Size of: ", stringify!(USERNOTICE_st))
    );
    assert_eq!(
        ::std::mem::align_of::<USERNOTICE_st>(),
        8usize,
        concat!("Alignment of ", stringify!(USERNOTICE_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<USERNOTICE_st>())).noticeref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USERNOTICE_st),
            "::",
            stringify!(noticeref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<USERNOTICE_st>())).exptext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USERNOTICE_st),
            "::",
            stringify!(exptext)
        )
    );
}
impl Default for USERNOTICE_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type USERNOTICE = USERNOTICE_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct POLICYQUALINFO_st {
    pub pqualid: *mut ASN1_OBJECT,
    pub d: POLICYQUALINFO_st__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union POLICYQUALINFO_st__bindgen_ty_1 {
    pub cpsuri: *mut ASN1_IA5STRING,
    pub usernotice: *mut USERNOTICE,
    pub other: *mut ASN1_TYPE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_POLICYQUALINFO_st__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<POLICYQUALINFO_st__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(POLICYQUALINFO_st__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<POLICYQUALINFO_st__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(POLICYQUALINFO_st__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICYQUALINFO_st__bindgen_ty_1>())).cpsuri as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYQUALINFO_st__bindgen_ty_1),
            "::",
            stringify!(cpsuri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICYQUALINFO_st__bindgen_ty_1>())).usernotice as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYQUALINFO_st__bindgen_ty_1),
            "::",
            stringify!(usernotice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICYQUALINFO_st__bindgen_ty_1>())).other as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYQUALINFO_st__bindgen_ty_1),
            "::",
            stringify!(other)
        )
    );
}
impl Default for POLICYQUALINFO_st__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_POLICYQUALINFO_st() {
    assert_eq!(
        ::std::mem::size_of::<POLICYQUALINFO_st>(),
        16usize,
        concat!("Size of: ", stringify!(POLICYQUALINFO_st))
    );
    assert_eq!(
        ::std::mem::align_of::<POLICYQUALINFO_st>(),
        8usize,
        concat!("Alignment of ", stringify!(POLICYQUALINFO_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POLICYQUALINFO_st>())).pqualid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYQUALINFO_st),
            "::",
            stringify!(pqualid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POLICYQUALINFO_st>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYQUALINFO_st),
            "::",
            stringify!(d)
        )
    );
}
impl Default for POLICYQUALINFO_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type POLICYQUALINFO = POLICYQUALINFO_st;
pub type stack_POLICYQUALINFO_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICYQUALINFO)>;
pub type stack_POLICYQUALINFO_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICYQUALINFO) -> *mut POLICYQUALINFO>;
pub type stack_POLICYQUALINFO_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const POLICYQUALINFO,
        b: *mut *const POLICYQUALINFO,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct POLICYINFO_st {
    pub policyid: *mut ASN1_OBJECT,
    pub qualifiers: *mut stack_st_POLICYQUALINFO,
}
#[test]
fn bindgen_test_layout_POLICYINFO_st() {
    assert_eq!(
        ::std::mem::size_of::<POLICYINFO_st>(),
        16usize,
        concat!("Size of: ", stringify!(POLICYINFO_st))
    );
    assert_eq!(
        ::std::mem::align_of::<POLICYINFO_st>(),
        8usize,
        concat!("Alignment of ", stringify!(POLICYINFO_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POLICYINFO_st>())).policyid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYINFO_st),
            "::",
            stringify!(policyid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POLICYINFO_st>())).qualifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICYINFO_st),
            "::",
            stringify!(qualifiers)
        )
    );
}
impl Default for POLICYINFO_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type POLICYINFO = POLICYINFO_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_POLICYINFO {
    _unused: [u8; 0],
}
pub type CERTIFICATEPOLICIES = stack_st_POLICYINFO;
pub type stack_POLICYINFO_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICYINFO)>;
pub type stack_POLICYINFO_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICYINFO) -> *mut POLICYINFO>;
pub type stack_POLICYINFO_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const POLICYINFO,
        b: *mut *const POLICYINFO,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct POLICY_MAPPING_st {
    pub issuerDomainPolicy: *mut ASN1_OBJECT,
    pub subjectDomainPolicy: *mut ASN1_OBJECT,
}
#[test]
fn bindgen_test_layout_POLICY_MAPPING_st() {
    assert_eq!(
        ::std::mem::size_of::<POLICY_MAPPING_st>(),
        16usize,
        concat!("Size of: ", stringify!(POLICY_MAPPING_st))
    );
    assert_eq!(
        ::std::mem::align_of::<POLICY_MAPPING_st>(),
        8usize,
        concat!("Alignment of ", stringify!(POLICY_MAPPING_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICY_MAPPING_st>())).issuerDomainPolicy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICY_MAPPING_st),
            "::",
            stringify!(issuerDomainPolicy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICY_MAPPING_st>())).subjectDomainPolicy as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICY_MAPPING_st),
            "::",
            stringify!(subjectDomainPolicy)
        )
    );
}
impl Default for POLICY_MAPPING_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type POLICY_MAPPING = POLICY_MAPPING_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_POLICY_MAPPING {
    _unused: [u8; 0],
}
pub type stack_POLICY_MAPPING_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICY_MAPPING)>;
pub type stack_POLICY_MAPPING_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut POLICY_MAPPING) -> *mut POLICY_MAPPING>;
pub type stack_POLICY_MAPPING_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const POLICY_MAPPING,
        b: *mut *const POLICY_MAPPING,
    ) -> ::std::os::raw::c_int,
>;
pub type POLICY_MAPPINGS = stack_st_POLICY_MAPPING;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct GENERAL_SUBTREE_st {
    pub base: *mut GENERAL_NAME,
    pub minimum: *mut ASN1_INTEGER,
    pub maximum: *mut ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_GENERAL_SUBTREE_st() {
    assert_eq!(
        ::std::mem::size_of::<GENERAL_SUBTREE_st>(),
        24usize,
        concat!("Size of: ", stringify!(GENERAL_SUBTREE_st))
    );
    assert_eq!(
        ::std::mem::align_of::<GENERAL_SUBTREE_st>(),
        8usize,
        concat!("Alignment of ", stringify!(GENERAL_SUBTREE_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GENERAL_SUBTREE_st>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_SUBTREE_st),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GENERAL_SUBTREE_st>())).minimum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_SUBTREE_st),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GENERAL_SUBTREE_st>())).maximum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GENERAL_SUBTREE_st),
            "::",
            stringify!(maximum)
        )
    );
}
impl Default for GENERAL_SUBTREE_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GENERAL_SUBTREE = GENERAL_SUBTREE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_GENERAL_SUBTREE {
    _unused: [u8; 0],
}
pub type stack_GENERAL_SUBTREE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_SUBTREE)>;
pub type stack_GENERAL_SUBTREE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GENERAL_SUBTREE) -> *mut GENERAL_SUBTREE>;
pub type stack_GENERAL_SUBTREE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const GENERAL_SUBTREE,
        b: *mut *const GENERAL_SUBTREE,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct NAME_CONSTRAINTS_st {
    pub permittedSubtrees: *mut stack_st_GENERAL_SUBTREE,
    pub excludedSubtrees: *mut stack_st_GENERAL_SUBTREE,
}
#[test]
fn bindgen_test_layout_NAME_CONSTRAINTS_st() {
    assert_eq!(
        ::std::mem::size_of::<NAME_CONSTRAINTS_st>(),
        16usize,
        concat!("Size of: ", stringify!(NAME_CONSTRAINTS_st))
    );
    assert_eq!(
        ::std::mem::align_of::<NAME_CONSTRAINTS_st>(),
        8usize,
        concat!("Alignment of ", stringify!(NAME_CONSTRAINTS_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NAME_CONSTRAINTS_st>())).permittedSubtrees as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NAME_CONSTRAINTS_st),
            "::",
            stringify!(permittedSubtrees)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NAME_CONSTRAINTS_st>())).excludedSubtrees as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NAME_CONSTRAINTS_st),
            "::",
            stringify!(excludedSubtrees)
        )
    );
}
impl Default for NAME_CONSTRAINTS_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct POLICY_CONSTRAINTS_st {
    pub requireExplicitPolicy: *mut ASN1_INTEGER,
    pub inhibitPolicyMapping: *mut ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_POLICY_CONSTRAINTS_st() {
    assert_eq!(
        ::std::mem::size_of::<POLICY_CONSTRAINTS_st>(),
        16usize,
        concat!("Size of: ", stringify!(POLICY_CONSTRAINTS_st))
    );
    assert_eq!(
        ::std::mem::align_of::<POLICY_CONSTRAINTS_st>(),
        8usize,
        concat!("Alignment of ", stringify!(POLICY_CONSTRAINTS_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICY_CONSTRAINTS_st>())).requireExplicitPolicy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICY_CONSTRAINTS_st),
            "::",
            stringify!(requireExplicitPolicy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<POLICY_CONSTRAINTS_st>())).inhibitPolicyMapping as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(POLICY_CONSTRAINTS_st),
            "::",
            stringify!(inhibitPolicyMapping)
        )
    );
}
impl Default for POLICY_CONSTRAINTS_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type POLICY_CONSTRAINTS = POLICY_CONSTRAINTS_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PROXY_POLICY_st {
    pub policyLanguage: *mut ASN1_OBJECT,
    pub policy: *mut ASN1_OCTET_STRING,
}
#[test]
fn bindgen_test_layout_PROXY_POLICY_st() {
    assert_eq!(
        ::std::mem::size_of::<PROXY_POLICY_st>(),
        16usize,
        concat!("Size of: ", stringify!(PROXY_POLICY_st))
    );
    assert_eq!(
        ::std::mem::align_of::<PROXY_POLICY_st>(),
        8usize,
        concat!("Alignment of ", stringify!(PROXY_POLICY_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROXY_POLICY_st>())).policyLanguage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROXY_POLICY_st),
            "::",
            stringify!(policyLanguage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PROXY_POLICY_st>())).policy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROXY_POLICY_st),
            "::",
            stringify!(policy)
        )
    );
}
impl Default for PROXY_POLICY_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PROXY_POLICY = PROXY_POLICY_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PROXY_CERT_INFO_EXTENSION_st {
    pub pcPathLengthConstraint: *mut ASN1_INTEGER,
    pub proxyPolicy: *mut PROXY_POLICY,
}
#[test]
fn bindgen_test_layout_PROXY_CERT_INFO_EXTENSION_st() {
    assert_eq!(
        ::std::mem::size_of::<PROXY_CERT_INFO_EXTENSION_st>(),
        16usize,
        concat!("Size of: ", stringify!(PROXY_CERT_INFO_EXTENSION_st))
    );
    assert_eq!(
        ::std::mem::align_of::<PROXY_CERT_INFO_EXTENSION_st>(),
        8usize,
        concat!("Alignment of ", stringify!(PROXY_CERT_INFO_EXTENSION_st))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PROXY_CERT_INFO_EXTENSION_st>())).pcPathLengthConstraint
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROXY_CERT_INFO_EXTENSION_st),
            "::",
            stringify!(pcPathLengthConstraint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PROXY_CERT_INFO_EXTENSION_st>())).proxyPolicy as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROXY_CERT_INFO_EXTENSION_st),
            "::",
            stringify!(proxyPolicy)
        )
    );
}
impl Default for PROXY_CERT_INFO_EXTENSION_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PROXY_CERT_INFO_EXTENSION = PROXY_CERT_INFO_EXTENSION_st;
extern "C" {
    pub fn PROXY_POLICY_new() -> *mut PROXY_POLICY;
}
extern "C" {
    pub fn PROXY_POLICY_free(a: *mut PROXY_POLICY);
}
extern "C" {
    pub fn d2i_PROXY_POLICY(
        a: *mut *mut PROXY_POLICY,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut PROXY_POLICY;
}
extern "C" {
    pub fn i2d_PROXY_POLICY(
        a: *mut PROXY_POLICY,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static PROXY_POLICY_it: ASN1_ITEM;
}
extern "C" {
    pub fn PROXY_CERT_INFO_EXTENSION_new() -> *mut PROXY_CERT_INFO_EXTENSION;
}
extern "C" {
    pub fn PROXY_CERT_INFO_EXTENSION_free(a: *mut PROXY_CERT_INFO_EXTENSION);
}
extern "C" {
    pub fn d2i_PROXY_CERT_INFO_EXTENSION(
        a: *mut *mut PROXY_CERT_INFO_EXTENSION,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut PROXY_CERT_INFO_EXTENSION;
}
extern "C" {
    pub fn i2d_PROXY_CERT_INFO_EXTENSION(
        a: *mut PROXY_CERT_INFO_EXTENSION,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static PROXY_CERT_INFO_EXTENSION_it: ASN1_ITEM;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct ISSUING_DIST_POINT_st {
    pub distpoint: *mut DIST_POINT_NAME,
    pub onlyuser: ::std::os::raw::c_int,
    pub onlyCA: ::std::os::raw::c_int,
    pub onlysomereasons: *mut ASN1_BIT_STRING,
    pub indirectCRL: ::std::os::raw::c_int,
    pub onlyattr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ISSUING_DIST_POINT_st() {
    assert_eq!(
        ::std::mem::size_of::<ISSUING_DIST_POINT_st>(),
        32usize,
        concat!("Size of: ", stringify!(ISSUING_DIST_POINT_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ISSUING_DIST_POINT_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ISSUING_DIST_POINT_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).distpoint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(distpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).onlyuser as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(onlyuser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).onlyCA as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(onlyCA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).onlysomereasons as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(onlysomereasons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).indirectCRL as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(indirectCRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ISSUING_DIST_POINT_st>())).onlyattr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ISSUING_DIST_POINT_st),
            "::",
            stringify!(onlyattr)
        )
    );
}
impl Default for ISSUING_DIST_POINT_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct x509_purpose_st {
    pub purpose: ::std::os::raw::c_int,
    pub trust: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub check_purpose: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const x509_purpose_st,
            arg2: *const X509,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub name: *mut ::std::os::raw::c_char,
    pub sname: *mut ::std::os::raw::c_char,
    pub usr_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_x509_purpose_st() {
    assert_eq!(
        ::std::mem::size_of::<x509_purpose_st>(),
        48usize,
        concat!("Size of: ", stringify!(x509_purpose_st))
    );
    assert_eq!(
        ::std::mem::align_of::<x509_purpose_st>(),
        8usize,
        concat!("Alignment of ", stringify!(x509_purpose_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).purpose as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(purpose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).trust as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(trust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).check_purpose as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(check_purpose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).sname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x509_purpose_st>())).usr_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(x509_purpose_st),
            "::",
            stringify!(usr_data)
        )
    );
}
impl Default for x509_purpose_st {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X509_PURPOSE = x509_purpose_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_PURPOSE {
    _unused: [u8; 0],
}
pub type stack_X509_PURPOSE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_PURPOSE)>;
pub type stack_X509_PURPOSE_copy_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_PURPOSE) -> *mut X509_PURPOSE>;
pub type stack_X509_PURPOSE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_PURPOSE,
        b: *mut *const X509_PURPOSE,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn BASIC_CONSTRAINTS_new() -> *mut BASIC_CONSTRAINTS;
}
extern "C" {
    pub fn BASIC_CONSTRAINTS_free(a: *mut BASIC_CONSTRAINTS);
}
extern "C" {
    pub fn d2i_BASIC_CONSTRAINTS(
        a: *mut *mut BASIC_CONSTRAINTS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut BASIC_CONSTRAINTS;
}
extern "C" {
    pub fn i2d_BASIC_CONSTRAINTS(
        a: *mut BASIC_CONSTRAINTS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static BASIC_CONSTRAINTS_it: ASN1_ITEM;
}
extern "C" {
    pub fn AUTHORITY_KEYID_new() -> *mut AUTHORITY_KEYID;
}
extern "C" {
    pub fn AUTHORITY_KEYID_free(a: *mut AUTHORITY_KEYID);
}
extern "C" {
    pub fn d2i_AUTHORITY_KEYID(
        a: *mut *mut AUTHORITY_KEYID,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut AUTHORITY_KEYID;
}
extern "C" {
    pub fn i2d_AUTHORITY_KEYID(
        a: *mut AUTHORITY_KEYID,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static AUTHORITY_KEYID_it: ASN1_ITEM;
}
extern "C" {
    pub fn GENERAL_NAME_new() -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn GENERAL_NAME_free(a: *mut GENERAL_NAME);
}
extern "C" {
    pub fn d2i_GENERAL_NAME(
        a: *mut *mut GENERAL_NAME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn i2d_GENERAL_NAME(
        a: *mut GENERAL_NAME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static GENERAL_NAME_it: ASN1_ITEM;
}
extern "C" {
    pub fn GENERAL_NAME_dup(a: *mut GENERAL_NAME) -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn GENERAL_NAME_cmp(
        a: *const GENERAL_NAME,
        b: *const GENERAL_NAME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn v2i_ASN1_BIT_STRING(
        method: *mut X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        nval: *mut stack_st_CONF_VALUE,
    ) -> *mut ASN1_BIT_STRING;
}
extern "C" {
    pub fn i2v_ASN1_BIT_STRING(
        method: *mut X509V3_EXT_METHOD,
        bits: *mut ASN1_BIT_STRING,
        extlist: *mut stack_st_CONF_VALUE,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn i2v_GENERAL_NAME(
        method: *mut X509V3_EXT_METHOD,
        gen: *mut GENERAL_NAME,
        ret: *mut stack_st_CONF_VALUE,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn GENERAL_NAME_print(out: *mut BIO, gen: *mut GENERAL_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GENERAL_NAMES_new() -> *mut GENERAL_NAMES;
}
extern "C" {
    pub fn GENERAL_NAMES_free(a: *mut GENERAL_NAMES);
}
extern "C" {
    pub fn d2i_GENERAL_NAMES(
        a: *mut *mut GENERAL_NAMES,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut GENERAL_NAMES;
}
extern "C" {
    pub fn i2d_GENERAL_NAMES(
        a: *mut GENERAL_NAMES,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static GENERAL_NAMES_it: ASN1_ITEM;
}
extern "C" {
    pub fn i2v_GENERAL_NAMES(
        method: *mut X509V3_EXT_METHOD,
        gen: *mut GENERAL_NAMES,
        extlist: *mut stack_st_CONF_VALUE,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn v2i_GENERAL_NAMES(
        method: *const X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        nval: *mut stack_st_CONF_VALUE,
    ) -> *mut GENERAL_NAMES;
}
extern "C" {
    pub fn OTHERNAME_new() -> *mut OTHERNAME;
}
extern "C" {
    pub fn OTHERNAME_free(a: *mut OTHERNAME);
}
extern "C" {
    pub fn d2i_OTHERNAME(
        a: *mut *mut OTHERNAME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut OTHERNAME;
}
extern "C" {
    pub fn i2d_OTHERNAME(
        a: *mut OTHERNAME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static OTHERNAME_it: ASN1_ITEM;
}
extern "C" {
    pub fn EDIPARTYNAME_new() -> *mut EDIPARTYNAME;
}
extern "C" {
    pub fn EDIPARTYNAME_free(a: *mut EDIPARTYNAME);
}
extern "C" {
    pub fn d2i_EDIPARTYNAME(
        a: *mut *mut EDIPARTYNAME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut EDIPARTYNAME;
}
extern "C" {
    pub fn i2d_EDIPARTYNAME(
        a: *mut EDIPARTYNAME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static EDIPARTYNAME_it: ASN1_ITEM;
}
extern "C" {
    pub fn OTHERNAME_cmp(a: *mut OTHERNAME, b: *mut OTHERNAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GENERAL_NAME_set0_value(
        a: *mut GENERAL_NAME,
        type_: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn GENERAL_NAME_get0_value(
        a: *const GENERAL_NAME,
        ptype: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GENERAL_NAME_set0_othername(
        gen: *mut GENERAL_NAME,
        oid: *mut ASN1_OBJECT,
        value: *mut ASN1_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GENERAL_NAME_get0_otherName(
        gen: *const GENERAL_NAME,
        poid: *mut *mut ASN1_OBJECT,
        pvalue: *mut *mut ASN1_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2s_ASN1_OCTET_STRING(
        method: *mut X509V3_EXT_METHOD,
        ia5: *const ASN1_OCTET_STRING,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn s2i_ASN1_OCTET_STRING(
        method: *mut X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn EXTENDED_KEY_USAGE_new() -> *mut EXTENDED_KEY_USAGE;
}
extern "C" {
    pub fn EXTENDED_KEY_USAGE_free(a: *mut EXTENDED_KEY_USAGE);
}
extern "C" {
    pub fn d2i_EXTENDED_KEY_USAGE(
        a: *mut *mut EXTENDED_KEY_USAGE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut EXTENDED_KEY_USAGE;
}
extern "C" {
    pub fn i2d_EXTENDED_KEY_USAGE(
        a: *mut EXTENDED_KEY_USAGE,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static EXTENDED_KEY_USAGE_it: ASN1_ITEM;
}
extern "C" {
    pub fn i2a_ACCESS_DESCRIPTION(
        bp: *mut BIO,
        a: *const ACCESS_DESCRIPTION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CERTIFICATEPOLICIES_new() -> *mut CERTIFICATEPOLICIES;
}
extern "C" {
    pub fn CERTIFICATEPOLICIES_free(a: *mut CERTIFICATEPOLICIES);
}
extern "C" {
    pub fn d2i_CERTIFICATEPOLICIES(
        a: *mut *mut CERTIFICATEPOLICIES,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut CERTIFICATEPOLICIES;
}
extern "C" {
    pub fn i2d_CERTIFICATEPOLICIES(
        a: *mut CERTIFICATEPOLICIES,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static CERTIFICATEPOLICIES_it: ASN1_ITEM;
}
extern "C" {
    pub fn POLICYINFO_new() -> *mut POLICYINFO;
}
extern "C" {
    pub fn POLICYINFO_free(a: *mut POLICYINFO);
}
extern "C" {
    pub fn d2i_POLICYINFO(
        a: *mut *mut POLICYINFO,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut POLICYINFO;
}
extern "C" {
    pub fn i2d_POLICYINFO(
        a: *mut POLICYINFO,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static POLICYINFO_it: ASN1_ITEM;
}
extern "C" {
    pub fn POLICYQUALINFO_new() -> *mut POLICYQUALINFO;
}
extern "C" {
    pub fn POLICYQUALINFO_free(a: *mut POLICYQUALINFO);
}
extern "C" {
    pub fn d2i_POLICYQUALINFO(
        a: *mut *mut POLICYQUALINFO,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut POLICYQUALINFO;
}
extern "C" {
    pub fn i2d_POLICYQUALINFO(
        a: *mut POLICYQUALINFO,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static POLICYQUALINFO_it: ASN1_ITEM;
}
extern "C" {
    pub fn USERNOTICE_new() -> *mut USERNOTICE;
}
extern "C" {
    pub fn USERNOTICE_free(a: *mut USERNOTICE);
}
extern "C" {
    pub fn d2i_USERNOTICE(
        a: *mut *mut USERNOTICE,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut USERNOTICE;
}
extern "C" {
    pub fn i2d_USERNOTICE(
        a: *mut USERNOTICE,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static USERNOTICE_it: ASN1_ITEM;
}
extern "C" {
    pub fn NOTICEREF_new() -> *mut NOTICEREF;
}
extern "C" {
    pub fn NOTICEREF_free(a: *mut NOTICEREF);
}
extern "C" {
    pub fn d2i_NOTICEREF(
        a: *mut *mut NOTICEREF,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut NOTICEREF;
}
extern "C" {
    pub fn i2d_NOTICEREF(
        a: *mut NOTICEREF,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static NOTICEREF_it: ASN1_ITEM;
}
extern "C" {
    pub fn CRL_DIST_POINTS_new() -> *mut CRL_DIST_POINTS;
}
extern "C" {
    pub fn CRL_DIST_POINTS_free(a: *mut CRL_DIST_POINTS);
}
extern "C" {
    pub fn d2i_CRL_DIST_POINTS(
        a: *mut *mut CRL_DIST_POINTS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut CRL_DIST_POINTS;
}
extern "C" {
    pub fn i2d_CRL_DIST_POINTS(
        a: *mut CRL_DIST_POINTS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static CRL_DIST_POINTS_it: ASN1_ITEM;
}
extern "C" {
    pub fn DIST_POINT_new() -> *mut DIST_POINT;
}
extern "C" {
    pub fn DIST_POINT_free(a: *mut DIST_POINT);
}
extern "C" {
    pub fn d2i_DIST_POINT(
        a: *mut *mut DIST_POINT,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut DIST_POINT;
}
extern "C" {
    pub fn i2d_DIST_POINT(
        a: *mut DIST_POINT,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static DIST_POINT_it: ASN1_ITEM;
}
extern "C" {
    pub fn DIST_POINT_NAME_new() -> *mut DIST_POINT_NAME;
}
extern "C" {
    pub fn DIST_POINT_NAME_free(a: *mut DIST_POINT_NAME);
}
extern "C" {
    pub fn d2i_DIST_POINT_NAME(
        a: *mut *mut DIST_POINT_NAME,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut DIST_POINT_NAME;
}
extern "C" {
    pub fn i2d_DIST_POINT_NAME(
        a: *mut DIST_POINT_NAME,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static DIST_POINT_NAME_it: ASN1_ITEM;
}
extern "C" {
    pub fn ISSUING_DIST_POINT_new() -> *mut ISSUING_DIST_POINT;
}
extern "C" {
    pub fn ISSUING_DIST_POINT_free(a: *mut ISSUING_DIST_POINT);
}
extern "C" {
    pub fn d2i_ISSUING_DIST_POINT(
        a: *mut *mut ISSUING_DIST_POINT,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ISSUING_DIST_POINT;
}
extern "C" {
    pub fn i2d_ISSUING_DIST_POINT(
        a: *mut ISSUING_DIST_POINT,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ISSUING_DIST_POINT_it: ASN1_ITEM;
}
extern "C" {
    pub fn DIST_POINT_set_dpname(
        dpn: *mut DIST_POINT_NAME,
        iname: *mut X509_NAME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NAME_CONSTRAINTS_check(x: *mut X509, nc: *mut NAME_CONSTRAINTS)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ACCESS_DESCRIPTION_new() -> *mut ACCESS_DESCRIPTION;
}
extern "C" {
    pub fn ACCESS_DESCRIPTION_free(a: *mut ACCESS_DESCRIPTION);
}
extern "C" {
    pub fn d2i_ACCESS_DESCRIPTION(
        a: *mut *mut ACCESS_DESCRIPTION,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut ACCESS_DESCRIPTION;
}
extern "C" {
    pub fn i2d_ACCESS_DESCRIPTION(
        a: *mut ACCESS_DESCRIPTION,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ACCESS_DESCRIPTION_it: ASN1_ITEM;
}
extern "C" {
    pub fn AUTHORITY_INFO_ACCESS_new() -> *mut AUTHORITY_INFO_ACCESS;
}
extern "C" {
    pub fn AUTHORITY_INFO_ACCESS_free(a: *mut AUTHORITY_INFO_ACCESS);
}
extern "C" {
    pub fn d2i_AUTHORITY_INFO_ACCESS(
        a: *mut *mut AUTHORITY_INFO_ACCESS,
        in_: *mut *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> *mut AUTHORITY_INFO_ACCESS;
}
extern "C" {
    pub fn i2d_AUTHORITY_INFO_ACCESS(
        a: *mut AUTHORITY_INFO_ACCESS,
        out: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static AUTHORITY_INFO_ACCESS_it: ASN1_ITEM;
}
extern "C" {
    pub static POLICY_MAPPING_it: ASN1_ITEM;
}
extern "C" {
    pub fn POLICY_MAPPING_new() -> *mut POLICY_MAPPING;
}
extern "C" {
    pub fn POLICY_MAPPING_free(a: *mut POLICY_MAPPING);
}
extern "C" {
    pub static POLICY_MAPPINGS_it: ASN1_ITEM;
}
extern "C" {
    pub static GENERAL_SUBTREE_it: ASN1_ITEM;
}
extern "C" {
    pub fn GENERAL_SUBTREE_new() -> *mut GENERAL_SUBTREE;
}
extern "C" {
    pub fn GENERAL_SUBTREE_free(a: *mut GENERAL_SUBTREE);
}
extern "C" {
    pub static NAME_CONSTRAINTS_it: ASN1_ITEM;
}
extern "C" {
    pub fn NAME_CONSTRAINTS_new() -> *mut NAME_CONSTRAINTS;
}
extern "C" {
    pub fn NAME_CONSTRAINTS_free(a: *mut NAME_CONSTRAINTS);
}
extern "C" {
    pub fn POLICY_CONSTRAINTS_new() -> *mut POLICY_CONSTRAINTS;
}
extern "C" {
    pub fn POLICY_CONSTRAINTS_free(a: *mut POLICY_CONSTRAINTS);
}
extern "C" {
    pub static POLICY_CONSTRAINTS_it: ASN1_ITEM;
}
extern "C" {
    pub fn a2i_GENERAL_NAME(
        out: *mut GENERAL_NAME,
        method: *const X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        gen_type: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        is_nc: ::std::os::raw::c_int,
    ) -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn v2i_GENERAL_NAME(
        method: *const X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        cnf: *mut CONF_VALUE,
    ) -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn v2i_GENERAL_NAME_ex(
        out: *mut GENERAL_NAME,
        method: *const X509V3_EXT_METHOD,
        ctx: *mut X509V3_CTX,
        cnf: *mut CONF_VALUE,
        is_nc: ::std::os::raw::c_int,
    ) -> *mut GENERAL_NAME;
}
extern "C" {
    pub fn X509V3_conf_free(val: *mut CONF_VALUE);
}
extern "C" {
    pub fn X509V3_EXT_conf_nid(
        conf: *mut lhash_st_CONF_VALUE,
        ctx: *mut X509V3_CTX,
        ext_nid: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509V3_EXT_nconf_nid(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        ext_nid: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509V3_EXT_nconf(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509V3_EXT_add_nconf_sk(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        section: *const ::std::os::raw::c_char,
        sk: *mut *mut stack_st_X509_EXTENSION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_add_nconf(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        section: *const ::std::os::raw::c_char,
        cert: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_REQ_add_nconf(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        section: *const ::std::os::raw::c_char,
        req: *mut X509_REQ,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_CRL_add_nconf(
        conf: *mut CONF,
        ctx: *mut X509V3_CTX,
        section: *const ::std::os::raw::c_char,
        crl: *mut X509_CRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_add_value_bool_nf(
        name: *const ::std::os::raw::c_char,
        asn1_bool: ::std::os::raw::c_int,
        extlist: *mut *mut stack_st_CONF_VALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_get_value_bool(
        value: *const CONF_VALUE,
        asn1_bool: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_get_value_int(
        value: *const CONF_VALUE,
        aint: *mut *mut ASN1_INTEGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_set_nconf(ctx: *mut X509V3_CTX, conf: *mut CONF);
}
extern "C" {
    pub fn X509V3_get_string(
        ctx: *mut X509V3_CTX,
        name: *const ::std::os::raw::c_char,
        section: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509V3_get_section(
        ctx: *mut X509V3_CTX,
        section: *const ::std::os::raw::c_char,
    ) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn X509V3_string_free(ctx: *mut X509V3_CTX, str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn X509V3_section_free(ctx: *mut X509V3_CTX, section: *mut stack_st_CONF_VALUE);
}
extern "C" {
    pub fn X509V3_set_ctx(
        ctx: *mut X509V3_CTX,
        issuer: *mut X509,
        subject: *mut X509,
        req: *mut X509_REQ,
        crl: *mut X509_CRL,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn X509V3_add_value(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        extlist: *mut *mut stack_st_CONF_VALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_add_value_uchar(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_uchar,
        extlist: *mut *mut stack_st_CONF_VALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_add_value_bool(
        name: *const ::std::os::raw::c_char,
        asn1_bool: ::std::os::raw::c_int,
        extlist: *mut *mut stack_st_CONF_VALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_add_value_int(
        name: *const ::std::os::raw::c_char,
        aint: *mut ASN1_INTEGER,
        extlist: *mut *mut stack_st_CONF_VALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2s_ASN1_INTEGER(
        meth: *mut X509V3_EXT_METHOD,
        aint: *const ASN1_INTEGER,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn s2i_ASN1_INTEGER(
        meth: *mut X509V3_EXT_METHOD,
        value: *const ::std::os::raw::c_char,
    ) -> *mut ASN1_INTEGER;
}
extern "C" {
    pub fn i2s_ASN1_ENUMERATED(
        meth: *mut X509V3_EXT_METHOD,
        aint: *const ASN1_ENUMERATED,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn i2s_ASN1_ENUMERATED_TABLE(
        meth: *mut X509V3_EXT_METHOD,
        aint: *const ASN1_ENUMERATED,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509V3_EXT_add(ext: *mut X509V3_EXT_METHOD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_add_list(extlist: *mut X509V3_EXT_METHOD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_add_alias(
        nid_to: ::std::os::raw::c_int,
        nid_from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_cleanup();
}
extern "C" {
    pub fn X509V3_EXT_get(ext: *const X509_EXTENSION) -> *const X509V3_EXT_METHOD;
}
extern "C" {
    pub fn X509V3_EXT_get_nid(nid: ::std::os::raw::c_int) -> *const X509V3_EXT_METHOD;
}
extern "C" {
    pub fn X509V3_add_standard_extensions() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_parse_list(line: *const ::std::os::raw::c_char) -> *mut stack_st_CONF_VALUE;
}
extern "C" {
    pub fn X509V3_EXT_d2i(ext: *const X509_EXTENSION) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509V3_get_d2i(
        extensions: *const stack_st_X509_EXTENSION,
        nid: ::std::os::raw::c_int,
        out_critical: *mut ::std::os::raw::c_int,
        out_idx: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn X509V3_EXT_free(
        nid: ::std::os::raw::c_int,
        ext_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_i2d(
        ext_nid: ::std::os::raw::c_int,
        crit: ::std::os::raw::c_int,
        ext_struc: *mut ::std::os::raw::c_void,
    ) -> *mut X509_EXTENSION;
}
extern "C" {
    pub fn X509V3_add1_i2d(
        x: *mut *mut stack_st_X509_EXTENSION,
        nid: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
        crit: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_val_prn(
        out: *mut BIO,
        val: *mut stack_st_CONF_VALUE,
        indent: ::std::os::raw::c_int,
        ml: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn X509V3_EXT_print(
        out: *mut BIO,
        ext: *mut X509_EXTENSION,
        flag: ::std::os::raw::c_ulong,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_EXT_print_fp(
        out: *mut FILE,
        ext: *mut X509_EXTENSION,
        flag: ::std::os::raw::c_int,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_extensions_print(
        out: *mut BIO,
        title: *const ::std::os::raw::c_char,
        exts: *const stack_st_X509_EXTENSION,
        flag: ::std::os::raw::c_ulong,
        indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_ca(x: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_purpose(
        x: *mut X509,
        id: ::std::os::raw::c_int,
        ca: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_supported_extension(ex: *mut X509_EXTENSION) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_set(
        p: *mut ::std::os::raw::c_int,
        purpose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_issued(issuer: *mut X509, subject: *mut X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_akid(issuer: *mut X509, akid: *mut AUTHORITY_KEYID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get_extension_flags(x: *mut X509) -> u32;
}
extern "C" {
    pub fn X509_get_key_usage(x: *mut X509) -> u32;
}
extern "C" {
    pub fn X509_get_extended_key_usage(x: *mut X509) -> u32;
}
extern "C" {
    pub fn X509_get0_subject_key_id(x509: *mut X509) -> *const ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_get0_authority_key_id(x509: *mut X509) -> *const ASN1_OCTET_STRING;
}
extern "C" {
    pub fn X509_get0_authority_issuer(x509: *mut X509) -> *const GENERAL_NAMES;
}
extern "C" {
    pub fn X509_get0_authority_serial(x509: *mut X509) -> *const ASN1_INTEGER;
}
extern "C" {
    pub fn X509_PURPOSE_get_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_get0(idx: ::std::os::raw::c_int) -> *mut X509_PURPOSE;
}
extern "C" {
    pub fn X509_PURPOSE_get_by_sname(sname: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_get_by_id(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_add(
        id: ::std::os::raw::c_int,
        trust: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        ck: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const X509_PURPOSE,
                arg2: *const X509,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        name: *mut ::std::os::raw::c_char,
        sname: *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_get0_name(xp: *const X509_PURPOSE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_PURPOSE_get0_sname(xp: *const X509_PURPOSE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn X509_PURPOSE_get_trust(xp: *const X509_PURPOSE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_PURPOSE_cleanup();
}
extern "C" {
    pub fn X509_PURPOSE_get_id(arg1: *const X509_PURPOSE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_get1_email(x: *mut X509) -> *mut stack_st_OPENSSL_STRING;
}
extern "C" {
    pub fn X509_REQ_get1_email(x: *mut X509_REQ) -> *mut stack_st_OPENSSL_STRING;
}
extern "C" {
    pub fn X509_email_free(sk: *mut stack_st_OPENSSL_STRING);
}
extern "C" {
    pub fn X509_get1_ocsp(x: *mut X509) -> *mut stack_st_OPENSSL_STRING;
}
extern "C" {
    pub fn X509_check_host(
        x: *mut X509,
        chk: *const ::std::os::raw::c_char,
        chklen: usize,
        flags: ::std::os::raw::c_uint,
        peername: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_email(
        x: *mut X509,
        chk: *const ::std::os::raw::c_char,
        chklen: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_ip(
        x: *mut X509,
        chk: *const ::std::os::raw::c_uchar,
        chklen: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_check_ip_asc(
        x: *mut X509,
        ipasc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn a2i_IPADDRESS(ipasc: *const ::std::os::raw::c_char) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn a2i_IPADDRESS_NC(ipasc: *const ::std::os::raw::c_char) -> *mut ASN1_OCTET_STRING;
}
extern "C" {
    pub fn a2i_ipadd(
        ipout: *mut ::std::os::raw::c_uchar,
        ipasc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509V3_NAME_from_section(
        nm: *mut X509_NAME,
        dn_sk: *mut stack_st_CONF_VALUE,
        chtype: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn X509_POLICY_NODE_print(
        out: *mut BIO,
        node: *mut X509_POLICY_NODE,
        indent: ::std::os::raw::c_int,
    );
}
pub type stack_X509_POLICY_NODE_free_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut X509_POLICY_NODE)>;
pub type stack_X509_POLICY_NODE_copy_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut X509_POLICY_NODE) -> *mut X509_POLICY_NODE,
>;
pub type stack_X509_POLICY_NODE_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut *const X509_POLICY_NODE,
        b: *mut *const X509_POLICY_NODE,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct CRYPTO_dynlock_value {
    pub _address: u8,
}
