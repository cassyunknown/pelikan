{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap","program":"/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rustcommon_heatmap","--edition=2018","/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=55ad3fe6777fd69c","-C","extra-filename=-55ad3fe6777fd69c","--out-dir","/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","-L","dependency=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","--extern","rustcommon_atomics=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_atomics-c3c8303e7176d564.rmeta","--extern","rustcommon_histogram=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_histogram-95a59a9c654956f3.rmeta","--extern","rustcommon_time=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_time-d33a52637b536467.rmeta","--extern","thiserror=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/libthiserror-2ab051d1744511af.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_heatmap-55ad3fe6777fd69c.rmeta"},"prelude":{"crate_id":{"name":"rustcommon_heatmap","disambiguator":[16703334322203156497,0]},"crate_root":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src","external_crates":[{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[292688086858374235,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":2,"id":{"name":"core","disambiguator":[6438385474535706924,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13729837066422225192,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5402880783377335769,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6315666440082044202,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8715266272784128359,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2088041259338434830,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3489163311945967218,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[751421253572859800,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13041685254533870257,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[502015445408459368,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6198952210139392550,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[14184030540380960994,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[18399346483724303225,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15511893313068785759,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13348528473392455417,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[12356376325519007124,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[7246437135573011264,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12319769989328939461,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","num":20,"id":{"name":"rustcommon_histogram","disambiguator":[7748246731846229349,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","num":21,"id":{"name":"thiserror","disambiguator":[6806157695453182678,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","num":22,"id":{"name":"thiserror_impl","disambiguator":[10365884797249422675,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":23,"id":{"name":"rustcommon_atomics","disambiguator":[8375033874145111343,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","num":24,"id":{"name":"serde","disambiguator":[8092164314335916850,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","num":25,"id":{"name":"serde_derive","disambiguator":[14630392082677206947,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":26,"id":{"name":"rustcommon_time","disambiguator":[13149749425862839623,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":27,"id":{"name":"time","disambiguator":[7955324051584549148,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":28,"id":{"name":"itoa","disambiguator":[9064558066898048805,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","num":29,"id":{"name":"libc","disambiguator":[8355182677265087669,0]}}],"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":129,"byte_end":1862,"line_start":5,"line_end":51,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":185},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":182,"byte_end":194,"line_start":9,"line_end":9,"column_start":16,"column_end":28},"alias_span":null,"name":"HeatmapError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":215,"byte_end":228,"line_start":10,"line_end":10,"column_start":20,"column_end":33},"alias_span":null,"name":"AtomicHeatmap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":78},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":230,"byte_end":237,"line_start":10,"line_end":10,"column_start":35,"column_end":42},"alias_span":null,"name":"Heatmap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":256,"byte_end":262,"line_start":11,"line_end":11,"column_start":17,"column_end":23},"alias_span":null,"name":"Window","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":27},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":294,"byte_end":300,"line_start":13,"line_end":13,"column_start":30,"column_end":36},"alias_span":null,"name":"Atomic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1089},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":302,"byte_end":311,"line_start":13,"line_end":13,"column_start":38,"column_end":47},"alias_span":null,"name":"AtomicU16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1118},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":313,"byte_end":322,"line_start":13,"line_end":13,"column_start":49,"column_end":58},"alias_span":null,"name":"AtomicU32","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1147},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":324,"byte_end":333,"line_start":13,"line_end":13,"column_start":60,"column_end":69},"alias_span":null,"name":"AtomicU64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1060},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":335,"byte_end":343,"line_start":13,"line_end":13,"column_start":71,"column_end":79},"alias_span":null,"name":"AtomicU8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":22},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":377,"byte_end":390,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"AtomicCounter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":28},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":392,"byte_end":399,"line_start":14,"line_end":14,"column_start":47,"column_end":54},"alias_span":null,"name":"Counter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":216},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":401,"byte_end":409,"line_start":14,"line_end":14,"column_start":56,"column_end":64},"alias_span":null,"name":"Indexing","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":437,"byte_end":438,"line_start":15,"line_end":15,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","byte_start":129,"byte_end":1862,"line_start":5,"line_end":51,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":12},{"krate":0,"index":128},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":194},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2165,"byte_end":2170,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"name":"Empty","qualname":"::error::HeatmapError::Empty","value":"HeatmapError::Empty","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"heatmap contains no samples\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2121,"byte_end":2160,"line_start":10,"line_end":10,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":196},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2211,"byte_end":2228,"line_start":13,"line_end":13,"column_start":5,"column_end":22},"name":"InvalidPercentile","qualname":"::error::HeatmapError::InvalidPercentile","value":"HeatmapError::InvalidPercentile","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"invalid percentile\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2176,"byte_end":2206,"line_start":12,"line_end":12,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":198},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2269,"byte_end":2279,"line_start":15,"line_end":15,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::error::HeatmapError::OutOfRange","value":"HeatmapError::OutOfRange","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"value out of range\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2234,"byte_end":2264,"line_start":14,"line_end":14,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":185},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2102,"byte_end":2114,"line_start":9,"line_end":9,"column_start":10,"column_end":22},"name":"HeatmapError","qualname":"::error::HeatmapError","value":"pub enum HeatmapError { Empty, InvalidPercentile, OutOfRange, }","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3674,"byte_end":3687,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"AtomicHeatmap","qualname":"::heatmaps::atomic::AtomicHeatmap","value":"AtomicHeatmap {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" AtomicHeatmaps are concurrent datastructures which store counts for\n timestamped values over a configured time range with individual histograms\n arranged in a ring buffer. Increments occur in the most recent slice in the\n buffer, unless they are newer than that slice may hold. When this happens,\n old slices are cleared and reused. This configuration results in a fully\n pre-allocated datastructure with concurrent read-write access.\n","sig":null,"attributes":[{"value":"/ AtomicHeatmaps are concurrent datastructures which store counts for","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3209,"byte_end":3280,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ timestamped values over a configured time range with individual histograms","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3281,"byte_end":3359,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ arranged in a ring buffer. Increments occur in the most recent slice in the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3360,"byte_end":3439,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ buffer, unless they are newer than that slice may hold. When this happens,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3440,"byte_end":3518,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ old slices are cleared and reused. This configuration results in a fully","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3519,"byte_end":3595,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ pre-allocated datastructure with concurrent read-write access.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3596,"byte_end":3662,"line_start":19,"line_end":19,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4884,"byte_end":4887,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicHeatmap<Value, Count>>::new","value":"pub fn new(Value, u8, Duration<Nanoseconds<u64>>, Duration<Nanoseconds<u64>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AtomicHeatmap` which can store values up and including the\n `max` while maintaining precision across a wide range of values. The\n `precision` is expressed in the number of significant figures preserved.\n The heatmap will contain a histogram for each time step, specified by\n the resolution, necessary to represent the entire span of time stored\n within the heatmap. If the span is not evenly divisible by the\n resolution an additional window will be allocated and the true span will\n be slightly longer than the requested span. Smaller durations for the\n resolution cause more memory to be used, but a smaller batches of\n samples to age out at each time step.\n","sig":null,"attributes":[{"value":"/ Create a new `AtomicHeatmap` which can store values up and including the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4132,"byte_end":4208,"line_start":35,"line_end":35,"column_start":5,"column_end":81}},{"value":"/ `max` while maintaining precision across a wide range of values. The","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4213,"byte_end":4285,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ `precision` is expressed in the number of significant figures preserved.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4290,"byte_end":4366,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ The heatmap will contain a histogram for each time step, specified by","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4371,"byte_end":4444,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ the resolution, necessary to represent the entire span of time stored","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4449,"byte_end":4522,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ within the heatmap. If the span is not evenly divisible by the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4527,"byte_end":4593,"line_start":40,"line_end":40,"column_start":5,"column_end":71}},{"value":"/ resolution an additional window will be allocated and the true span will","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4598,"byte_end":4674,"line_start":41,"line_end":41,"column_start":5,"column_end":81}},{"value":"/ be slightly longer than the requested span. Smaller durations for the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4679,"byte_end":4752,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ resolution cause more memory to be used, but a smaller batches of","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4757,"byte_end":4826,"line_start":43,"line_end":43,"column_start":5,"column_end":74}},{"value":"/ samples to age out at each time step.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":4831,"byte_end":4872,"line_start":44,"line_end":44,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5728,"byte_end":5735,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"windows","qualname":"<AtomicHeatmap<Value, Count>>::windows","value":"pub fn windows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of windows stored in the `AtomicHeatmap`\n","sig":null,"attributes":[{"value":"/ Returns the number of windows stored in the `AtomicHeatmap`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5653,"byte_end":5716,"line_start":69,"line_end":69,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5892,"byte_end":5899,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"buckets","qualname":"<AtomicHeatmap<Value, Count>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets stored within each `Histogram` in the\n `Heatmap`\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets stored within each `Histogram` in the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5791,"byte_end":5862,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ `Heatmap`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5867,"byte_end":5880,"line_start":75,"line_end":75,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6024,"byte_end":6033,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"increment","qualname":"<AtomicHeatmap<Value, Count>>::increment","value":"pub fn increment(&Self, Instant<Nanoseconds<u64>>, Value,\n                 <Count as Atomic>::Primitive)","parent":null,"children":[],"decl_id":null,"docs":" Increment a time-value pair by a specified count\n","sig":null,"attributes":[{"value":"/ Increment a time-value pair by a specified count","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":5960,"byte_end":6012,"line_start":80,"line_end":80,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":7197,"byte_end":7207,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"percentile","qualname":"<AtomicHeatmap<Value, Count>>::percentile","value":"pub fn percentile(&Self, f64) -> Result<Value, HeatmapError>","parent":null,"children":[],"decl_id":null,"docs":" Return the nearest value for the requested percentile (0.0 - 100.0)\n across the total range of samples retained in the `Heatmap`.","sig":null,"attributes":[{"value":"/ Return the nearest value for the requested percentile (0.0 - 100.0)","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6390,"byte_end":6461,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ across the total range of samples retained in the `Heatmap`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6466,"byte_end":6530,"line_start":95,"line_end":95,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6535,"byte_end":6538,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note: since the heatmap stores a distribution across a configured time","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6543,"byte_end":6617,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ span, sequential calls to fetch the percentile might result in different","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6622,"byte_end":6698,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ results even without concurrent writers. For instance, you may see a","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6703,"byte_end":6775,"line_start":99,"line_end":99,"column_start":5,"column_end":77}},{"value":"/ 90th percentile that is higher than the 100th percentile depending on","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6780,"byte_end":6853,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ the timing of calls to this function and the distribution of your data.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6858,"byte_end":6933,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6938,"byte_end":6941,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note: concurrent writes may also effect the value returned by this","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":6946,"byte_end":7016,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ function. Users needing better consistency should ensure that other","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":7021,"byte_end":7092,"line_start":104,"line_end":104,"column_start":5,"column_end":76}},{"value":"/ threads are not writing into the heatmap while this function is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":7097,"byte_end":7164,"line_start":105,"line_end":105,"column_start":5,"column_end":72}},{"value":"/ in-progress.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":7169,"byte_end":7185,"line_start":106,"line_end":106,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8721,"byte_end":8725,"line_start":143,"line_end":143,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicHeatmap<Value, Count>>::load","value":"pub fn load(&Self) -> Heatmap<Value, <Count as Atomic>::Primitive> where\nValue: Copy + std::ops::Sub<Output = Value>,\n<Count as Atomic>::Primitive: Counter","parent":null,"children":[],"decl_id":null,"docs":" Performs a `Relaxed` load of the current `AtomicHeatmap` allocating and\n returning a non-atomic `Heatmap`.","sig":null,"attributes":[{"value":"/ Performs a `Relaxed` load of the current `AtomicHeatmap` allocating and","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8305,"byte_end":8380,"line_start":136,"line_end":136,"column_start":5,"column_end":80}},{"value":"/ returning a non-atomic `Heatmap`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8385,"byte_end":8422,"line_start":137,"line_end":137,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8427,"byte_end":8430,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Note: data may be inconsistent if there are concurrent writes happening","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8435,"byte_end":8510,"line_start":139,"line_end":139,"column_start":5,"column_end":80}},{"value":"/ while the load operation is performed. Users needing better consistency","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8515,"byte_end":8590,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ should ensure that other threads are not writing into the heatmap while","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8595,"byte_end":8670,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ this operation is in-progress.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":8675,"byte_end":8709,"line_start":142,"line_end":142,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11466,"byte_end":11473,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Heatmap","qualname":"::heatmaps::standard::Heatmap","value":"Heatmap {  }","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" Heatmaps are datastructures which store counts for timestamped values over a\n configured time range with individual histograms arranged in a ring buffer.\n Increments occur in the most recent slice in the buffer, unless they are\n newer than that slice may hold. When this happens, old slices are cleared\n and reused. This configuration results in a fully pre-allocated\n datastructure.\n","sig":null,"attributes":[{"value":"/ Heatmaps are datastructures which store counts for timestamped values over a","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11052,"byte_end":11132,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ configured time range with individual histograms arranged in a ring buffer.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11133,"byte_end":11212,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ Increments occur in the most recent slice in the buffer, unless they are","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11213,"byte_end":11289,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ newer than that slice may hold. When this happens, old slices are cleared","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11290,"byte_end":11367,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ and reused. This configuration results in a fully pre-allocated","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11368,"byte_end":11435,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ datastructure.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11436,"byte_end":11454,"line_start":15,"line_end":15,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12610,"byte_end":12613,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Heatmap<Value, Count>>::new","value":"pub fn new(Value, u8, Duration<Nanoseconds<u64>>, Duration<Nanoseconds<u64>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Heatmap` which can store values up and including the `max`\n while maintaining precision across a wide range of values. The\n `precision` is expressed in the number of significant figures preserved.\n The heatmap will contain a histogram for each time step, specified by\n the resolution, necessary to represent the entire span of time stored\n within the heatmap. If the span is not evenly divisible by the\n resolution an additional window will be allocated and the true span will\n be slightly longer than the requested span. Smaller durations for the\n resolution cause more memory to be used, but a smaller batches of\n samples to age out at each time step.\n","sig":null,"attributes":[{"value":"/ Create a new `Heatmap` which can store values up and including the `max`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11864,"byte_end":11940,"line_start":30,"line_end":30,"column_start":5,"column_end":81}},{"value":"/ while maintaining precision across a wide range of values. The","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11945,"byte_end":12011,"line_start":31,"line_end":31,"column_start":5,"column_end":71}},{"value":"/ `precision` is expressed in the number of significant figures preserved.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12016,"byte_end":12092,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ The heatmap will contain a histogram for each time step, specified by","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12097,"byte_end":12170,"line_start":33,"line_end":33,"column_start":5,"column_end":78}},{"value":"/ the resolution, necessary to represent the entire span of time stored","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12175,"byte_end":12248,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"/ within the heatmap. If the span is not evenly divisible by the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12253,"byte_end":12319,"line_start":35,"line_end":35,"column_start":5,"column_end":71}},{"value":"/ resolution an additional window will be allocated and the true span will","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12324,"byte_end":12400,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ be slightly longer than the requested span. Smaller durations for the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12405,"byte_end":12478,"line_start":37,"line_end":37,"column_start":5,"column_end":78}},{"value":"/ resolution cause more memory to be used, but a smaller batches of","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12483,"byte_end":12552,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ samples to age out at each time step.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":12557,"byte_end":12598,"line_start":39,"line_end":39,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13309,"byte_end":13316,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"windows","qualname":"<Heatmap<Value, Count>>::windows","value":"pub fn windows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of windows stored in the `Heatmap`\n","sig":null,"attributes":[{"value":"/ Returns the number of windows stored in the `Heatmap`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13240,"byte_end":13297,"line_start":61,"line_end":61,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13473,"byte_end":13480,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"buckets","qualname":"<Heatmap<Value, Count>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets stored within each `Histogram` in the\n `Heatmap`\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets stored within each `Histogram` in the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13372,"byte_end":13443,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ `Heatmap`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13448,"byte_end":13461,"line_start":67,"line_end":67,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13605,"byte_end":13614,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"increment","qualname":"<Heatmap<Value, Count>>::increment","value":"pub fn increment(&mut Self, Instant<Nanoseconds<u64>>, Value, Count)","parent":null,"children":[],"decl_id":null,"docs":" Increment a time-value pair by a specified count\n","sig":null,"attributes":[{"value":"/ Increment a time-value pair by a specified count","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13541,"byte_end":13593,"line_start":72,"line_end":72,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14416,"byte_end":14426,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"percentile","qualname":"<Heatmap<Value, Count>>::percentile","value":"pub fn percentile(&mut Self, f64) -> Result<Value, HeatmapError>","parent":null,"children":[],"decl_id":null,"docs":" Return the nearest value for the requested percentile (0.0 - 100.0)\n across the total range of samples retained in the `Heatmap`.","sig":null,"attributes":[{"value":"/ Return the nearest value for the requested percentile (0.0 - 100.0)","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13893,"byte_end":13964,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ across the total range of samples retained in the `Heatmap`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":13969,"byte_end":14033,"line_start":82,"line_end":82,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14038,"byte_end":14041,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Note: since the heatmap stores a distribution across a configured time","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14046,"byte_end":14120,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ span, sequential calls to fetch the percentile might result in different","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14125,"byte_end":14201,"line_start":85,"line_end":85,"column_start":5,"column_end":81}},{"value":"/ results. For instance, you may see a 90th percentile that is higher than","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14206,"byte_end":14282,"line_start":86,"line_end":86,"column_start":5,"column_end":81}},{"value":"/ the 100th percentile depending on the timing of calls to this function","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14287,"byte_end":14361,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/ and the distribution of your data.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":14366,"byte_end":14404,"line_start":88,"line_end":88,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":15926,"byte_end":15930,"line_start":132,"line_end":132,"column_start":12,"column_end":16},"name":"Iter","qualname":"::heatmaps::standard::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":17648,"byte_end":17654,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Window","qualname":"::window::Window","value":"Window {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":17875,"byte_end":17880,"line_start":15,"line_end":15,"column_start":12,"column_end":17},"name":"start","qualname":"<Window<Value, Count>>::start","value":"pub fn start(&Self) -> Instant<Nanoseconds<u64>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":17956,"byte_end":17960,"line_start":19,"line_end":19,"column_start":12,"column_end":16},"name":"stop","qualname":"<Window<Value, Count>>::stop","value":"pub fn stop(&Self) -> Instant<Nanoseconds<u64>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":18035,"byte_end":18044,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"histogram","qualname":"<Window<Value, Count>>::histogram","value":"pub fn histogram(&Self) -> &Histogram<Value, Count>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":2,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2314,"byte_end":2326,"line_start":18,"line_end":18,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3936,"byte_end":3949,"line_start":28,"line_end":28,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11753,"byte_end":11760,"line_start":24,"line_end":24,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":16136,"byte_end":16140,"line_start":143,"line_end":143,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":16587,"byte_end":16591,"line_start":163,"line_end":163,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":17841,"byte_end":17847,"line_start":14,"line_end":14,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/error/mod.rs","byte_start":2314,"byte_end":2326,"line_start":18,"line_end":18,"column_start":31,"column_end":43},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/atomic.rs","byte_start":3936,"byte_end":3949,"line_start":28,"line_end":28,"column_start":20,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":11753,"byte_end":11760,"line_start":24,"line_end":24,"column_start":20,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":16136,"byte_end":16140,"line_start":143,"line_end":143,"column_start":24,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/heatmaps/standard.rs","byte_start":16587,"byte_end":16591,"line_start":163,"line_end":163,"column_start":37,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":7646}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/heatmap/src/window/mod.rs","byte_start":17841,"byte_end":17847,"line_start":14,"line_end":14,"column_start":20,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}}]}