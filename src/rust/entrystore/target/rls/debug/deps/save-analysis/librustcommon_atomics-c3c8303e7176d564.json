{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics","program":"/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rustcommon_atomics","--edition=2018","/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","-C","metadata=c3c8303e7176d564","-C","extra-filename=-c3c8303e7176d564","--out-dir","/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","-L","dependency=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","--extern","serde=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/libserde-24c61468a305e691.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_atomics-c3c8303e7176d564.rmeta"},"prelude":{"crate_id":{"name":"rustcommon_atomics","disambiguator":[8375033874145111343,0]},"crate_root":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src","external_crates":[{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[292688086858374235,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6438385474535706924,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13729837066422225192,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5402880783377335769,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6315666440082044202,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8715266272784128359,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2088041259338434830,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3489163311945967218,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[751421253572859800,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13041685254533870257,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[502015445408459368,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6198952210139392550,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[14184030540380960994,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[18399346483724303225,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15511893313068785759,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13348528473392455417,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[12356376325519007124,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[7246437135573011264,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12319769989328939461,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","num":20,"id":{"name":"serde","disambiguator":[8092164314335916850,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","num":21,"id":{"name":"serde_derive","disambiguator":[14630392082677206947,0]}}],"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":134,"byte_end":771,"line_start":5,"line_end":32,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":436,"byte_end":437,"line_start":16,"line_end":16,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"FetchCompareStore, Signed, SaturatingArithmetic, Unsigned, Atomic, Bitwise, Arithmetic","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":461,"byte_end":462,"line_start":17,"line_end":17,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":43641},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":493,"byte_end":501,"line_start":19,"line_end":19,"column_start":29,"column_end":37},"alias_span":null,"name":"Ordering","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":134,"byte_end":771,"line_start":5,"line_end":32,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":18},{"krate":0,"index":57},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":" A collection of atomic types which are unified through traits to allow for\n use as generic types in other datastructures. Also provides non standard\n atomic types such as an atomic `Option` type.\n","sig":null,"attributes":[{"value":"/ A collection of atomic types which are unified through traits to allow for","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":134,"byte_end":212,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ use as generic types in other datastructures. Also provides non standard","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":213,"byte_end":289,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ atomic types such as an atomic `Option` type.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":290,"byte_end":339,"line_start":7,"line_end":7,"column_start":1,"column_end":50}},{"value":"deny(clippy :: all)","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/lib.rs","byte_start":341,"byte_end":362,"line_start":9,"line_end":9,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15526,"byte_end":15536,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"Arithmetic","qualname":"::traits::arithmetic::Arithmetic","value":"Arithmetic: Atomic","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" Arithmetic operations on atomic types\n","sig":null,"attributes":[{"value":"/ Arithmetic operations on atomic types","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15474,"byte_end":15515,"line_start":7,"line_end":7,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15980,"byte_end":15989,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"fetch_add","qualname":"::traits::arithmetic::Arithmetic::fetch_add","value":"pub fn fetch_add(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Adds to the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Adds to the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15551,"byte_end":15611,"line_start":9,"line_end":9,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15616,"byte_end":15619,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ This operation wraps around on overflow.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15624,"byte_end":15668,"line_start":11,"line_end":11,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15673,"byte_end":15676,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15681,"byte_end":15755,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15760,"byte_end":15829,"line_start":14,"line_end":14,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15834,"byte_end":15906,"line_start":15,"line_end":15,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15911,"byte_end":15972,"line_start":16,"line_end":16,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16557,"byte_end":16566,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"fetch_sub","qualname":"::traits::arithmetic::Arithmetic::fetch_sub","value":"pub fn fetch_sub(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Subtracts from the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Subtracts from the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16121,"byte_end":16188,"line_start":23,"line_end":23,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16193,"byte_end":16196,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ This operation wraps around on overflow.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16201,"byte_end":16245,"line_start":25,"line_end":25,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16250,"byte_end":16253,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16258,"byte_end":16332,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16337,"byte_end":16406,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16411,"byte_end":16483,"line_start":29,"line_end":29,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":16488,"byte_end":16549,"line_start":30,"line_end":30,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":16893,"byte_end":16899,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Atomic","qualname":"::traits::atomic::Atomic","value":"Atomic","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Common operations on atomic types\n","sig":null,"attributes":[{"value":"/ Common operations on atomic types","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":16845,"byte_end":16882,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":16911,"byte_end":16920,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"Primitive","qualname":"::traits::atomic::Atomic::Primitive","value":"type Primitive;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17245,"byte_end":17249,"line_start":19,"line_end":19,"column_start":8,"column_end":12},"name":"load","qualname":"::traits::atomic::Atomic::load","value":"pub fn load(&Self, Ordering) -> Self::Primitive","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Creates a new atomic type from a primitive type.\n Loads the value from the atomic type.","sig":null,"attributes":[{"value":"/ Creates a new atomic type from a primitive type.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":16927,"byte_end":16979,"line_start":11,"line_end":11,"column_start":5,"column_end":57}},{"value":"/ Loads the value from the atomic type.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17018,"byte_end":17059,"line_start":14,"line_end":14,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17064,"byte_end":17067,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ `load` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17072,"byte_end":17147,"line_start":16,"line_end":16,"column_start":5,"column_end":80}},{"value":"/ of this operation. Possible values are `SeqCst`, `Acquire`, and","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17152,"byte_end":17219,"line_start":17,"line_end":17,"column_start":5,"column_end":72}},{"value":"/ `Relaxed`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17224,"byte_end":17237,"line_start":18,"line_end":18,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17538,"byte_end":17543,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"store","qualname":"::traits::atomic::Atomic::store","value":"pub fn store(&Self, Self::Primitive, Ordering)","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Stores a value into the atomic type.","sig":null,"attributes":[{"value":"/ Stores a value into the atomic type.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17299,"byte_end":17339,"line_start":21,"line_end":21,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17344,"byte_end":17347,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ `store` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17352,"byte_end":17428,"line_start":23,"line_end":23,"column_start":5,"column_end":81}},{"value":"/ of this operation. Possible values are `SeqCst`, `Acquire`, `Release`,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17433,"byte_end":17507,"line_start":24,"line_end":24,"column_start":5,"column_end":79}},{"value":"/ and `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17512,"byte_end":17530,"line_start":25,"line_end":25,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17959,"byte_end":17963,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"swap","qualname":"::traits::atomic::Atomic::swap","value":"pub fn swap(&Self, Self::Primitive, Ordering) -> Self::Primitive","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Stores a value into the atomic type, returning the previous value.\n `swap` takes an `Ordering` argument which describes the memory ordering\n of this operation. All ordering modes are possible. Note that using\n `Acquire` makes the store part of this operation `Relaxed`, and using\n `Release` makes the load part `Relaxed`.\n","sig":null,"attributes":[{"value":"/ Stores a value into the atomic type, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17598,"byte_end":17668,"line_start":28,"line_end":28,"column_start":5,"column_end":75}},{"value":"/ `swap` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17673,"byte_end":17748,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ of this operation. All ordering modes are possible. Note that using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17753,"byte_end":17824,"line_start":30,"line_end":30,"column_start":5,"column_end":76}},{"value":"/ `Acquire` makes the store part of this operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17829,"byte_end":17902,"line_start":31,"line_end":31,"column_start":5,"column_end":78}},{"value":"/ `Release` makes the load part `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":17907,"byte_end":17951,"line_start":32,"line_end":32,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18944,"byte_end":18960,"line_start":50,"line_end":50,"column_start":8,"column_end":24},"name":"compare_exchange","qualname":"::traits::atomic::Atomic::compare_exchange","value":"pub fn compare_exchange(&Self, Self::Primitive, Self::Primitive, Ordering,\n                        Ordering) -> Result<Self::Primitive, Self::Primitive>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Stores a value into the atomic type if the current value is the same as\n as the `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the atomic type if the current value is the same as","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18037,"byte_end":18112,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/ as the `current` value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18117,"byte_end":18144,"line_start":36,"line_end":36,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18149,"byte_end":18152,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The return value is a result indicating whether the new value was","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18157,"byte_end":18226,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ written and containing the previous value. On success this value is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18231,"byte_end":18302,"line_start":39,"line_end":39,"column_start":5,"column_end":76}},{"value":"/ guaranteed to be equal to `current`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18307,"byte_end":18347,"line_start":40,"line_end":40,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18352,"byte_end":18355,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18360,"byte_end":18429,"line_start":42,"line_end":42,"column_start":5,"column_end":74}},{"value":"/ memory ordering of this operation. The first describes the required","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18434,"byte_end":18505,"line_start":43,"line_end":43,"column_start":5,"column_end":76}},{"value":"/ ordering if the operation succeeds while the second describes the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18510,"byte_end":18579,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ required ordering when the operation fails. Using `Acquire` as success","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18584,"byte_end":18658,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ ordering makes the store part of this operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18663,"byte_end":18735,"line_start":46,"line_end":46,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the successful load `Relaxed`. The failure ordering","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18740,"byte_end":18811,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/ can only be `SeqCst`, `Acquire`, or `Relaxed` and must be equivalent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18816,"byte_end":18888,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ to or weaker than the success ordering.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":18893,"byte_end":18936,"line_start":49,"line_end":49,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":20174,"byte_end":20195,"line_start":74,"line_end":74,"column_start":8,"column_end":29},"name":"compare_exchange_weak","qualname":"::traits::atomic::Atomic::compare_exchange_weak","value":"pub fn compare_exchange_weak(&Self, Self::Primitive, Self::Primitive,\n                             Ordering, Ordering)\n-> Result<Self::Primitive, Self::Primitive>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Stores a value into the atomic type if the current value is the same as\n as the `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the atomic type if the current value is the same as","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19151,"byte_end":19226,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ as the `current` value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19231,"byte_end":19258,"line_start":59,"line_end":59,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19263,"byte_end":19266,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Unlike `compare_exchange`, this function is allowed to spuriously fail","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19271,"byte_end":19345,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ even when the comparison succeeds, which can result in more efficient","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19350,"byte_end":19423,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ code on some platforms. The return value is a result indicating whether","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19428,"byte_end":19503,"line_start":63,"line_end":63,"column_start":5,"column_end":80}},{"value":"/ the new value was written and containing the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19508,"byte_end":19572,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19577,"byte_end":19580,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange_weak` takes two `Ordering` arguments to describe the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19585,"byte_end":19659,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ memory ordering of this operation. The first describes the required","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19664,"byte_end":19735,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ ordering if the operation succeeds while the second describes the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19740,"byte_end":19809,"line_start":68,"line_end":68,"column_start":5,"column_end":74}},{"value":"/ required ordering when the operation fails. Using `Acquire` as success","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19814,"byte_end":19888,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ ordering makes the store part of this operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19893,"byte_end":19965,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the successful load `Relaxed`. The failure ordering","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":19970,"byte_end":20041,"line_start":71,"line_end":71,"column_start":5,"column_end":76}},{"value":"/ can only be `SeqCst`, `Acquire`, or `Relaxed` and must be equivalent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":20046,"byte_end":20118,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ to or weaker than the success ordering.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/atomic.rs","byte_start":20123,"byte_end":20166,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20582,"byte_end":20589,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"Bitwise","qualname":"::traits::bitwise::Bitwise","value":"Bitwise: Atomic","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Bitwise operations on atomic types\n","sig":null,"attributes":[{"value":"/ Bitwise operations on atomic types","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20533,"byte_end":20571,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20987,"byte_end":20996,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"fetch_and","qualname":"::traits::bitwise::Bitwise::fetch_and","value":"pub fn fetch_and(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Bitwise \"and\" with the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Bitwise \"and\" with the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20604,"byte_end":20675,"line_start":9,"line_end":9,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20680,"byte_end":20683,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20688,"byte_end":20762,"line_start":11,"line_end":11,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20767,"byte_end":20836,"line_start":12,"line_end":12,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20841,"byte_end":20913,"line_start":13,"line_end":13,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20918,"byte_end":20979,"line_start":14,"line_end":14,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21512,"byte_end":21522,"line_start":27,"line_end":27,"column_start":8,"column_end":18},"name":"fetch_nand","qualname":"::traits::bitwise::Bitwise::fetch_nand","value":"pub fn fetch_nand(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Bitwise \"nand\" with the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Bitwise \"nand\" with the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21128,"byte_end":21200,"line_start":21,"line_end":21,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21205,"byte_end":21208,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21213,"byte_end":21287,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21292,"byte_end":21361,"line_start":24,"line_end":24,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21366,"byte_end":21438,"line_start":25,"line_end":25,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21443,"byte_end":21504,"line_start":26,"line_end":26,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22036,"byte_end":22044,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"fetch_or","qualname":"::traits::bitwise::Bitwise::fetch_or","value":"pub fn fetch_or(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Bitwise \"or\" with the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Bitwise \"or\" with the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21654,"byte_end":21724,"line_start":33,"line_end":33,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21729,"byte_end":21732,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21737,"byte_end":21811,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21816,"byte_end":21885,"line_start":36,"line_end":36,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21890,"byte_end":21962,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":21967,"byte_end":22028,"line_start":38,"line_end":38,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22559,"byte_end":22568,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"fetch_xor","qualname":"::traits::bitwise::Bitwise::fetch_xor","value":"pub fn fetch_xor(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Bitwise \"xor\" with the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Bitwise \"xor\" with the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22176,"byte_end":22247,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22252,"byte_end":22255,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22260,"byte_end":22334,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. Using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22339,"byte_end":22408,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ `Acquire` makes the store part of the operation `Relaxed`, and using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22413,"byte_end":22485,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ `Release` makes the load part of the operation `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":22490,"byte_end":22551,"line_start":50,"line_end":50,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":22903,"byte_end":22920,"line_start":8,"line_end":8,"column_start":11,"column_end":28},"name":"FetchCompareStore","qualname":"::traits::fetch_compare_store::FetchCompareStore","value":"FetchCompareStore: Atomic","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Operations that fetch, compare, and store\n","sig":null,"attributes":[{"value":"/ Operations that fetch, compare, and store","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":22847,"byte_end":22892,"line_start":7,"line_end":7,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23476,"byte_end":23485,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"fetch_max","qualname":"::traits::fetch_compare_store::FetchCompareStore::fetch_max","value":"pub fn fetch_max(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Stores the value if it is greater than the current value.","sig":null,"attributes":[{"value":"/ Stores the value if it is greater than the current value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":22935,"byte_end":22996,"line_start":9,"line_end":9,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23001,"byte_end":23004,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ The return value is the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23009,"byte_end":23052,"line_start":11,"line_end":11,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23057,"byte_end":23060,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23065,"byte_end":23139,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. When using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23144,"byte_end":23218,"line_start":14,"line_end":14,"column_start":5,"column_end":79}},{"value":"/ `AcqRel`, the operation might fail and just perform an `Acquire` load,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23223,"byte_end":23297,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ but not have `Release` semantics. Using `Acquire` makes the store part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23302,"byte_end":23376,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ `Relaxed` if it happens, and using `Release` makes the load part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23381,"byte_end":23449,"line_start":17,"line_end":17,"column_start":5,"column_end":73}},{"value":"/ `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23454,"byte_end":23468,"line_start":18,"line_end":18,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":24155,"byte_end":24164,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"fetch_min","qualname":"::traits::fetch_compare_store::FetchCompareStore::fetch_min","value":"pub fn fetch_min(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Stores the value if it is less than the current value.","sig":null,"attributes":[{"value":"/ Stores the value if it is less than the current value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23617,"byte_end":23675,"line_start":25,"line_end":25,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23680,"byte_end":23683,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ The return value is the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23688,"byte_end":23731,"line_start":27,"line_end":27,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23736,"byte_end":23739,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23744,"byte_end":23818,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. When using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23823,"byte_end":23897,"line_start":30,"line_end":30,"column_start":5,"column_end":79}},{"value":"/ `AcqRel`, the operation might fail and just perform an `Acquire` load,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23902,"byte_end":23976,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ but not have `Release` semantics. Using `Acquire` makes the store part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":23981,"byte_end":24055,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ `Relaxed` if it happens, and using `Release` makes the load part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":24060,"byte_end":24128,"line_start":33,"line_end":33,"column_start":5,"column_end":73}},{"value":"/ `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":24133,"byte_end":24147,"line_start":34,"line_end":34,"column_start":5,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":51},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24495,"byte_end":24515,"line_start":8,"line_end":8,"column_start":11,"column_end":31},"name":"SaturatingArithmetic","qualname":"::traits::saturating_arithmetic::SaturatingArithmetic","value":"SaturatingArithmetic: Atomic","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" Saturating arithmetic on atomic types\n","sig":null,"attributes":[{"value":"/ Saturating arithmetic on atomic types","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24443,"byte_end":24484,"line_start":7,"line_end":7,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25077,"byte_end":25097,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"fetch_saturating_add","qualname":"::traits::saturating_arithmetic::SaturatingArithmetic::fetch_saturating_add","value":"pub fn fetch_saturating_add(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Adds to the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Adds to the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24530,"byte_end":24590,"line_start":9,"line_end":9,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24595,"byte_end":24598,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ This operation saturates at the numeric bound.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24603,"byte_end":24653,"line_start":11,"line_end":11,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24658,"byte_end":24661,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24666,"byte_end":24740,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. When using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24745,"byte_end":24819,"line_start":14,"line_end":14,"column_start":5,"column_end":79}},{"value":"/ `AcqRel`, the operation might fail and just perform an `Acquire` load,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24824,"byte_end":24898,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ but not have `Release` semantics. Using `Acquire` makes the store part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24903,"byte_end":24977,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ `Relaxed` if it happens, and using `Release` makes the load part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24982,"byte_end":25050,"line_start":17,"line_end":17,"column_start":5,"column_end":73}},{"value":"/ `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25055,"byte_end":25069,"line_start":18,"line_end":18,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25783,"byte_end":25803,"line_start":35,"line_end":35,"column_start":8,"column_end":28},"name":"fetch_saturating_sub","qualname":"::traits::saturating_arithmetic::SaturatingArithmetic::fetch_saturating_sub","value":"pub fn fetch_saturating_sub(&Self, <Self as Atomic>::Primitive, Ordering)\n-> <Self as Atomic>::Primitive","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Subtracts from the current value, returning the previous value.","sig":null,"attributes":[{"value":"/ Subtracts from the current value, returning the previous value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25229,"byte_end":25296,"line_start":25,"line_end":25,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25301,"byte_end":25304,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This operation saturates at the numeric bound.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25309,"byte_end":25359,"line_start":27,"line_end":27,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25364,"byte_end":25367,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This operation takes an `Ordering` argument which describes the memory","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25372,"byte_end":25446,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ ordering of the operation. All ordering modes are possible. When using","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25451,"byte_end":25525,"line_start":30,"line_end":30,"column_start":5,"column_end":79}},{"value":"/ `AcqRel`, the operation might fail and just perform an `Acquire` load,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25530,"byte_end":25604,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ but not have `Release` semantics. Using `Acquire` makes the store part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25609,"byte_end":25683,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ `Relaxed` if it happens, and using `Release` makes the load part","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25688,"byte_end":25756,"line_start":33,"line_end":33,"column_start":5,"column_end":73}},{"value":"/ `Relaxed`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":25761,"byte_end":25775,"line_start":34,"line_end":34,"column_start":5,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/mod.rs","byte_start":15267,"byte_end":15273,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"Signed","qualname":"::traits::Signed","value":"Signed","parent":null,"children":[],"decl_id":null,"docs":" Values are signed\n","sig":null,"attributes":[{"value":"/ Values are signed","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/mod.rs","byte_start":15235,"byte_end":15256,"line_start":22,"line_end":22,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":56},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/mod.rs","byte_start":15312,"byte_end":15320,"line_start":26,"line_end":26,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::traits::Unsigned","value":"Unsigned","parent":null,"children":[],"decl_id":null,"docs":" Values are unsigned\n","sig":null,"attributes":[{"value":"/ Values are unsigned","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/mod.rs","byte_start":15278,"byte_end":15301,"line_start":25,"line_end":25,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":859},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":26824,"byte_end":26834,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"name":"AtomicBool","qualname":"::types::bool::AtomicBool","value":"AtomicBool {  }","parent":null,"children":[{"krate":0,"index":860}],"decl_id":null,"docs":" A boolean type which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":879},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":28233,"byte_end":28242,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicF32","qualname":"::types::f32::AtomicF32","value":"AtomicF32 {  }","parent":null,"children":[{"krate":0,"index":880}],"decl_id":null,"docs":" A 32 bit floating point number which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":33270,"byte_end":33279,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicF64","qualname":"::types::f64::AtomicF64","value":"AtomicF64 {  }","parent":null,"children":[{"krate":0,"index":898}],"decl_id":null,"docs":" A 64 bit floating point number which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":915},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":37739,"byte_end":37747,"line_start":12,"line_end":12,"column_start":16,"column_end":24},"name":"AtomicI8","qualname":"::types::i8::AtomicI8","value":"AtomicI8 {  }","parent":null,"children":[{"krate":0,"index":916}],"decl_id":null,"docs":" A signed 8 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":42763,"byte_end":42772,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicI16","qualname":"::types::i16::AtomicI16","value":"AtomicI16 {  }","parent":null,"children":[{"krate":0,"index":945}],"decl_id":null,"docs":" A signed 16 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":973},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":47477,"byte_end":47486,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicI32","qualname":"::types::i32::AtomicI32","value":"AtomicI32 {  }","parent":null,"children":[{"krate":0,"index":974}],"decl_id":null,"docs":" A signed 32 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1002},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":51841,"byte_end":51850,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicI64","qualname":"::types::i64::AtomicI64","value":"AtomicI64 {  }","parent":null,"children":[{"krate":0,"index":1003}],"decl_id":null,"docs":" A signed 64 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1031},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":55862,"byte_end":55873,"line_start":12,"line_end":12,"column_start":16,"column_end":27},"name":"AtomicIsize","qualname":"::types::isize::AtomicIsize","value":"AtomicIsize {  }","parent":null,"children":[{"krate":0,"index":1032}],"decl_id":null,"docs":" A signed pointer-sized integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":60684,"byte_end":60692,"line_start":12,"line_end":12,"column_start":16,"column_end":24},"name":"AtomicU8","qualname":"::types::u8::AtomicU8","value":"AtomicU8 {  }","parent":null,"children":[{"krate":0,"index":1061}],"decl_id":null,"docs":" An unsigned 8 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1089},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":65717,"byte_end":65726,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicU16","qualname":"::types::u16::AtomicU16","value":"AtomicU16 {  }","parent":null,"children":[{"krate":0,"index":1090}],"decl_id":null,"docs":" An unsigned 16 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":70614,"byte_end":70623,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicU32","qualname":"::types::u32::AtomicU32","value":"AtomicU32 {  }","parent":null,"children":[{"krate":0,"index":1119}],"decl_id":null,"docs":" An unsigned 32 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":75336,"byte_end":75345,"line_start":12,"line_end":12,"column_start":16,"column_end":25},"name":"AtomicU64","qualname":"::types::u64::AtomicU64","value":"AtomicU64 {  }","parent":null,"children":[{"krate":0,"index":1148}],"decl_id":null,"docs":" An unsigned 64 bit integer which can be shared between threads\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":79914,"byte_end":79925,"line_start":12,"line_end":12,"column_start":16,"column_end":27},"name":"AtomicUsize","qualname":"::types::usize::AtomicUsize","value":"AtomicUsize {  }","parent":null,"children":[{"krate":0,"index":1177}],"decl_id":null,"docs":" An unsigned pointer-sized integer which can be shared between threads\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27035,"byte_end":27052,"line_start":22,"line_end":22,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27434,"byte_end":27444,"line_start":38,"line_end":38,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27675,"byte_end":27685,"line_start":48,"line_end":48,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":28447,"byte_end":28463,"line_start":22,"line_end":22,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":139},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":31261,"byte_end":31270,"line_start":125,"line_end":125,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":31498,"byte_end":31507,"line_start":135,"line_end":135,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":33484,"byte_end":33500,"line_start":22,"line_end":22,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":202},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":35737,"byte_end":35746,"line_start":111,"line_end":111,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":35974,"byte_end":35983,"line_start":121,"line_end":121,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":37951,"byte_end":37959,"line_start":21,"line_end":21,"column_start":17,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":38068,"byte_end":38083,"line_start":27,"line_end":27,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":246},{"krate":0,"index":251},{"krate":0,"index":256},{"krate":0,"index":261},{"krate":0,"index":266},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":40816,"byte_end":40824,"line_start":127,"line_end":127,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":41049,"byte_end":41057,"line_start":137,"line_end":137,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":42986,"byte_end":42995,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":43105,"byte_end":43121,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":318},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":330},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":45520,"byte_end":45529,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":45757,"byte_end":45766,"line_start":127,"line_end":127,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":47700,"byte_end":47709,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":47819,"byte_end":47835,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":49884,"byte_end":49893,"line_start":107,"line_end":107,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":50121,"byte_end":50130,"line_start":117,"line_end":117,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":52064,"byte_end":52073,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":52183,"byte_end":52199,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":53898,"byte_end":53907,"line_start":97,"line_end":97,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":54135,"byte_end":54144,"line_start":107,"line_end":107,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":56107,"byte_end":56118,"line_start":21,"line_end":21,"column_start":17,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":56230,"byte_end":56248,"line_start":27,"line_end":27,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":492},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":504},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":58707,"byte_end":58718,"line_start":117,"line_end":117,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":58950,"byte_end":58961,"line_start":127,"line_end":127,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":60898,"byte_end":60906,"line_start":21,"line_end":21,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":61015,"byte_end":61030,"line_start":27,"line_end":27,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":552},{"krate":0,"index":557},{"krate":0,"index":562},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":574},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":63766,"byte_end":63774,"line_start":127,"line_end":127,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":64000,"byte_end":64008,"line_start":137,"line_end":137,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":65942,"byte_end":65951,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":66061,"byte_end":66077,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":622},{"krate":0,"index":627},{"krate":0,"index":632},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":68654,"byte_end":68663,"line_start":122,"line_end":122,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":68891,"byte_end":68900,"line_start":132,"line_end":132,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":70839,"byte_end":70848,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":70958,"byte_end":70974,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":689},{"krate":0,"index":694},{"krate":0,"index":699},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":73376,"byte_end":73385,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":73613,"byte_end":73622,"line_start":127,"line_end":127,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":75585,"byte_end":75594,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":75704,"byte_end":75720,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":753},{"krate":0,"index":758},{"krate":0,"index":763},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":77947,"byte_end":77956,"line_start":112,"line_end":112,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":78184,"byte_end":78193,"line_start":122,"line_end":122,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":80161,"byte_end":80172,"line_start":21,"line_end":21,"column_start":19,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":80284,"byte_end":80302,"line_start":27,"line_end":27,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":814},{"krate":0,"index":819},{"krate":0,"index":824},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":836},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":83115,"byte_end":83126,"line_start":127,"line_end":127,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":83358,"byte_end":83369,"line_start":137,"line_end":137,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/arithmetic.rs","byte_start":15538,"byte_end":15544,"line_start":8,"line_end":8,"column_start":23,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":21}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/bitwise.rs","byte_start":20591,"byte_end":20597,"line_start":8,"line_end":8,"column_start":20,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/fetch_compare_store.rs","byte_start":22922,"byte_end":22928,"line_start":8,"line_end":8,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/traits/saturating_arithmetic.rs","byte_start":24517,"byte_end":24523,"line_start":8,"line_end":8,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":51}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27035,"byte_end":27052,"line_start":22,"line_end":22,"column_start":28,"column_end":45},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":76},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27434,"byte_end":27444,"line_start":38,"line_end":38,"column_start":32,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":859},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/bool.rs","byte_start":27675,"byte_end":27685,"line_start":48,"line_end":48,"column_start":20,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":859},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":28447,"byte_end":28463,"line_start":22,"line_end":22,"column_start":28,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":110},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":31261,"byte_end":31270,"line_start":125,"line_end":125,"column_start":32,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":879},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f32.rs","byte_start":31498,"byte_end":31507,"line_start":135,"line_end":135,"column_start":20,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":879},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":33484,"byte_end":33500,"line_start":22,"line_end":22,"column_start":28,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":174},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":35737,"byte_end":35746,"line_start":111,"line_end":111,"column_start":32,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":897},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/f64.rs","byte_start":35974,"byte_end":35983,"line_start":121,"line_end":121,"column_start":20,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":897},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":37951,"byte_end":37959,"line_start":21,"line_end":21,"column_start":17,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":915},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":38068,"byte_end":38083,"line_start":27,"line_end":27,"column_start":28,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":233},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":40816,"byte_end":40824,"line_start":127,"line_end":127,"column_start":32,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":915},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i8.rs","byte_start":41049,"byte_end":41057,"line_start":137,"line_end":137,"column_start":20,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":915},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":42986,"byte_end":42995,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":944},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":43105,"byte_end":43121,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":303},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":45520,"byte_end":45529,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":944},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i16.rs","byte_start":45757,"byte_end":45766,"line_start":127,"line_end":127,"column_start":20,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":944},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":47700,"byte_end":47709,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":973},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":47819,"byte_end":47835,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":367},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":49884,"byte_end":49893,"line_start":107,"line_end":107,"column_start":32,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":973},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i32.rs","byte_start":50121,"byte_end":50130,"line_start":117,"line_end":117,"column_start":20,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":973},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":52064,"byte_end":52073,"line_start":21,"line_end":21,"column_start":17,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1002},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":52183,"byte_end":52199,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":425},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":53898,"byte_end":53907,"line_start":97,"line_end":97,"column_start":32,"column_end":41},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1002},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/i64.rs","byte_start":54135,"byte_end":54144,"line_start":107,"line_end":107,"column_start":20,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1002},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":56107,"byte_end":56118,"line_start":21,"line_end":21,"column_start":17,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1031},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":56230,"byte_end":56248,"line_start":27,"line_end":27,"column_start":28,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":477},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":58707,"byte_end":58718,"line_start":117,"line_end":117,"column_start":32,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1031},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/isize.rs","byte_start":58950,"byte_end":58961,"line_start":127,"line_end":127,"column_start":20,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1031},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":60898,"byte_end":60906,"line_start":21,"line_end":21,"column_start":19,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":61015,"byte_end":61030,"line_start":27,"line_end":27,"column_start":28,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":541},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":63766,"byte_end":63774,"line_start":127,"line_end":127,"column_start":32,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1060},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u8.rs","byte_start":64000,"byte_end":64008,"line_start":137,"line_end":137,"column_start":20,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1060},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":65942,"byte_end":65951,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1089},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":66061,"byte_end":66077,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":611},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":68654,"byte_end":68663,"line_start":122,"line_end":122,"column_start":32,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1089},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u16.rs","byte_start":68891,"byte_end":68900,"line_start":132,"line_end":132,"column_start":20,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1089},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":70839,"byte_end":70848,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1118},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":70958,"byte_end":70974,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":678},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":73376,"byte_end":73385,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1118},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u32.rs","byte_start":73613,"byte_end":73622,"line_start":127,"line_end":127,"column_start":20,"column_end":29},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1118},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":75585,"byte_end":75594,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1147},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":75704,"byte_end":75720,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":742},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":77947,"byte_end":77956,"line_start":112,"line_end":112,"column_start":32,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1147},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/u64.rs","byte_start":78184,"byte_end":78193,"line_start":122,"line_end":122,"column_start":20,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1147},"to":{"krate":20,"index":2077}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":80161,"byte_end":80172,"line_start":21,"line_end":21,"column_start":19,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1176},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":80284,"byte_end":80302,"line_start":27,"line_end":27,"column_start":28,"column_end":46},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":803},"to":{"krate":20,"index":1622}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":83115,"byte_end":83126,"line_start":127,"line_end":127,"column_start":32,"column_end":43},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1176},"to":{"krate":20,"index":1538}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/atomics/src/types/usize.rs","byte_start":83358,"byte_end":83369,"line_start":137,"line_end":137,"column_start":20,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1176},"to":{"krate":20,"index":2077}}]}