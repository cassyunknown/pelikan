{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2","program":"/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rustcommon_metrics_v2","--edition=2018","/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"heatmap\"","--cfg","feature=\"rustcommon-atomics\"","--cfg","feature=\"rustcommon-heatmap\"","-C","metadata=514fe14fc6c16bf7","-C","extra-filename=-514fe14fc6c16bf7","--out-dir","/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","-L","dependency=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps","--extern","linkme=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/liblinkme-364e0707cdb0aad7.rmeta","--extern","once_cell=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/libonce_cell-15554d47cfe50397.rmeta","--extern","parking_lot=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/libparking_lot-cb2395cc20996770.rmeta","--extern","rustcommon_atomics=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_atomics-c3c8303e7176d564.rmeta","--extern","rustcommon_heatmap=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_heatmap-55ad3fe6777fd69c.rmeta","--extern","rustcommon_metrics_derive=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_metrics_derive-3adedd1f382ce62f.so","--extern","rustcommon_time=/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_time-d33a52637b536467.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/users/u6632448/pelikan/src/rust/entrystore/target/rls/debug/deps/librustcommon_metrics_v2-514fe14fc6c16bf7.rmeta"},"prelude":{"crate_id":{"name":"rustcommon_metrics_v2","disambiguator":[12064729016426989607,0]},"crate_root":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src","external_crates":[{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[292688086858374235,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6438385474535706924,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13729837066422225192,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5402880783377335769,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6315666440082044202,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8715266272784128359,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2088041259338434830,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3489163311945967218,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[751421253572859800,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13041685254533870257,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[502015445408459368,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6198952210139392550,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[14184030540380960994,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[18399346483724303225,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15511893313068785759,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13348528473392455417,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[12356376325519007124,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[7246437135573011264,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12319769989328939461,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":20,"id":{"name":"linkme","disambiguator":[9721787056941310740,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":21,"id":{"name":"linkme_impl","disambiguator":[7069164013863538848,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":22,"id":{"name":"parking_lot","disambiguator":[14780969635559837631,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":23,"id":{"name":"instant","disambiguator":[3070985284713756781,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":24,"id":{"name":"cfg_if","disambiguator":[1395217510087694839,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":25,"id":{"name":"lock_api","disambiguator":[5406591411042632600,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":26,"id":{"name":"scopeguard","disambiguator":[3887310188632539689,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":27,"id":{"name":"parking_lot_core","disambiguator":[3092722073381318349,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":28,"id":{"name":"smallvec","disambiguator":[17695815082097293483,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":29,"id":{"name":"libc","disambiguator":[8355182677265087669,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","num":30,"id":{"name":"once_cell","disambiguator":[17771516881633747675,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":31,"id":{"name":"rustcommon_atomics","disambiguator":[8375033874145111343,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":32,"id":{"name":"serde","disambiguator":[8092164314335916850,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":33,"id":{"name":"serde_derive","disambiguator":[14630392082677206947,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":34,"id":{"name":"rustcommon_heatmap","disambiguator":[16703334322203156497,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":35,"id":{"name":"rustcommon_histogram","disambiguator":[7748246731846229349,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":36,"id":{"name":"thiserror","disambiguator":[6806157695453182678,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":37,"id":{"name":"thiserror_impl","disambiguator":[10365884797249422675,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":38,"id":{"name":"rustcommon_time","disambiguator":[13149749425862839623,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":39,"id":{"name":"time","disambiguator":[7955324051584549148,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","num":40,"id":{"name":"itoa","disambiguator":[9064558066898048805,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","num":41,"id":{"name":"rustcommon_metrics_derive","disambiguator":[14359003889093715025,0]}}],"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":129,"byte_end":8875,"line_start":5,"line_end":302,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2768,"byte_end":2775,"line_start":84,"line_end":84,"column_start":25,"column_end":32},"alias_span":null,"name":"Counter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2805,"byte_end":2819,"line_start":85,"line_end":85,"column_start":29,"column_end":43},"alias_span":null,"name":"DynBoxedMetric","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":206},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2821,"byte_end":2836,"line_start":85,"line_end":85,"column_start":45,"column_end":60},"alias_span":null,"name":"DynPinnedMetric","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2861,"byte_end":2866,"line_start":86,"line_end":86,"column_start":23,"column_end":28},"alias_span":null,"name":"Gauge","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2890,"byte_end":2894,"line_start":87,"line_end":87,"column_start":23,"column_end":27},"alias_span":null,"name":"Lazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2896,"byte_end":2903,"line_start":87,"line_end":87,"column_start":29,"column_end":36},"alias_span":null,"name":"Relaxed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":158},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2959,"byte_end":2966,"line_start":90,"line_end":90,"column_start":25,"column_end":32},"alias_span":null,"name":"Heatmap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":41,"index":112},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3004,"byte_end":3010,"line_start":92,"line_end":92,"column_start":36,"column_end":42},"alias_span":null,"name":"metric","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3038,"byte_end":3039,"line_start":94,"line_end":94,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":129,"byte_end":8875,"line_start":5,"line_end":302,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":36},{"krate":0,"index":62},{"krate":0,"index":148},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317}],"decl_id":null,"docs":" Easily registered distributed metrics.","sig":null,"attributes":[{"value":"/ Easily registered distributed metrics.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":129,"byte_end":171,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":172,"byte_end":175,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ More docs todo...","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":176,"byte_end":197,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":198,"byte_end":201,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Creating a Metric","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":202,"byte_end":225,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/ Registering a metric is straightforward. All that's needed is to declare a","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":226,"byte_end":304,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ static within the [`metric`] macro. By default, the metric will have the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":305,"byte_end":381,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ name of the path to the static variable you used to declare it but this can","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":382,"byte_end":461,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be overridden by passing the `name` parameter to the macro.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":462,"byte_end":525,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":526,"byte_end":529,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":530,"byte_end":537,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ # // This should remain in sync with the example below.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":538,"byte_end":597,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"/ use rustcommon_metrics_v2::*;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":598,"byte_end":631,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/ /// A counter metric named \"<crate name>::COUNTER_A\"","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":632,"byte_end":688,"line_start":18,"line_end":18,"column_start":1,"column_end":57}},{"value":"/ #[metric]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":689,"byte_end":702,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/ static COUNTER_A: Counter = Counter::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":703,"byte_end":750,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":751,"byte_end":754,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ /// A counter metric named \"my.metric.name\"","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":755,"byte_end":802,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ #[metric(name = \"my.metric.name\")]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":803,"byte_end":841,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/ static COUNTER_B: Counter = Counter::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":842,"byte_end":889,"line_start":24,"line_end":24,"column_start":1,"column_end":48}},{"value":"/ #","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":890,"byte_end":895,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ # let metrics = metrics();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":896,"byte_end":926,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ # // Metrics may be in any arbitrary order","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":927,"byte_end":973,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ # let mut names: Vec<_> = metrics.iter().map(|metric| metric.name()).collect();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":974,"byte_end":1057,"line_start":28,"line_end":28,"column_start":1,"column_end":84}},{"value":"/ # names.sort();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1058,"byte_end":1077,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1078,"byte_end":1083,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ # assert_eq!(names.len(), 2);","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1084,"byte_end":1117,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ # assert_eq!(names[0], \"my.metric.name\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1118,"byte_end":1163,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/ # assert_eq!(names[1], concat!(module_path!(), \"::\", \"COUNTER_A\"));","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1164,"byte_end":1235,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1236,"byte_end":1243,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1244,"byte_end":1247,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Accessing Metrics","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1248,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ All metrics registered via the [`metric`] macro can be accessed by calling","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1272,"byte_end":1350,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ the [`metrics`] function. This will return an instance of the [`Metric`]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1351,"byte_end":1427,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ struct which allows you to access all staticly and dynamically registered","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1428,"byte_end":1505,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ metrics.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1506,"byte_end":1518,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1519,"byte_end":1522,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Suppose we have the metrics declared in the example above.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1523,"byte_end":1585,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1586,"byte_end":1593,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ # // This should remain in sync with the example above.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1594,"byte_end":1653,"line_start":44,"line_end":44,"column_start":1,"column_end":60}},{"value":"/ # use rustcommon_metrics_v2::*;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1654,"byte_end":1689,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/ # /// A counter metric named \"<crate name>::COUNTER_A\"","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1690,"byte_end":1748,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/ # #[metric]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1749,"byte_end":1764,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/ # static COUNTER_A: Counter = Counter::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1765,"byte_end":1814,"line_start":48,"line_end":48,"column_start":1,"column_end":50}},{"value":"/ #","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1815,"byte_end":1820,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/ # /// A counter metric named \"my.metric.name\"","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1821,"byte_end":1870,"line_start":50,"line_end":50,"column_start":1,"column_end":50}},{"value":"/ # #[metric(name = \"my.metric.name\")]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1871,"byte_end":1911,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/ # static COUNTER_B: Counter = Counter::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1912,"byte_end":1961,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/ #","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1962,"byte_end":1967,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ let metrics = metrics();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1968,"byte_end":1996,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"/ // Metrics may be in any arbitrary order","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":1997,"byte_end":2041,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ let mut names: Vec<_> = metrics.iter().map(|metric| metric.name()).collect();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2042,"byte_end":2123,"line_start":56,"line_end":56,"column_start":1,"column_end":82}},{"value":"/ names.sort();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2124,"byte_end":2141,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2142,"byte_end":2145,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(names.len(), 2);","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2146,"byte_end":2177,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(names[0], \"my.metric.name\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2178,"byte_end":2221,"line_start":60,"line_end":60,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(names[1], concat!(module_path!(), \"::\", \"COUNTER_A\"));","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2222,"byte_end":2291,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2292,"byte_end":2299,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2300,"byte_end":2303,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # How it Works","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2304,"byte_end":2322,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/ Behind the scenes, this crate uses the [`linkme`] crate to create a","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2323,"byte_end":2394,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ distributed slice containing a [`MetricEntry`] instance for each metric that","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2395,"byte_end":2475,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ is registered via the [`metric`] attribute.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2476,"byte_end":2523,"line_start":67,"line_end":67,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":320},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9614,"byte_end":9621,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"Counter","qualname":"::counter::Counter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A counter. Can be incremented or added to.","sig":null,"attributes":[{"value":"/ A counter. Can be incremented or added to.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9091,"byte_end":9137,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9138,"byte_end":9141,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In case of overflow the counter will wrap around. However, internally it","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9142,"byte_end":9218,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ uses an unsigned 64-bit integer so for most use cases this should be","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9219,"byte_end":9291,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ unlikely.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9292,"byte_end":9305,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9306,"byte_end":9309,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9310,"byte_end":9323,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9324,"byte_end":9331,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # use rustcommon_metrics_v2::{metric, Counter};","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9332,"byte_end":9383,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"/ #[metric(name = \"my.custom.metric\")]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9384,"byte_end":9424,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/ static MY_COUNTER: Counter = Counter::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9425,"byte_end":9473,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9474,"byte_end":9477,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ fn a_method() {","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9478,"byte_end":9497,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/     MY_COUNTER.increment();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9498,"byte_end":9529,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/     // ...","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9530,"byte_end":9544,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9545,"byte_end":9550,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/ # a_method();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9551,"byte_end":9568,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9569,"byte_end":9576,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9710,"byte_end":9713,"line_start":32,"line_end":32,"column_start":18,"column_end":21},"name":"new","qualname":"<Counter>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a counter initialized to 0.\n","sig":null,"attributes":[{"value":"/ Create a counter initialized to 0.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9654,"byte_end":9692,"line_start":31,"line_end":31,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9827,"byte_end":9837,"line_start":37,"line_end":37,"column_start":18,"column_end":28},"name":"with_value","qualname":"<Counter>::with_value","value":"pub const fn with_value(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a counter initialized to `value`.\n","sig":null,"attributes":[{"value":"/ Create a counter initialized to `value`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9765,"byte_end":9809,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9928,"byte_end":9937,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"increment","qualname":"<Counter>::increment","value":"pub fn increment(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9907,"byte_end":9916,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10006,"byte_end":10009,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"add","qualname":"<Counter>::add","value":"pub fn add(&Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9985,"byte_end":9994,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10121,"byte_end":10126,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"value","qualname":"<Counter>::value","value":"pub fn value(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10100,"byte_end":10109,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10214,"byte_end":10217,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"set","qualname":"<Counter>::set","value":"pub fn set(&Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10193,"byte_end":10202,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10324,"byte_end":10329,"line_start":62,"line_end":62,"column_start":12,"column_end":17},"name":"reset","qualname":"<Counter>::reset","value":"pub fn reset(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10303,"byte_end":10312,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":327},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11268,"byte_end":11273,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Gauge","qualname":"::gauge::Gauge","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gauge. Indicates the current value of some host parameter.","sig":null,"attributes":[{"value":"/ A gauge. Indicates the current value of some host parameter.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10686,"byte_end":10750,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10751,"byte_end":10754,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In case of overflow/underflow the gauge will wrap around. However,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10755,"byte_end":10825,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ internally it uses a signed 64-bit integer so for most use cases this should","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10826,"byte_end":10906,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ be unlikely.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10907,"byte_end":10923,"line_start":13,"line_end":13,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10924,"byte_end":10927,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10928,"byte_end":10941,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10942,"byte_end":10949,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # use rustcommon_metrics_v2::{metric, Gauge};","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":10950,"byte_end":10999,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ #[metric(name = \"my.gauge\")]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11000,"byte_end":11032,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ static A_METHOD_RUNNING: Gauge = Gauge::new();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11033,"byte_end":11083,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11084,"byte_end":11087,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ fn a_method() {","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11088,"byte_end":11107,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/     A_METHOD_RUNNING.increment();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11108,"byte_end":11145,"line_start":22,"line_end":22,"column_start":1,"column_end":38}},{"value":"/     // ...","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11146,"byte_end":11160,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/     A_METHOD_RUNNING.decrement();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11161,"byte_end":11198,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11199,"byte_end":11204,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ # a_method();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11205,"byte_end":11222,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11223,"byte_end":11230,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11373,"byte_end":11376,"line_start":33,"line_end":33,"column_start":18,"column_end":21},"name":"new","qualname":"<Gauge>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new guage with the default value of 0.\n","sig":null,"attributes":[{"value":"/ Create a new guage with the default value of 0.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11304,"byte_end":11355,"line_start":32,"line_end":32,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11501,"byte_end":11511,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"name":"with_value","qualname":"<Gauge>::with_value","value":"pub const fn with_value(i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new guage with the provided initial value.\n","sig":null,"attributes":[{"value":"/ Create a new guage with the provided initial value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11428,"byte_end":11483,"line_start":37,"line_end":37,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11702,"byte_end":11711,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"increment","qualname":"<Gauge>::increment","value":"pub fn increment(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Increment the value of this gauge by 1.","sig":null,"attributes":[{"value":"/ Increment the value of this gauge by 1.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11581,"byte_end":11624,"line_start":42,"line_end":42,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11629,"byte_end":11632,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Returns the old value of the gauge.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11637,"byte_end":11676,"line_start":44,"line_end":44,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11681,"byte_end":11690,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11880,"byte_end":11889,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"decrement","qualname":"<Gauge>::decrement","value":"pub fn decrement(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Decrement the value of this gauge by 1.","sig":null,"attributes":[{"value":"/ Decrement the value of this gauge by 1.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11759,"byte_end":11802,"line_start":50,"line_end":50,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11807,"byte_end":11810,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Returns the old value of the gauge.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11815,"byte_end":11854,"line_start":52,"line_end":52,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11859,"byte_end":11868,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12062,"byte_end":12065,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"add","qualname":"<Gauge>::add","value":"pub fn add(&Self, i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Increase the value of this gauge by `value`.","sig":null,"attributes":[{"value":"/ Increase the value of this gauge by `value`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11937,"byte_end":11985,"line_start":58,"line_end":58,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11990,"byte_end":11993,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Returns the od value of the gauge.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11998,"byte_end":12036,"line_start":60,"line_end":60,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12041,"byte_end":12050,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12281,"byte_end":12284,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"sub","qualname":"<Gauge>::sub","value":"pub fn sub(&Self, i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Decrease the value of this gauge by `value`.","sig":null,"attributes":[{"value":"/ Decrease the value of this gauge by `value`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12156,"byte_end":12204,"line_start":66,"line_end":66,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12209,"byte_end":12212,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Returns the od value of the gauge.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12217,"byte_end":12255,"line_start":68,"line_end":68,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12260,"byte_end":12269,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12396,"byte_end":12401,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"value","qualname":"<Gauge>::value","value":"pub fn value(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12375,"byte_end":12384,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12489,"byte_end":12492,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"set","qualname":"<Gauge>::set","value":"pub fn set(&Self, i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12468,"byte_end":12477,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12599,"byte_end":12604,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"reset","qualname":"<Gauge>::reset","value":"pub fn reset(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12578,"byte_end":12587,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13967,"byte_end":13971,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13292,"byte_end":13345,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13346,"byte_end":13349,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13350,"byte_end":13406,"line_start":19,"line_end":19,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13407,"byte_end":13410,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13411,"byte_end":13424,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ In this example, [`Heatmap`] does not have a const `new` function so it","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13425,"byte_end":13500,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ must be constructed using [`Lazy`].","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13501,"byte_end":13540,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13541,"byte_end":13548,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"heatmap\")]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13549,"byte_end":13582,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/ # fn main() {","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13583,"byte_end":13600,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/ # use rustcommon_metrics_v2::*;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13601,"byte_end":13636,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/ #[metric]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13637,"byte_end":13650,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ static HEATMAP: Lazy<Heatmap> = Lazy::new(|| Heatmap::new(","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13651,"byte_end":13713,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/     100,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13714,"byte_end":13726,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/     2,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13727,"byte_end":13737,"line_start":31,"line_end":31,"column_start":1,"column_end":11}},{"value":"/     Duration::<Nanoseconds<u64>>::from_secs(30),","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13738,"byte_end":13790,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/     Duration::<Nanoseconds<u64>>::from_secs(1),","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13791,"byte_end":13842,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/ ));","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13843,"byte_end":13850,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13851,"byte_end":13858,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"heatmap\"))] fn main() {}","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13859,"byte_end":13910,"line_start":36,"line_end":36,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13911,"byte_end":13918,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13919,"byte_end":13922,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Heatmap`]: crate::Heatmap;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":13923,"byte_end":13955,"line_start":39,"line_end":39,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14228,"byte_end":14231,"line_start":49,"line_end":49,"column_start":18,"column_end":21},"name":"new","qualname":"<Lazy<T, F>>::new","value":"pub const fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new lazy value with the given initializing function.\n","sig":null,"attributes":[{"value":"/ Create a new lazy value with the given initializing function.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14145,"byte_end":14210,"line_start":48,"line_end":48,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14469,"byte_end":14472,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"get","qualname":"<Lazy<T, F>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" If this lazy has been initialized, then return a reference to the\n contained value.\n","sig":null,"attributes":[{"value":"/ If this lazy has been initialized, then return a reference to the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14363,"byte_end":14432,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ contained value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14437,"byte_end":14457,"line_start":57,"line_end":57,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14643,"byte_end":14650,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" If this lazy has been initialized, then return a reference to the\n contained value.\n","sig":null,"attributes":[{"value":"/ If this lazy has been initialized, then return a reference to the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14537,"byte_end":14606,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/ contained value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14611,"byte_end":14631,"line_start":63,"line_end":63,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14909,"byte_end":14914,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"force","qualname":"<Lazy<T, F>>::force","value":"pub fn force(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Force the evaluation of this lazy value and return a reference to\n the result. This is equivalent to the `Deref` impl.\n","sig":null,"attributes":[{"value":"/ Force the evaluation of this lazy value and return a reference to","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14768,"byte_end":14837,"line_start":70,"line_end":70,"column_start":5,"column_end":74}},{"value":"/ the result. This is equivalent to the `Deref` impl.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14842,"byte_end":14897,"line_start":71,"line_end":71,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":117},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16314,"byte_end":16321,"line_start":124,"line_end":124,"column_start":12,"column_end":19},"name":"Relaxed","qualname":"::lazy::Relaxed","value":"Relaxed {  }","parent":null,"children":[{"krate":0,"index":120}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16011,"byte_end":16064,"line_start":119,"line_end":119,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16065,"byte_end":16068,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ The difference between [`Relaxed`] type and [`Lazy`], however, is that it is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16069,"byte_end":16149,"line_start":121,"line_end":121,"column_start":1,"column_end":81}},{"value":"/ also initialized if accessed via the global metrics array. This means that","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16150,"byte_end":16228,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it will always show up in exported metrics whereas [`Lazy`] will not.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16229,"byte_end":16302,"line_start":123,"line_end":123,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16481,"byte_end":16484,"line_start":130,"line_end":130,"column_start":18,"column_end":21},"name":"new","qualname":"<Relaxed<T, F>>::new","value":"pub const fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new lazy value with the given initializing function.\n","sig":null,"attributes":[{"value":"/ Create a new lazy value with the given initializing function.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16398,"byte_end":16463,"line_start":129,"line_end":129,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16681,"byte_end":16684,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"get","qualname":"<Relaxed<T, F>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" If this cell has been initialized, then return a reference to the\n contained value.\n","sig":null,"attributes":[{"value":"/ If this cell has been initialized, then return a reference to the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16575,"byte_end":16644,"line_start":136,"line_end":136,"column_start":5,"column_end":74}},{"value":"/ contained value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16649,"byte_end":16669,"line_start":137,"line_end":137,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16861,"byte_end":16868,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Relaxed<T, F>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" If this cell has been initialized, then return a reference to the\n contained value.\n","sig":null,"attributes":[{"value":"/ If this cell has been initialized, then return a reference to the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16755,"byte_end":16824,"line_start":142,"line_end":142,"column_start":5,"column_end":74}},{"value":"/ contained value.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16829,"byte_end":16849,"line_start":143,"line_end":143,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17140,"byte_end":17145,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"name":"force","qualname":"<Relaxed<T, F>>::force","value":"pub fn force(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Force the evaluation of this lazy value and return a reference to\n the result. This is equivalent to the `Deref` impl.\n","sig":null,"attributes":[{"value":"/ Force the evaluation of this lazy value and return a reference to","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16999,"byte_end":17068,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/ the result. This is equivalent to the `Deref` impl.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17073,"byte_end":17128,"line_start":151,"line_end":151,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":158},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","byte_start":18182,"byte_end":18189,"line_start":9,"line_end":9,"column_start":10,"column_end":17},"name":"Heatmap","qualname":"::heatmap::Heatmap","value":"AtomicHeatmap<u64, AtomicU64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":164},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dynmetrics","qualname":"::dynmetrics","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":210},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":232}],"decl_id":null,"docs":" Methods and structs for working with dynamically created and destroyed\n metrics.","sig":null,"attributes":[{"value":"/ Methods and structs for working with dynamically created and destroyed","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":18544,"byte_end":18618,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ metrics.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":18619,"byte_end":18631,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":18632,"byte_end":18635,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Generally users should not need to use anything in this module with the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":18636,"byte_end":18711,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ exception of [`DynPinnedMetric`] and [`DynBoxedMetric`].","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":18712,"byte_end":18772,"line_start":9,"line_end":9,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20050,"byte_end":20058,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"register","qualname":"::dynmetrics::register","value":"pub fn register(MetricEntry)","parent":null,"children":[],"decl_id":null,"docs":" Registers a new dynamic metric entry.","sig":null,"attributes":[{"value":"/ Registers a new dynamic metric entry.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19738,"byte_end":19779,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19780,"byte_end":19783,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ The [`MetricEntry`] instance will be kept until an [`unregister`] call is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19784,"byte_end":19861,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ made with a metric pointer that matches the one within the [`MetricEntry`].","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19862,"byte_end":19941,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/ When using this take care to note how it interacts with [`MetricEntry`]'s","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19942,"byte_end":20019,"line_start":56,"line_end":56,"column_start":1,"column_end":78}},{"value":"/ safety guarantees.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20020,"byte_end":20042,"line_start":57,"line_end":57,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20345,"byte_end":20355,"line_start":67,"line_end":67,"column_start":8,"column_end":18},"name":"unregister","qualname":"::dynmetrics::unregister","value":"pub fn unregister(*const dyn Metric)","parent":null,"children":[],"decl_id":null,"docs":" Unregisters all dynamic entries added via [`register`] that point to the\n same address as `metric`.","sig":null,"attributes":[{"value":"/ Unregisters all dynamic entries added via [`register`] that point to the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20122,"byte_end":20198,"line_start":62,"line_end":62,"column_start":1,"column_end":77}},{"value":"/ same address as `metric`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20199,"byte_end":20228,"line_start":63,"line_end":63,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20229,"byte_end":20232,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ This function may remove multiple entries if the same metric has been","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20233,"byte_end":20306,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/ registered multiple times.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20307,"byte_end":20337,"line_start":66,"line_end":66,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":206},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21647,"byte_end":21662,"line_start":97,"line_end":97,"column_start":12,"column_end":27},"name":"DynPinnedMetric","qualname":"::dynmetrics::DynPinnedMetric","value":"DynPinnedMetric {  }","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" A dynamic metric that stores the metric inline.","sig":null,"attributes":[{"value":"/ A dynamic metric that stores the metric inline.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20429,"byte_end":20480,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20481,"byte_end":20484,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This is a dynamic metric that relies on pinning guarantees to ensure that","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20485,"byte_end":20562,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ the stored metric can be safely accessed from other threads looking through","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20563,"byte_end":20642,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/ the global dynamic metrics registry. As it requires pinning, it is somewhat","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20643,"byte_end":20722,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ unweildy to use. Most use cases can probably use [`DynBoxedMetric`] instead.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20723,"byte_end":20803,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20804,"byte_end":20807,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ To use this, first create the `DynPinnedMetric` and then, once it is pinned,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20808,"byte_end":20888,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ call [`register`] any number of times with all of the names the metric","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20889,"byte_end":20963,"line_start":79,"line_end":79,"column_start":1,"column_end":75}},{"value":"/ should be registered under. When the `DynPinnedMetric` instance is dropped","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":20964,"byte_end":21042,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ it will unregister all the metric entries added via [`register`].","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21043,"byte_end":21112,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21113,"byte_end":21116,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21117,"byte_end":21130,"line_start":83,"line_end":83,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21131,"byte_end":21138,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ # use rustcommon_metrics_v2::*;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21139,"byte_end":21174,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/ # use std::pin::Pin;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21175,"byte_end":21199,"line_start":86,"line_end":86,"column_start":1,"column_end":25}},{"value":"/ let my_dyn_metric = DynPinnedMetric::new(Counter::new());","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21200,"byte_end":21261,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ // Normally you would use some utility to do this. (e.g. pin-utils)","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21262,"byte_end":21333,"line_start":88,"line_end":88,"column_start":1,"column_end":72}},{"value":"/ let my_dyn_metric = unsafe { Pin::new_unchecked(&my_dyn_metric) };","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21334,"byte_end":21404,"line_start":89,"line_end":89,"column_start":1,"column_end":71}},{"value":"/ my_dyn_metric.register(\"a.dynamic.counter\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21405,"byte_end":21453,"line_start":90,"line_end":90,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21454,"byte_end":21457,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ let metrics = metrics();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21458,"byte_end":21486,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(metrics.dynamic_metrics()[0].name(), \"a.dynamic.counter\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21487,"byte_end":21560,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21561,"byte_end":21568,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21569,"byte_end":21572,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ [`register`]: crate::dynmetrics::DynPinnedMetric::register","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21573,"byte_end":21635,"line_start":96,"line_end":96,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22102,"byte_end":22105,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<DynPinnedMetric<M>>::new","value":"pub fn new(M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DynPinnedMetric` with the provided internal metric.","sig":null,"attributes":[{"value":"/ Create a new `DynPinnedMetric` with the provided internal metric.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21878,"byte_end":21947,"line_start":105,"line_end":105,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21952,"byte_end":21955,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This does not register the metric. To do that call [`register`].","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21960,"byte_end":22028,"line_start":107,"line_end":107,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22033,"byte_end":22036,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`register`]: self::DynPinnedMetric::register","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22041,"byte_end":22090,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22456,"byte_end":22464,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"register","qualname":"<DynPinnedMetric<M>>::register","value":"pub fn register<impl Into<Cow<'static, str>>: Into<Cow>>(Pin<&Self>,\n                                                         impl Into<Cow<'static, str>>)","parent":null,"children":[],"decl_id":null,"docs":" Register this metric in the global list of dynamic metrics with `name`.","sig":null,"attributes":[{"value":"/ Register this metric in the global list of dynamic metrics with `name`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22219,"byte_end":22294,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22299,"byte_end":22302,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Calling this multiple times will result in the same metric being","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22307,"byte_end":22375,"line_start":119,"line_end":119,"column_start":5,"column_end":73}},{"value":"/ registered multiple times under potentially different names.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":22380,"byte_end":22444,"line_start":120,"line_end":120,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24467,"byte_end":24481,"line_start":172,"line_end":172,"column_start":12,"column_end":26},"name":"DynBoxedMetric","qualname":"::dynmetrics::DynBoxedMetric","value":"DynBoxedMetric {  }","parent":null,"children":[{"krate":0,"index":224}],"decl_id":null,"docs":" A dynamic metric that stores the metric instance on the heap.","sig":null,"attributes":[{"value":"/ A dynamic metric that stores the metric instance on the heap.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23880,"byte_end":23945,"line_start":157,"line_end":157,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23946,"byte_end":23949,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This avoids a lot of the hangup with [`DynPinnedMetric`] as it allows for","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23950,"byte_end":24027,"line_start":159,"line_end":159,"column_start":1,"column_end":78}},{"value":"/ moving the `DynBoxedMetric` without having to worry about pinning or safety","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24028,"byte_end":24107,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ issues. However, this comes at the expense of requiring a heap allocation","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24108,"byte_end":24185,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/ for the metric.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24186,"byte_end":24205,"line_start":162,"line_end":162,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24206,"byte_end":24209,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24210,"byte_end":24223,"line_start":164,"line_end":164,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24224,"byte_end":24231,"line_start":165,"line_end":165,"column_start":1,"column_end":8}},{"value":"/ # use rustcommon_metrics_v2::*;","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24232,"byte_end":24267,"line_start":166,"line_end":166,"column_start":1,"column_end":36}},{"value":"/ let my_gauge = DynBoxedMetric::new(Gauge::new(), \"my.dynamic.gauge\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24268,"byte_end":24341,"line_start":167,"line_end":167,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24342,"byte_end":24345,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ let metrics = metrics();","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24346,"byte_end":24374,"line_start":169,"line_end":169,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(metrics.dynamic_metrics()[0].name(), \"my.dynamic.gauge\");","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24375,"byte_end":24447,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24448,"byte_end":24455,"line_start":171,"line_end":171,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24688,"byte_end":24691,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<DynBoxedMetric<M>>::new","value":"pub fn new<impl Into<Cow<'static, str>>: Into<Cow>>(M,\n                                                    impl Into<Cow<'static, str>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new dynamic metric using the provided metric type with the\n provided `name`.\n","sig":null,"attributes":[{"value":"/ Create a new dynamic metric using the provided metric type with the","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24580,"byte_end":24651,"line_start":177,"line_end":177,"column_start":5,"column_end":76}},{"value":"/ provided `name`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24656,"byte_end":24676,"line_start":178,"line_end":178,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24923,"byte_end":24935,"line_start":186,"line_end":186,"column_start":12,"column_end":24},"name":"unregistered","qualname":"<DynBoxedMetric<M>>::unregistered","value":"pub fn unregistered(M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new dynamic metric without registering it.\n","sig":null,"attributes":[{"value":"/ Create a new dynamic metric without registering it.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24856,"byte_end":24911,"line_start":185,"line_end":185,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25290,"byte_end":25298,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"register","qualname":"<DynBoxedMetric<M>>::register","value":"pub fn register<impl Into<Cow<'static, str>>: Into<Cow>>(&Self,\n                                                         impl Into<Cow<'static, str>>)","parent":null,"children":[],"decl_id":null,"docs":" Register this metric in the global list of dynamic metrics with `name`.","sig":null,"attributes":[{"value":"/ Register this metric in the global list of dynamic metrics with `name`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25053,"byte_end":25128,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25133,"byte_end":25136,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Calling this multiple times will result in the same metric being","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25141,"byte_end":25209,"line_start":194,"line_end":194,"column_start":5,"column_end":73}},{"value":"/ registered multiple times under potentially different names.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25214,"byte_end":25278,"line_start":195,"line_end":195,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":263},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3065,"byte_end":3071,"line_start":97,"line_end":97,"column_start":9,"column_end":15},"name":"export","qualname":"::export","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":351},{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":334},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3152,"byte_end":3159,"line_start":101,"line_end":101,"column_start":16,"column_end":23},"name":"METRICS","qualname":"::export::METRICS","value":"::linkme::DistributedSlice<[crate::MetricEntry]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":265},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3309,"byte_end":3315,"line_start":107,"line_end":107,"column_start":11,"column_end":17},"name":"Metric","qualname":"::Metric","value":"Metric: Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Global interface to a metric.","sig":null,"attributes":[{"value":"/ Global interface to a metric.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3193,"byte_end":3226,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3227,"byte_end":3230,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Most use of metrics should use the directly declared constants.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3231,"byte_end":3298,"line_start":106,"line_end":106,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3520,"byte_end":3530,"line_start":112,"line_end":112,"column_start":8,"column_end":18},"name":"is_enabled","qualname":"::Metric::is_enabled","value":"pub fn is_enabled(&Self) -> bool","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Indicate whether this metric has been set up.","sig":null,"attributes":[{"value":"/ Indicate whether this metric has been set up.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3345,"byte_end":3394,"line_start":108,"line_end":108,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3399,"byte_end":3402,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Generally, if this returns `false` then the other methods on this","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3407,"byte_end":3476,"line_start":110,"line_end":110,"column_start":5,"column_end":74}},{"value":"/ trait should return `None`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3481,"byte_end":3512,"line_start":111,"line_end":111,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3761,"byte_end":3767,"line_start":120,"line_end":120,"column_start":8,"column_end":14},"name":"as_any","qualname":"::Metric::as_any","value":"pub fn as_any(&Self) -> Option<&dyn Any>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Get the current metric as an [`Any`] instance. This is meant to allow\n custom processing for known metric types.","sig":null,"attributes":[{"value":"/ Get the current metric as an [`Any`] instance. This is meant to allow","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3591,"byte_end":3664,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ custom processing for known metric types.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3669,"byte_end":3714,"line_start":117,"line_end":117,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3719,"byte_end":3722,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ [`Any`]: std::any::Any","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3727,"byte_end":3753,"line_start":119,"line_end":119,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":268},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3850,"byte_end":3861,"line_start":124,"line_end":124,"column_start":12,"column_end":23},"name":"MetricEntry","qualname":"::MetricEntry","value":"MetricEntry {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"decl_id":null,"docs":" A statically declared metric entry.\n","sig":null,"attributes":[{"value":"/ A statically declared metric entry.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3799,"byte_end":3838,"line_start":123,"line_end":123,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3978,"byte_end":3988,"line_start":131,"line_end":131,"column_start":18,"column_end":28},"name":"_new_const","qualname":"<MetricEntry>::_new_const","value":"pub const fn _new_const(MetricWrapper, &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4213,"byte_end":4216,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<MetricEntry>::new","value":"pub fn new(&'static dyn Metric, Cow) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new metric entry with the provided metric and name.\n","sig":null,"attributes":[{"value":"/ Create a new metric entry with the provided metric and name.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4137,"byte_end":4201,"line_start":138,"line_end":138,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4671,"byte_end":4684,"line_start":150,"line_end":150,"column_start":19,"column_end":32},"name":"new_unchecked","qualname":"<MetricEntry>::new_unchecked","value":"pub unsafe fn new_unchecked(*const dyn Metric, Cow) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new metric entry with the provided metric and name.","sig":null,"attributes":[{"value":"/ Create a new metric entry with the provided metric and name.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4395,"byte_end":4459,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4464,"byte_end":4467,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4472,"byte_end":4484,"line_start":146,"line_end":146,"column_start":5,"column_end":17}},{"value":"/ This method is only safe to call if","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4489,"byte_end":4528,"line_start":147,"line_end":147,"column_start":5,"column_end":44}},{"value":"/ - `metric` points to a valid `dyn Metric` instance, and,","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4533,"byte_end":4593,"line_start":148,"line_end":148,"column_start":5,"column_end":65}},{"value":"/ - the metric instance outlives this `MetricEntry`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4598,"byte_end":4652,"line_start":149,"line_end":149,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4921,"byte_end":4927,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"metric","qualname":"<MetricEntry>::metric","value":"pub fn metric(&Self) -> &dyn Metric","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the metric that this entry corresponds to.\n","sig":null,"attributes":[{"value":"/ Get a reference to the metric that this entry corresponds to.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4844,"byte_end":4909,"line_start":157,"line_end":157,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5042,"byte_end":5046,"line_start":163,"line_end":163,"column_start":12,"column_end":16},"name":"name","qualname":"<MetricEntry>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this metric.\n","sig":null,"attributes":[{"value":"/ Get the name of this metric.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":4998,"byte_end":5030,"line_start":162,"line_end":162,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5808,"byte_end":5821,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"MetricWrapper","qualname":"::MetricWrapper","value":"","parent":null,"children":[],"decl_id":null,"docs":" You can't use `dyn <trait>s` directly in const methods for now but a wrapper\n is fine. This wrapper is a work around to allow us to use const constructors\n for the MetricEntry struct.\n","sig":null,"attributes":[{"value":"/ You can't use `dyn <trait>s` directly in const methods for now but a wrapper","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5588,"byte_end":5668,"line_start":189,"line_end":189,"column_start":1,"column_end":81}},{"value":"/ is fine. This wrapper is a work around to allow us to use const constructors","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5669,"byte_end":5749,"line_start":190,"line_end":190,"column_start":1,"column_end":81}},{"value":"/ for the MetricEntry struct.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5750,"byte_end":5781,"line_start":191,"line_end":191,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":286},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5822,"byte_end":5843,"line_start":193,"line_end":193,"column_start":26,"column_end":47},"name":"0","qualname":"::MetricWrapper::0","value":"*const (dyn Metric + 'static)","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6112,"byte_end":6119,"line_start":200,"line_end":200,"column_start":8,"column_end":15},"name":"metrics","qualname":"::metrics","value":"pub fn metrics() -> Metrics","parent":null,"children":[],"decl_id":null,"docs":" The list of all metrics registered via the either [`metric`] attribute or by\n using the types within the [`dynmetrics`] module.","sig":null,"attributes":[{"value":"/ The list of all metrics registered via the either [`metric`] attribute or by","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5847,"byte_end":5927,"line_start":195,"line_end":195,"column_start":1,"column_end":81}},{"value":"/ using the types within the [`dynmetrics`] module.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5928,"byte_end":5981,"line_start":196,"line_end":196,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5982,"byte_end":5985,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ Names within metrics are not guaranteed to be unique and no aggregation of","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5986,"byte_end":6064,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/ metrics with the same name is done.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6065,"byte_end":6104,"line_start":199,"line_end":199,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6809,"byte_end":6816,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"Metrics","qualname":"::Metrics","value":"Metrics {  }","parent":null,"children":[{"krate":0,"index":289}],"decl_id":null,"docs":" Provides access to all registered metrics both static and dynamic.","sig":null,"attributes":[{"value":"/ Provides access to all registered metrics both static and dynamic.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6214,"byte_end":6284,"line_start":206,"line_end":206,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6285,"byte_end":6288,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ **IMPORTANT:** Note that while any instance of this struct is live","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6289,"byte_end":6359,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/ attempting to register or unregister any dynamic metrics will block.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6360,"byte_end":6432,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ If this is done on the same thread as is currently working with an instance","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6433,"byte_end":6512,"line_start":210,"line_end":210,"column_start":1,"column_end":80}},{"value":"/ of `Metrics` then it will cause a deadlock. If your application will be","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6513,"byte_end":6588,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ registering and unregistering dynamic metrics then you should avoid holding","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6589,"byte_end":6668,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ on to `Metrics` instances for long periods of time.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6669,"byte_end":6724,"line_start":213,"line_end":213,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6725,"byte_end":6728,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ `Metrics` instances can be created via the [`metrics`] function.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6729,"byte_end":6797,"line_start":215,"line_end":215,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7026,"byte_end":7040,"line_start":223,"line_end":223,"column_start":12,"column_end":26},"name":"static_metrics","qualname":"<Metrics>::static_metrics","value":"pub fn static_metrics(&Self) -> &'static [MetricEntry]","parent":null,"children":[],"decl_id":null,"docs":" A list containing all metrics that were registered via the [`metric`]\n attribute macro.\n","sig":null,"attributes":[{"value":"/ A list containing all metrics that were registered via the [`metric`]","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6916,"byte_end":6989,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ attribute macro.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6994,"byte_end":7014,"line_start":222,"line_end":222,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7199,"byte_end":7214,"line_start":228,"line_end":228,"column_start":12,"column_end":27},"name":"dynamic_metrics","qualname":"<Metrics>::dynamic_metrics","value":"pub fn dynamic_metrics(&Self) -> &[MetricEntry]","parent":null,"children":[],"decl_id":null,"docs":" A list containing all metrics that were dynamically registered.\n","sig":null,"attributes":[{"value":"/ A list containing all metrics that were dynamically registered.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7120,"byte_end":7187,"line_start":227,"line_end":227,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7295,"byte_end":7299,"line_start":232,"line_end":232,"column_start":12,"column_end":16},"name":"iter","qualname":"<Metrics>::iter","value":"pub fn iter(&Self) -> <&Self as IntoIterator>::IntoIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":299},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7876,"byte_end":7890,"line_start":254,"line_end":254,"column_start":12,"column_end":26},"name":"MetricInstance","qualname":"::MetricInstance","value":"MetricInstance { metric }","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"decl_id":null,"docs":" The type of the static generated by `#[metric]`.","sig":null,"attributes":[{"value":"/ The type of the static generated by `#[metric]`.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7723,"byte_end":7775,"line_start":250,"line_end":250,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7776,"byte_end":7779,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ This exports the name of the generated metric so that other code","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7780,"byte_end":7848,"line_start":252,"line_end":252,"column_start":1,"column_end":69}},{"value":"/ can use it.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":7849,"byte_end":7864,"line_start":253,"line_end":253,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":301},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8039,"byte_end":8045,"line_start":258,"line_end":258,"column_start":9,"column_end":15},"name":"metric","qualname":"::MetricInstance::metric","value":"M","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8141,"byte_end":8144,"line_start":264,"line_end":264,"column_start":18,"column_end":21},"name":"new","qualname":"<MetricInstance<M>>::new","value":"pub const fn new(M, &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8277,"byte_end":8281,"line_start":269,"line_end":269,"column_start":18,"column_end":22},"name":"name","qualname":"<MetricInstance<M>>::name","value":"pub const fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this metric.\n","sig":null,"attributes":[{"value":"/ Get the name of this metric.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8227,"byte_end":8259,"line_start":268,"line_end":268,"column_start":5,"column_end":37}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9640,"byte_end":9647,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10391,"byte_end":10398,"line_start":67,"line_end":67,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11292,"byte_end":11297,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12666,"byte_end":12671,"line_start":90,"line_end":90,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14078,"byte_end":14082,"line_start":45,"line_end":45,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14128,"byte_end":14132,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14751,"byte_end":14755,"line_start":69,"line_end":69,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15211,"byte_end":15215,"line_start":84,"line_end":84,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15359,"byte_end":15363,"line_start":92,"line_end":92,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15550,"byte_end":15554,"line_start":99,"line_end":99,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15750,"byte_end":15754,"line_start":106,"line_end":106,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16378,"byte_end":16385,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16979,"byte_end":16986,"line_start":149,"line_end":149,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17244,"byte_end":17251,"line_start":157,"line_end":157,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17395,"byte_end":17402,"line_start":165,"line_end":165,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17599,"byte_end":17606,"line_start":172,"line_end":172,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17778,"byte_end":17785,"line_start":179,"line_end":179,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","byte_start":18246,"byte_end":18259,"line_start":11,"line_end":11,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19100,"byte_end":19118,"line_start":25,"line_end":25,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21853,"byte_end":21868,"line_start":104,"line_end":104,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23559,"byte_end":23574,"line_start":141,"line_end":141,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23754,"byte_end":23769,"line_start":148,"line_end":148,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24556,"byte_end":24570,"line_start":176,"line_end":176,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25430,"byte_end":25444,"line_start":201,"line_end":201,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3928,"byte_end":3939,"line_start":129,"line_end":129,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5114,"byte_end":5125,"line_start":168,"line_end":168,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5150,"byte_end":5161,"line_start":169,"line_end":169,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5191,"byte_end":5202,"line_start":171,"line_end":171,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5345,"byte_end":5356,"line_start":180,"line_end":180,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6902,"byte_end":6909,"line_start":220,"line_end":220,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8085,"byte_end":8099,"line_start":262,"line_end":262,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8362,"byte_end":8376,"line_start":274,"line_end":274,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8518,"byte_end":8532,"line_start":283,"line_end":283,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8658,"byte_end":8672,"line_start":290,"line_end":290,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8772,"byte_end":8786,"line_start":297,"line_end":297,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":2731,"byte_end":2741,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":164}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":9640,"byte_end":9647,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/counter.rs","byte_start":10391,"byte_end":10398,"line_start":67,"line_end":67,"column_start":17,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":320},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":11292,"byte_end":11297,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/gauge.rs","byte_start":12666,"byte_end":12671,"line_start":90,"line_end":90,"column_start":17,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":327},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14078,"byte_end":14082,"line_start":45,"line_end":45,"column_start":34,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":3028}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14128,"byte_end":14132,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":14751,"byte_end":14755,"line_start":69,"line_end":69,"column_start":27,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15211,"byte_end":15215,"line_start":84,"line_end":84,"column_start":37,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15359,"byte_end":15363,"line_start":92,"line_end":92,"column_start":40,"column_end":44},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15550,"byte_end":15554,"line_start":99,"line_end":99,"column_start":30,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":15750,"byte_end":15754,"line_start":106,"line_end":106,"column_start":47,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":79},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16378,"byte_end":16385,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":16979,"byte_end":16986,"line_start":149,"line_end":149,"column_start":27,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17244,"byte_end":17251,"line_start":157,"line_end":157,"column_start":37,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17395,"byte_end":17402,"line_start":165,"line_end":165,"column_start":40,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17599,"byte_end":17606,"line_start":172,"line_end":172,"column_start":30,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lazy.rs","byte_start":17778,"byte_end":17785,"line_start":179,"line_end":179,"column_start":23,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":117},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/heatmap.rs","byte_start":18246,"byte_end":18259,"line_start":11,"line_end":11,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":34,"index":47},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":19100,"byte_end":19118,"line_start":25,"line_end":25,"column_start":6,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":21853,"byte_end":21868,"line_start":104,"line_end":104,"column_start":17,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23559,"byte_end":23574,"line_start":141,"line_end":141,"column_start":26,"column_end":41},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":206},"to":{"krate":2,"index":3251}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":23754,"byte_end":23769,"line_start":148,"line_end":148,"column_start":27,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":206},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":24556,"byte_end":24570,"line_start":176,"line_end":176,"column_start":17,"column_end":31},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/dynmetrics.rs","byte_start":25430,"byte_end":25444,"line_start":201,"line_end":201,"column_start":27,"column_end":41},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3317,"byte_end":3321,"line_start":107,"line_end":107,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3324,"byte_end":3328,"line_start":107,"line_end":107,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3028},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":3928,"byte_end":3939,"line_start":129,"line_end":129,"column_start":6,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5114,"byte_end":5125,"line_start":168,"line_end":168,"column_start":22,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5150,"byte_end":5161,"line_start":169,"line_end":169,"column_start":22,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":3028}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5191,"byte_end":5202,"line_start":171,"line_end":171,"column_start":26,"column_end":37},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":5345,"byte_end":5356,"line_start":180,"line_end":180,"column_start":26,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":9394}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":6902,"byte_end":6909,"line_start":220,"line_end":220,"column_start":6,"column_end":13},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8085,"byte_end":8099,"line_start":262,"line_end":262,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8362,"byte_end":8376,"line_start":274,"line_end":274,"column_start":29,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":299},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8518,"byte_end":8532,"line_start":283,"line_end":283,"column_start":32,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":299},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8658,"byte_end":8672,"line_start":290,"line_end":290,"column_start":22,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":299},"to":{"krate":2,"index":2913}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/metrics-v2/src/lib.rs","byte_start":8772,"byte_end":8786,"line_start":297,"line_end":297,"column_start":22,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":299},"to":{"krate":2,"index":2916}}]}