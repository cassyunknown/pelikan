{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram","program":"/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rustcommon_histogram","--edition=2018","/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a783eac3636d34ea","-C","extra-filename=-a783eac3636d34ea","--out-dir","/home/users/u6632448/pelikan/src/rust/server/segcache/target/rls/debug/deps","-L","dependency=/home/users/u6632448/pelikan/src/rust/server/segcache/target/rls/debug/deps","--extern","rustcommon_atomics=/home/users/u6632448/pelikan/src/rust/server/segcache/target/rls/debug/deps/librustcommon_atomics-2cf07671a161121e.rmeta","--extern","thiserror=/home/users/u6632448/pelikan/src/rust/server/segcache/target/rls/debug/deps/libthiserror-d70d1237f3d70aa1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/users/u6632448/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/users/u6632448/pelikan/src/rust/server/segcache/target/rls/debug/deps/librustcommon_histogram-a783eac3636d34ea.rmeta"},"prelude":{"crate_id":{"name":"rustcommon_histogram","disambiguator":[14454132592201004170,0]},"crate_root":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src","external_crates":[{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[292688086858374235,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6438385474535706924,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13729837066422225192,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5402880783377335769,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6315666440082044202,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8715266272784128359,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2088041259338434830,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3489163311945967218,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[751421253572859800,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13041685254533870257,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[502015445408459368,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6198952210139392550,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[14184030540380960994,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[18399346483724303225,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15511893313068785759,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13348528473392455417,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[12356376325519007124,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[7246437135573011264,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12319769989328939461,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","num":20,"id":{"name":"thiserror","disambiguator":[16601044202837962271,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","num":21,"id":{"name":"thiserror_impl","disambiguator":[11133581725456035366,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","num":22,"id":{"name":"rustcommon_atomics","disambiguator":[13652914234955865356,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","num":23,"id":{"name":"serde","disambiguator":[7842269062938565931,0]}},{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","num":24,"id":{"name":"serde_derive","disambiguator":[3744398221271993889,0]}}],"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":129,"byte_end":974,"line_start":5,"line_end":37,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":212,"byte_end":213,"line_start":11,"line_end":11,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"Bucket","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":232,"byte_end":233,"line_start":12,"line_end":12,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"AtomicCounter, Counter","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":250,"byte_end":251,"line_start":13,"line_end":13,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"HistogramError","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":273,"byte_end":274,"line_start":14,"line_end":14,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"Histogram","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":294,"byte_end":295,"line_start":15,"line_end":15,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Indexing","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":27},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":327,"byte_end":333,"line_start":17,"line_end":17,"column_start":30,"column_end":36},"alias_span":null,"name":"Atomic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1089},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":335,"byte_end":344,"line_start":17,"line_end":17,"column_start":38,"column_end":47},"alias_span":null,"name":"AtomicU16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1118},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":346,"byte_end":355,"line_start":17,"line_end":17,"column_start":49,"column_end":58},"alias_span":null,"name":"AtomicU32","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1147},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":357,"byte_end":366,"line_start":17,"line_end":17,"column_start":60,"column_end":69},"alias_span":null,"name":"AtomicU64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1060},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":368,"byte_end":376,"line_start":17,"line_end":17,"column_start":71,"column_end":79},"alias_span":null,"name":"AtomicU8","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","byte_start":129,"byte_end":974,"line_start":5,"line_end":37,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":21},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":179},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1190,"byte_end":1196,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::bucket::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13}],"decl_id":null,"docs":" A bucket stores a count across a range of values\n","sig":null,"attributes":[{"value":"/ A bucket stores a count across a range of values","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1126,"byte_end":1178,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1514,"byte_end":1517,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"min","qualname":"<Bucket<Value, Count>>::min","value":"pub fn min(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value storable in the `Bucket`\n","sig":null,"attributes":[{"value":"/ Return the minimum value storable in the `Bucket`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1449,"byte_end":1502,"line_start":20,"line_end":20,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1621,"byte_end":1626,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"value","qualname":"<Bucket<Value, Count>>::value","value":"pub fn value(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Return the nominal value for the `Bucket`\n","sig":null,"attributes":[{"value":"/ Return the nominal value for the `Bucket`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1564,"byte_end":1609,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1745,"byte_end":1750,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"count","qualname":"<Bucket<Value, Count>>::count","value":"pub fn count(&Self) -> Count","parent":null,"children":[],"decl_id":null,"docs":" Return the count of values recorded into this `Bucket`\n","sig":null,"attributes":[{"value":"/ Return the count of values recorded into this `Bucket`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1675,"byte_end":1733,"line_start":30,"line_end":30,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1868,"byte_end":1873,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"width","qualname":"<Bucket<Value, Count>>::width","value":"pub fn width(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Returns the range of values storable in this `Bucket`\n","sig":null,"attributes":[{"value":"/ Returns the range of values storable in this `Bucket`","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1799,"byte_end":1856,"line_start":35,"line_end":35,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2171,"byte_end":2184,"line_start":7,"line_end":7,"column_start":11,"column_end":24},"name":"AtomicCounter","qualname":"::counter::AtomicCounter","value":"AtomicCounter: rustcommon_atomics::Atomic + rustcommon_atomics::Unsigned +\nrustcommon_atomics::SaturatingArithmetic + Default","parent":null,"children":[],"decl_id":null,"docs":" A trait which is used to restrict the types that may be used to store counts\n for atomic types.\n","sig":null,"attributes":[{"value":"/ A trait which is used to restrict the types that may be used to store counts","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2058,"byte_end":2138,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/ for atomic types.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2139,"byte_end":2160,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2717,"byte_end":2724,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Counter","qualname":"::counter::Counter","value":"Counter: Default + Copy","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" A trait which is used to restrict the types that may be used to store counts\n for non-atomic types.\n","sig":null,"attributes":[{"value":"/ A trait which is used to restrict the types that may be used to store counts","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2600,"byte_end":2680,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ for non-atomic types.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2681,"byte_end":2706,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2750,"byte_end":2764,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::counter::Counter::saturating_add","value":"pub fn saturating_add(&mut Self, Self)","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2797,"byte_end":2811,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::counter::Counter::saturating_sub","value":"pub fn saturating_sub(&mut Self, Self)","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":253},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4418,"byte_end":4423,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Empty","qualname":"::error::HistogramError::Empty","value":"HistogramError::Empty","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" The histogram contains no samples.\n","sig":null,"attributes":[{"value":"error(\"histogram contains no samples\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4329,"byte_end":4370,"line_start":10,"line_end":10,"column_start":5,"column_end":46}},{"value":"/ The histogram contains no samples.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4375,"byte_end":4413,"line_start":11,"line_end":11,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4544,"byte_end":4561,"line_start":15,"line_end":15,"column_start":5,"column_end":22},"name":"InvalidPercentile","qualname":"::error::HistogramError::InvalidPercentile","value":"HistogramError::InvalidPercentile","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" The provided percentile is outside of the range 0.0 - 100.0 (inclusive)\n","sig":null,"attributes":[{"value":"error(\"invalid percentile\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4429,"byte_end":4459,"line_start":13,"line_end":13,"column_start":5,"column_end":35}},{"value":"/ The provided percentile is outside of the range 0.0 - 100.0 (inclusive)","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4464,"byte_end":4539,"line_start":14,"line_end":14,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":257},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4647,"byte_end":4657,"line_start":18,"line_end":18,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::error::HistogramError::OutOfRange","value":"HistogramError::OutOfRange","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" The requested value is out of range.\n","sig":null,"attributes":[{"value":"error(\"value out of range\")","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4567,"byte_end":4597,"line_start":16,"line_end":16,"column_start":5,"column_end":35}},{"value":"/ The requested value is out of range.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4602,"byte_end":4642,"line_start":17,"line_end":17,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":244},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4308,"byte_end":4322,"line_start":9,"line_end":9,"column_start":10,"column_end":24},"name":"HistogramError","qualname":"::error::HistogramError","value":"pub enum HistogramError { Empty, InvalidPercentile, OutOfRange, }","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":257}],"decl_id":null,"docs":" Possible errors returned by operations on a histogram.\n","sig":null,"attributes":[{"value":"/ Possible errors returned by operations on a histogram.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/error/mod.rs","byte_start":4205,"byte_end":4263,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5337,"byte_end":5352,"line_start":13,"line_end":13,"column_start":12,"column_end":27},"name":"AtomicHistogram","qualname":"::histograms::atomic::AtomicHistogram","value":"AtomicHistogram {  }","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" A histogram type which may be concurrently modified across threads because\n it uses atomic counters. All operations are performed using a relaxed\n ordering.\n","sig":null,"attributes":[{"value":"/ A histogram type which may be concurrently modified across threads because","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5159,"byte_end":5237,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ it uses atomic counters. All operations are performed using a relaxed","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5238,"byte_end":5311,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ ordering.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5312,"byte_end":5325,"line_start":12,"line_end":12,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5848,"byte_end":5851,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicHistogram<Value, Count>>::new","value":"pub fn new(Value, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new atomic histogram. Stores values from 0 to max. Precision\n is used to specify how many significant figures will be preserved.\n","sig":null,"attributes":[{"value":"/ Create a new atomic histogram. Stores values from 0 to max. Precision","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5688,"byte_end":5761,"line_start":28,"line_end":28,"column_start":5,"column_end":78}},{"value":"/ is used to specify how many significant figures will be preserved.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5766,"byte_end":5836,"line_start":29,"line_end":29,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":6623,"byte_end":6630,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"buckets","qualname":"<AtomicHistogram<Value, Count>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of buckets stored within this histogram.\n","sig":null,"attributes":[{"value":"/ Return the number of buckets stored within this histogram.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":6549,"byte_end":6611,"line_start":54,"line_end":54,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":6788,"byte_end":6797,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"increment","qualname":"<AtomicHistogram<Value, Count>>::increment","value":"pub fn increment(&Self, Value, <Count as Atomic>::Primitive)","parent":null,"children":[],"decl_id":null,"docs":" Increment the value by the provided count, may saturate the bucket's\n counter.\n","sig":null,"attributes":[{"value":"/ Increment the value by the provided count, may saturate the bucket's","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":6687,"byte_end":6759,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ counter.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":6764,"byte_end":6776,"line_start":60,"line_end":60,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7221,"byte_end":7230,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"decrement","qualname":"<AtomicHistogram<Value, Count>>::decrement","value":"pub fn decrement(&Self, Value, <Count as Atomic>::Primitive)","parent":null,"children":[],"decl_id":null,"docs":" Decrement the value by the provided count, may saturate at zero.\n","sig":null,"attributes":[{"value":"/ Decrement the value by the provided count, may saturate at zero.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7141,"byte_end":7209,"line_start":69,"line_end":69,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7607,"byte_end":7612,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"clear","qualname":"<AtomicHistogram<Value, Count>>::clear","value":"pub fn clear(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all counts.\n","sig":null,"attributes":[{"value":"/ Clear all counts.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7574,"byte_end":7595,"line_start":78,"line_end":78,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":8096,"byte_end":8106,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"percentile","qualname":"<AtomicHistogram<Value, Count>>::percentile","value":"pub fn percentile(&Self, f64) -> Result<Value, HistogramError>","parent":null,"children":[],"decl_id":null,"docs":" Return the value closest to the specified percentile. Returns an error\n if the value is outside of the histogram range or if the histogram is\n empty. Percentile must be within the range 0.0 to 100.0\n","sig":null,"attributes":[{"value":"/ Return the value closest to the specified percentile. Returns an error","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7868,"byte_end":7942,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/ if the value is outside of the histogram range or if the histogram is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":7947,"byte_end":8020,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ empty. Percentile must be within the range 0.0 to 100.0","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":8025,"byte_end":8084,"line_start":89,"line_end":89,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10900,"byte_end":10910,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"sub_assign","qualname":"<AtomicHistogram<Value, Count>>::sub_assign","value":"pub fn sub_assign(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another histogram from this histogram","sig":null,"attributes":[{"value":"/ Subtracts another histogram from this histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10264,"byte_end":10315,"line_start":161,"line_end":161,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10320,"byte_end":10323,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ NOTES:","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10328,"byte_end":10338,"line_start":163,"line_end":163,"column_start":5,"column_end":15}},{"value":"/ If the histograms differ in their configured range, we treat the samples","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10343,"byte_end":10419,"line_start":164,"line_end":164,"column_start":5,"column_end":81}},{"value":"/ that were too high on the right hand side as if they would also be too","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10424,"byte_end":10498,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/ high on the histogram those counts are subtracted from. This may produce","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10503,"byte_end":10579,"line_start":166,"line_end":166,"column_start":5,"column_end":81}},{"value":"/ unexpected results if subtracting a histogram with a smaller range from","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10584,"byte_end":10659,"line_start":167,"line_end":167,"column_start":5,"column_end":80}},{"value":"/ one with a wider range.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10664,"byte_end":10691,"line_start":168,"line_end":168,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10696,"byte_end":10699,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ If the histograms differ in their configured precision, unusual","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10704,"byte_end":10771,"line_start":170,"line_end":170,"column_start":5,"column_end":72}},{"value":"/ artifacts may be introduced by subtracting a low precision histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10776,"byte_end":10848,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ from one with higher precision.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":10853,"byte_end":10888,"line_start":172,"line_end":172,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12457,"byte_end":12467,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"add_assign","qualname":"<AtomicHistogram<Value, Count>>::add_assign","value":"pub fn add_assign(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Adds another histogram to this histogram","sig":null,"attributes":[{"value":"/ Adds another histogram to this histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":11849,"byte_end":11893,"line_start":196,"line_end":196,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":11898,"byte_end":11901,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ NOTES:","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":11906,"byte_end":11916,"line_start":198,"line_end":198,"column_start":5,"column_end":15}},{"value":"/ If the histograms differ in their configured range, we treat the samples","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":11921,"byte_end":11997,"line_start":199,"line_end":199,"column_start":5,"column_end":81}},{"value":"/ that were too high on the right hand side as if they would also be too","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12002,"byte_end":12076,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ high on the histogram those counts are added to. This may produce","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12081,"byte_end":12150,"line_start":201,"line_end":201,"column_start":5,"column_end":74}},{"value":"/ unexpected results if adding a histogram with a smaller range to one","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12155,"byte_end":12227,"line_start":202,"line_end":202,"column_start":5,"column_end":77}},{"value":"/ with a wider range.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12232,"byte_end":12255,"line_start":203,"line_end":203,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12260,"byte_end":12263,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If the histograms differ in their configured precision, unusual","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12268,"byte_end":12335,"line_start":205,"line_end":205,"column_start":5,"column_end":72}},{"value":"/ artifacts may be introduced by adding a low precision histogram to one","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12340,"byte_end":12414,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ with higher precision.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":12419,"byte_end":12445,"line_start":207,"line_end":207,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13719,"byte_end":13723,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicHistogram<Value, Count>>::load","value":"pub fn load(&Self) -> Histogram<Value, <Count as Atomic>::Primitive> where\nValue: Copy + std::ops::Sub<Output = Value>,\n<Count as Atomic>::Primitive: Counter","parent":null,"children":[],"decl_id":null,"docs":" Convert this `AtomicHistogram` to a non-atomic version by allocating a\n new histogram and performing relaxed loads.","sig":null,"attributes":[{"value":"/ Convert this `AtomicHistogram` to a non-atomic version by allocating a","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13406,"byte_end":13480,"line_start":231,"line_end":231,"column_start":5,"column_end":79}},{"value":"/ new histogram and performing relaxed loads.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13485,"byte_end":13532,"line_start":232,"line_end":232,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13537,"byte_end":13540,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Note: users needing stronger consistency should ensure that no other","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13545,"byte_end":13617,"line_start":234,"line_end":234,"column_start":5,"column_end":77}},{"value":"/ threads are writing to the histogram while this operation is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13622,"byte_end":13686,"line_start":235,"line_end":235,"column_start":5,"column_end":69}},{"value":"/ in-progress.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":13691,"byte_end":13707,"line_start":236,"line_end":236,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":99},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":14100,"byte_end":14104,"line_start":250,"line_end":250,"column_start":12,"column_end":16},"name":"Iter","qualname":"::histograms::atomic::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":259},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":15860,"byte_end":15869,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"Histogram","qualname":"::histograms::standard::Histogram","value":"Histogram {  }","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" A histogram structure which stores counts for a range of values.\n","sig":null,"attributes":[{"value":"/ A histogram structure which stores counts for a range of values.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":15780,"byte_end":15848,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16273,"byte_end":16276,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Histogram<Value, Count>>::new","value":"pub fn new(Value, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new histogram. Stores values from 0 to max. Precision is used\n to specify how many significant figures will be preserved.\n","sig":null,"attributes":[{"value":"/ Create a new histogram. Stores values from 0 to max. Precision is used","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16120,"byte_end":16194,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ to specify how many significant figures will be preserved.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16199,"byte_end":16261,"line_start":24,"line_end":24,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17075,"byte_end":17084,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"increment","qualname":"<Histogram<Value, Count>>::increment","value":"pub fn increment(&mut Self, Value, Count)","parent":null,"children":[],"decl_id":null,"docs":" Increment the value by the provided count, may saturate the bucket's\n counter.\n","sig":null,"attributes":[{"value":"/ Increment the value by the provided count, may saturate the bucket's","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16974,"byte_end":17046,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ counter.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17051,"byte_end":17063,"line_start":50,"line_end":50,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17439,"byte_end":17448,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"decrement","qualname":"<Histogram<Value, Count>>::decrement","value":"pub fn decrement(&mut Self, Value, Count)","parent":null,"children":[],"decl_id":null,"docs":" Decrement the value by the provided count, may saturate at zero.\n","sig":null,"attributes":[{"value":"/ Decrement the value by the provided count, may saturate at zero.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17359,"byte_end":17427,"line_start":59,"line_end":59,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17756,"byte_end":17761,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"clear","qualname":"<Histogram<Value, Count>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all counts.\n","sig":null,"attributes":[{"value":"/ Clear all counts.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17723,"byte_end":17744,"line_start":68,"line_end":68,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":18000,"byte_end":18007,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"buckets","qualname":"<Histogram<Value, Count>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of buckets stored within the histogram.\n","sig":null,"attributes":[{"value":"/ Return the number of buckets stored within the histogram.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":17927,"byte_end":17988,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":18292,"byte_end":18302,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"percentile","qualname":"<Histogram<Value, Count>>::percentile","value":"pub fn percentile(&Self, f64) -> Result<Value, HistogramError>","parent":null,"children":[],"decl_id":null,"docs":" Return the value closest to the specified percentile. Returns an error\n if the value is outside of the histogram range or if the histogram is\n empty. Percentile must be within the range 0.0 to 100.0\n","sig":null,"attributes":[{"value":"/ Return the value closest to the specified percentile. Returns an error","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":18064,"byte_end":18138,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ if the value is outside of the histogram range or if the histogram is","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":18143,"byte_end":18216,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ empty. Percentile must be within the range 0.0 to 100.0","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":18221,"byte_end":18280,"line_start":83,"line_end":83,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20968,"byte_end":20978,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"sub_assign","qualname":"<Histogram<Value, Count>>::sub_assign","value":"pub fn sub_assign(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another histogram from this histogram","sig":null,"attributes":[{"value":"/ Subtracts another histogram from this histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20332,"byte_end":20383,"line_start":155,"line_end":155,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20388,"byte_end":20391,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ NOTES:","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20396,"byte_end":20406,"line_start":157,"line_end":157,"column_start":5,"column_end":15}},{"value":"/ If the histograms differ in their configured range, we treat the samples","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20411,"byte_end":20487,"line_start":158,"line_end":158,"column_start":5,"column_end":81}},{"value":"/ that were too high on the right hand side as if they would also be too","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20492,"byte_end":20566,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/ high on the histogram those counts are subtracted from. This may produce","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20571,"byte_end":20647,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ unexpected results if subtracting a histogram with a smaller range from","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20652,"byte_end":20727,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ one with a wider range.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20732,"byte_end":20759,"line_start":162,"line_end":162,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20764,"byte_end":20767,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ If the histograms differ in their configured precision, unusual","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20772,"byte_end":20839,"line_start":164,"line_end":164,"column_start":5,"column_end":72}},{"value":"/ artifacts may be introduced by subtracting a low precision histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20844,"byte_end":20916,"line_start":165,"line_end":165,"column_start":5,"column_end":77}},{"value":"/ from one with higher precision.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":20921,"byte_end":20956,"line_start":166,"line_end":166,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22243,"byte_end":22253,"line_start":195,"line_end":195,"column_start":12,"column_end":22},"name":"add_assign","qualname":"<Histogram<Value, Count>>::add_assign","value":"pub fn add_assign(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Adds another histogram to this histogram","sig":null,"attributes":[{"value":"/ Adds another histogram to this histogram","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21635,"byte_end":21679,"line_start":183,"line_end":183,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21684,"byte_end":21687,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ NOTES:","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21692,"byte_end":21702,"line_start":185,"line_end":185,"column_start":5,"column_end":15}},{"value":"/ If the histograms differ in their configured range, we treat the samples","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21707,"byte_end":21783,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ that were too high on the right hand side as if they would also be too","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21788,"byte_end":21862,"line_start":187,"line_end":187,"column_start":5,"column_end":79}},{"value":"/ high on the histogram those counts are added to. This may produce","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21867,"byte_end":21936,"line_start":188,"line_end":188,"column_start":5,"column_end":74}},{"value":"/ unexpected results if adding a histogram with a smaller range to one","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":21941,"byte_end":22013,"line_start":189,"line_end":189,"column_start":5,"column_end":77}},{"value":"/ with a wider range.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22018,"byte_end":22041,"line_start":190,"line_end":190,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22046,"byte_end":22049,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ If the histograms differ in their configured precision, unusual","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22054,"byte_end":22121,"line_start":192,"line_end":192,"column_start":5,"column_end":72}},{"value":"/ artifacts may be introduced by adding a low precision histogram to one","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22126,"byte_end":22200,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ with higher precision.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22205,"byte_end":22231,"line_start":194,"line_end":194,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":22919,"byte_end":22923,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"name":"Iter","qualname":"::histograms::standard::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24478,"byte_end":24486,"line_start":14,"line_end":14,"column_start":11,"column_end":19},"name":"Indexing","qualname":"::indexing::Indexing","value":"Indexing","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"decl_id":null,"docs":" Used to restrict what types may be used as values for histograms. Also used\n to provide a unified interface for performing type-specific operations such\n as indexing into the internal storage, converting an index back to bucket\n values, and calculating configuration parameters for the histogram.\n","sig":null,"attributes":[{"value":"/ Used to restrict what types may be used as values for histograms. Also used","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24158,"byte_end":24237,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ to provide a unified interface for performing type-specific operations such","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24238,"byte_end":24317,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ as indexing into the internal storage, converting an index back to bucket","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24318,"byte_end":24395,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ values, and calculating configuration parameters for the histogram.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24396,"byte_end":24467,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24596,"byte_end":24605,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"get_index","qualname":"::indexing::Indexing::get_index","value":"pub fn get_index(Self, Self, Self, u8) -> Result<usize, ()>","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Calculate a bucket index for a given value and configuration.\n","sig":null,"attributes":[{"value":"/ Calculate a bucket index for a given value and configuration.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24523,"byte_end":24588,"line_start":18,"line_end":18,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24783,"byte_end":24796,"line_start":23,"line_end":23,"column_start":8,"column_end":21},"name":"get_min_value","qualname":"::indexing::Indexing::get_min_value","value":"pub fn get_min_value(usize, usize, Self, Self, u8) -> Result<Self, ()>","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Calculate the minimum stored value for a given bucket index and\n configuration.\n","sig":null,"attributes":[{"value":"/ Calculate the minimum stored value for a given bucket index and","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24685,"byte_end":24752,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ configuration.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24757,"byte_end":24775,"line_start":22,"line_end":22,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25022,"byte_end":25031,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"get_value","qualname":"::indexing::Indexing::get_value","value":"pub fn get_value(usize, usize, Self, Self, u8) -> Result<Self, ()>","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Calculate the nominal value for a given bucket index and configuration.\n","sig":null,"attributes":[{"value":"/ Calculate the nominal value for a given bucket index and configuration.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":24939,"byte_end":25014,"line_start":31,"line_end":31,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25273,"byte_end":25286,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"get_max_value","qualname":"::indexing::Indexing::get_max_value","value":"pub fn get_max_value(usize, usize, Self, Self, u8) -> Result<Self, ()>","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Calculate the exclusive upper bound for a given bucket index and\n configuration.\n","sig":null,"attributes":[{"value":"/ Calculate the exclusive upper bound for a given bucket index and","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25174,"byte_end":25242,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/ configuration.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25247,"byte_end":25265,"line_start":41,"line_end":41,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25499,"byte_end":25518,"line_start":51,"line_end":51,"column_start":8,"column_end":27},"name":"constrain_precision","qualname":"::indexing::Indexing::constrain_precision","value":"pub fn constrain_precision(u8) -> u8","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Used to reduce the configured precision based on the type.\n","sig":null,"attributes":[{"value":"/ Used to reduce the configured precision based on the type.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25429,"byte_end":25491,"line_start":50,"line_end":50,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25661,"byte_end":25676,"line_start":55,"line_end":55,"column_start":8,"column_end":23},"name":"constrain_exact","qualname":"::indexing::Indexing::constrain_exact","value":"pub fn constrain_exact(Self, u8) -> Self","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Used to calculate the highest value which is stored exactly for a given\n type and configuration.\n","sig":null,"attributes":[{"value":"/ Used to calculate the highest value which is stored exactly for a given","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25546,"byte_end":25621,"line_start":53,"line_end":53,"column_start":5,"column_end":80}},{"value":"/ type and configuration.","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/indexing/mod.rs","byte_start":25626,"byte_end":25653,"line_start":54,"line_end":54,"column_start":5,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1347,"byte_end":1353,"line_start":15,"line_end":15,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2361,"byte_end":2369,"line_start":15,"line_end":15,"column_start":44,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2416,"byte_end":2425,"line_start":16,"line_end":16,"column_start":44,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2472,"byte_end":2481,"line_start":17,"line_end":17,"column_start":44,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2528,"byte_end":2537,"line_start":18,"line_end":18,"column_start":44,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2584,"byte_end":2595,"line_start":19,"line_end":19,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5490,"byte_end":5505,"line_start":21,"line_end":21,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":14377,"byte_end":14381,"line_start":261,"line_end":261,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":14723,"byte_end":14727,"line_start":273,"line_end":273,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16007,"byte_end":16016,"line_start":17,"line_end":17,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":23111,"byte_end":23115,"line_start":222,"line_end":222,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":23372,"byte_end":23376,"line_start":233,"line_end":233,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/bucket/mod.rs","byte_start":1347,"byte_end":1353,"line_start":15,"line_end":15,"column_start":20,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":7},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2210,"byte_end":2216,"line_start":8,"line_end":8,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":22,"index":27},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2243,"byte_end":2251,"line_start":9,"line_end":9,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":22,"index":56},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2278,"byte_end":2298,"line_start":10,"line_end":10,"column_start":27,"column_end":47},"kind":"SuperTrait","from":{"krate":22,"index":51},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2305,"byte_end":2312,"line_start":11,"line_end":11,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2361,"byte_end":2369,"line_start":15,"line_end":15,"column_start":44,"column_end":52},"kind":{"Impl":{"id":1}},"from":{"krate":22,"index":1060},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2416,"byte_end":2425,"line_start":16,"line_end":16,"column_start":44,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":22,"index":1089},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2472,"byte_end":2481,"line_start":17,"line_end":17,"column_start":44,"column_end":53},"kind":{"Impl":{"id":3}},"from":{"krate":22,"index":1118},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2528,"byte_end":2537,"line_start":18,"line_end":18,"column_start":44,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":22,"index":1147},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2584,"byte_end":2595,"line_start":19,"line_end":19,"column_start":44,"column_end":55},"kind":{"Impl":{"id":5}},"from":{"krate":22,"index":1176},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2726,"byte_end":2733,"line_start":23,"line_end":23,"column_start":20,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/counter/mod.rs","byte_start":2736,"byte_end":2740,"line_start":23,"line_end":23,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3026},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":5490,"byte_end":5505,"line_start":21,"line_end":21,"column_start":20,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":14377,"byte_end":14381,"line_start":261,"line_end":261,"column_start":24,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/atomic.rs","byte_start":14723,"byte_end":14727,"line_start":273,"line_end":273,"column_start":37,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":99},"to":{"krate":2,"index":7646}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":16007,"byte_end":16016,"line_start":17,"line_end":17,"column_start":20,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":23111,"byte_end":23115,"line_start":222,"line_end":222,"column_start":24,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/users/u6632448/.cargo/git/checkouts/rustcommon-6d19245ea20d93f9/c8aeeb6/histogram/src/histograms/standard.rs","byte_start":23372,"byte_end":23376,"line_start":233,"line_end":233,"column_start":37,"column_end":41},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":149},"to":{"krate":2,"index":7646}}]}